/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ElementRef, Injector, ComponentFactoryResolver, Renderer2, TemplateRef } from '@angular/core';
import { PopoverComponent } from './popover.component';
import { PopoverOptions } from './popover-options.provider';
import { PopoverComponentOptions } from './popover-component-options.provider';
import * as Positioning from '../core/util/position';
export class PopoverDirective {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _elm
     * @param {?} _defaultOptions
     * @param {?} _cfr
     * @param {?} _renderer
     */
    constructor(_viewContainerRef, _elm, _defaultOptions, _cfr, _renderer) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._renderer = _renderer;
        this._eventListeners = [];
        this.onVisibleChange = new EventEmitter(true);
        this.onSelect = new EventEmitter();
    }
    /**
     * @return {?}
     */
    togglePopover() {
        if (!this.popover) {
            this.showPopover();
        }
        else {
            this.hidePopover();
        }
    }
    /**
     * @param {?} placement
     * @return {?}
     */
    positionMap(placement) {
        switch (placement) {
            case 'topLeft':
                return 'top-left';
            case 'topRight':
                return 'top-right';
            case 'bottomLeft':
                return 'bottom-left';
            case 'bottomRight':
                return 'bottom-right';
            case 'leftTop':
                return 'left-top';
            case 'leftBottom':
                return 'left-bottom';
            case 'rightTop':
                return 'right-top';
            case 'rightBottom':
                return 'right-bottom';
            case 'fullScreen':
            case 'landScape':
                return 'bottom';
            default:
                return placement;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.visible && changes.visible.currentValue) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.showPopover();
            }), 0);
        }
        else {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.hidePopover();
            }), 0);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.hidePopover();
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        if (this.popover &&
            !this._elm.nativeElement.contains(event.target) &&
            !this.popover.location.nativeElement.contains(event.target)) {
            this.hidePopover();
        }
    }
    /**
     * @private
     * @return {?}
     */
    showPopover() {
        if (!this.popover) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this._eventListeners = [
                    this._renderer.listen('document', 'click', (/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => this.onDocumentClick(event))),
                    this._renderer.listen('document', 'touchend', (/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => this.onDocumentClick(event))),
                    this._renderer.listen('window', 'resize', (/**
                     * @return {?}
                     */
                    () => this.positionPopover()))
                ];
            }));
            /** @type {?} */
            const options = new PopoverComponentOptions();
            options.placement = this.placement;
            Object.assign(options, this._defaultOptions, {
                hidePopover: (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this.hidePopover();
                }),
                onAfterViewInit: (/**
                 * @return {?}
                 */
                () => {
                    this.positionPopover();
                    /** @type {?} */
                    const children = document.getElementsByClassName('am-popover-inner-wrapper')[0].children;
                    if (children.length > 0) {
                        // 首先我们检查它是否包含子节点
                        for (let i = 0; i < children.length; i++) {
                            children[i].id = `${i}`;
                            children[i].addEventListener('click', (/**
                             * @return {?}
                             */
                            () => {
                                if (this.onSelect) {
                                    this.onSelect.emit(children[i]);
                                    if (options.autoClose) {
                                        this.hidePopover();
                                    }
                                }
                            }), false);
                        }
                    }
                })
            });
            /** @type {?} */
            const optionalParams = [
                'mask',
                'showArrow',
                'placement',
                'appendToBody',
                'overlay',
                'className',
                'autoClose'
            ];
            optionalParams.forEach((/**
             * @param {?} param
             * @return {?}
             */
            param => {
                if (typeof this[param] !== 'undefined') {
                    ((/** @type {?} */ (options)))[param] = this[param];
                }
            }));
            /** @type {?} */
            const componentFactory = this._cfr.resolveComponentFactory(PopoverComponent);
            /** @type {?} */
            const childInjector = Injector.create([
                {
                    provide: PopoverComponentOptions,
                    useValue: options
                }
            ], this._viewContainerRef.parentInjector);
            this.popover = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options.appendToBody) {
                document.body.appendChild(this.popover.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    }
    /**
     * @private
     * @return {?}
     */
    positionPopover() {
        if (this.popover) {
            /** @type {?} */
            const popoverElement = this.popover.location.nativeElement.children[1];
            /** @type {?} */
            const popoverPosition = Positioning.getPositionElements(this._elm.nativeElement, popoverElement, this.positionMap(this.placement) || this._defaultOptions.placement, this.appendToBody || this._defaultOptions.appendToBody);
            if (this.placement === 'landScape') {
                this._renderer.setStyle(popoverElement, 'top', `${popoverPosition.top}px`);
                this._renderer.setStyle(popoverElement, 'left', `0px`);
                this._renderer.setStyle(popoverElement, 'width', `${window.innerWidth}px`);
                this._renderer.setStyle(popoverElement, 'max-height', `${window.innerHeight - popoverPosition.height}px`);
            }
            else if (this.placement === 'fullScreen') {
                this._renderer.setStyle(popoverElement, 'top', `${0}px`);
                this._renderer.setStyle(popoverElement, 'left', `0px`);
                this._renderer.setStyle(popoverElement, 'width', `${window.innerWidth}px`);
                this._renderer.setStyle(popoverElement, 'max-height', `${window.innerHeight - popoverPosition.height}px`);
            }
            else {
                this._renderer.setStyle(popoverElement, 'top', `${popoverPosition.top}px`);
                this._renderer.setStyle(popoverElement, 'left', `${popoverPosition.left}px`);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    hidePopover() {
        if (this.popover) {
            this.popover.destroy();
            delete this.popover;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._eventListeners = [];
        }
    }
}
PopoverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[Popover], [nzm-popover]',
                providers: [PopoverOptions]
            },] }
];
/** @nocollapse */
PopoverDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: PopoverOptions },
    { type: ComponentFactoryResolver },
    { type: Renderer2 }
];
PopoverDirective.propDecorators = {
    mask: [{ type: Input }],
    showArrow: [{ type: Input }],
    visible: [{ type: Input }],
    placement: [{ type: Input }],
    overlay: [{ type: Input }],
    onVisibleChange: [{ type: Output }],
    onSelect: [{ type: Output }],
    appendToBody: [{ type: Input }],
    className: [{ type: Input }],
    autoClose: [{ type: Input }],
    togglePopover: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    PopoverDirective.prototype.popover;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._eventListeners;
    /** @type {?} */
    PopoverDirective.prototype.mask;
    /** @type {?} */
    PopoverDirective.prototype.showArrow;
    /** @type {?} */
    PopoverDirective.prototype.visible;
    /** @type {?} */
    PopoverDirective.prototype.placement;
    /** @type {?} */
    PopoverDirective.prototype.overlay;
    /** @type {?} */
    PopoverDirective.prototype.onVisibleChange;
    /** @type {?} */
    PopoverDirective.prototype.onSelect;
    /** @type {?} */
    PopoverDirective.prototype.appendToBody;
    /** @type {?} */
    PopoverDirective.prototype.className;
    /** @type {?} */
    PopoverDirective.prototype.autoClose;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._elm;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._defaultOptions;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._cfr;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,
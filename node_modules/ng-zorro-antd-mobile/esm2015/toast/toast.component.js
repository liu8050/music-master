/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, TemplateRef, NgZone } from '@angular/core';
export class ToastComponent {
    /**
     * @param {?} _zone
     */
    constructor(_zone) {
        this._zone = _zone;
        this.prefixCls = 'am-toast';
        this.isContentString = true;
        this.transitionName = 'am-fade-enter am-fade-enter-active';
        this._iconType = '';
        this._content = '';
        this.mask = true;
        this.position = 'middle';
    }
    /**
     * @return {?}
     */
    get content() {
        return this._content;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set content(value) {
        if (value instanceof TemplateRef) {
            this.isContentString = false;
        }
        else {
            this.isContentString = true;
        }
        this._zone.run((/**
         * @return {?}
         */
        () => {
            this._content = value;
        }));
    }
    /**
     * @return {?}
     */
    get iconType() {
        return this._iconType;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set iconType(value) {
        this._zone.run((/**
         * @return {?}
         */
        () => {
            this._iconType = value;
        }));
    }
}
ToastComponent.decorators = [
    { type: Component, args: [{
                selector: 'Toast',
                encapsulation: ViewEncapsulation.None,
                template: "<div class=\"{{prefixCls}}-notice {{prefixCls}}-notice-closable {{transitionName}}\">\n  <div class=\"{{prefixCls}}-notice-content\">\n    <div role=\"alert\"\n         *ngIf=\"iconType\"\n         class=\"{{prefixCls}}-text {{prefixCls}}-text-icon\"\n         aria-live=\"assertive\"\n    >\n      <Icon [type]=\"iconType\" [size]=\"'lg'\"></Icon>\n      <div *ngIf=\"isContentString\" class=\"{{prefixCls}}-text-info\">{{content}}</div>\n    </div>\n    <div *ngIf=\"!iconType\" class=\"{{prefixCls}}-text\" role=\"alert\" aria-live=\"assertive\">\n      <div *ngIf=\"isContentString\" class=\"{{prefixCls}}-text-info\">{{content}}</div>\n      <ng-template *ngIf=\"!isContentString\" [ngTemplateOutlet]=\"content\"></ng-template>\n    </div>\n  </div>\n  <a class=\"{{prefixCls}}-notice-close\">\n    <span class=\"{{prefixCls}}-notice-close-x\"></span>\n  </a>\n</div>\n",
                host: {
                    '[class.am-toast]': 'true',
                    '[class.am-toast-mask]': 'mask',
                    '[class.am-toast-mask-top]': `mask && position === 'top'`,
                    '[class.am-toast-mask-middle]': `mask && position === 'middle'`,
                    '[class.am-toast-mask-bottom]': `mask && position === 'bottom'`,
                    '[class.am-toast-nomask]': '!mask',
                    '[class.am-toast-nomask-top]': `!mask && position === 'top'`,
                    '[class.am-toast-nomask-middle]': `!mask && position === 'middle'`,
                    '[class.am-toast-nomask-bottom]': `!mask && position === 'bottom'`,
                }
            }] }
];
/** @nocollapse */
ToastComponent.ctorParameters = () => [
    { type: NgZone }
];
ToastComponent.propDecorators = {
    mask: [{ type: Input }],
    content: [{ type: Input }],
    iconType: [{ type: Input }],
    position: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ToastComponent.prototype.prefixCls;
    /** @type {?} */
    ToastComponent.prototype.isContentString;
    /** @type {?} */
    ToastComponent.prototype.maskClassMap;
    /** @type {?} */
    ToastComponent.prototype.transitionName;
    /**
     * @type {?}
     * @private
     */
    ToastComponent.prototype._iconType;
    /**
     * @type {?}
     * @private
     */
    ToastComponent.prototype._content;
    /** @type {?} */
    ToastComponent.prototype.mask;
    /** @type {?} */
    ToastComponent.prototype.position;
    /**
     * @type {?}
     * @private
     */
    ToastComponent.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJ0b2FzdC90b2FzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFrQnpGLE1BQU0sT0FBTyxjQUFjOzs7O0lBcUN6QixZQUFvQixLQUFhO1FBQWIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQXBDakMsY0FBUyxHQUFXLFVBQVUsQ0FBQztRQUMvQixvQkFBZSxHQUFZLElBQUksQ0FBQztRQUVoQyxtQkFBYyxHQUFHLG9DQUFvQyxDQUFDO1FBRTlDLGNBQVMsR0FBVyxFQUFFLENBQUM7UUFDdkIsYUFBUSxHQUE4QixFQUFFLENBQUM7UUFHakQsU0FBSSxHQUFZLElBQUksQ0FBQztRQXlCckIsYUFBUSxHQUFXLFFBQVEsQ0FBQztJQUVRLENBQUM7Ozs7SUExQnJDLElBQ0ksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOzs7OztJQUNELElBQUksT0FBTyxDQUFDLEtBQWdDO1FBQzFDLElBQUksS0FBSyxZQUFZLFdBQVcsRUFBRTtZQUNoQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztTQUM5QjthQUFNO1lBQ0wsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7U0FDN0I7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7OztRQUFDLEdBQUcsRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN4QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFDRCxJQUNJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFDRCxJQUFJLFFBQVEsQ0FBQyxLQUFhO1FBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7O1FBQUMsR0FBRyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBakRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsT0FBTztnQkFDakIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLHMzQkFBcUM7Z0JBQ3JDLElBQUksRUFBRTtvQkFDSixrQkFBa0IsRUFBRSxNQUFNO29CQUMxQix1QkFBdUIsRUFBRSxNQUFNO29CQUMvQiwyQkFBMkIsRUFBRSw0QkFBNEI7b0JBQ3pELDhCQUE4QixFQUFFLCtCQUErQjtvQkFDL0QsOEJBQThCLEVBQUUsK0JBQStCO29CQUMvRCx5QkFBeUIsRUFBRSxPQUFPO29CQUNsQyw2QkFBNkIsRUFBRSw2QkFBNkI7b0JBQzVELGdDQUFnQyxFQUFFLGdDQUFnQztvQkFDbEUsZ0NBQWdDLEVBQUUsZ0NBQWdDO2lCQUNuRTthQUNGOzs7O1lBakIwRCxNQUFNOzs7bUJBMkI5RCxLQUFLO3NCQUVMLEtBQUs7dUJBY0wsS0FBSzt1QkFTTCxLQUFLOzs7O0lBakNOLG1DQUErQjs7SUFDL0IseUNBQWdDOztJQUNoQyxzQ0FBYTs7SUFDYix3Q0FBc0Q7Ozs7O0lBRXRELG1DQUErQjs7Ozs7SUFDL0Isa0NBQWlEOztJQUVqRCw4QkFDcUI7O0lBd0JyQixrQ0FDNEI7Ozs7O0lBRWhCLCtCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24sIElucHV0LCBUZW1wbGF0ZVJlZiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1RvYXN0JyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgdGVtcGxhdGVVcmw6ICcuL3RvYXN0LmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuYW0tdG9hc3RdJzogJ3RydWUnLFxuICAgICdbY2xhc3MuYW0tdG9hc3QtbWFza10nOiAnbWFzaycsXG4gICAgJ1tjbGFzcy5hbS10b2FzdC1tYXNrLXRvcF0nOiBgbWFzayAmJiBwb3NpdGlvbiA9PT0gJ3RvcCdgLFxuICAgICdbY2xhc3MuYW0tdG9hc3QtbWFzay1taWRkbGVdJzogYG1hc2sgJiYgcG9zaXRpb24gPT09ICdtaWRkbGUnYCxcbiAgICAnW2NsYXNzLmFtLXRvYXN0LW1hc2stYm90dG9tXSc6IGBtYXNrICYmIHBvc2l0aW9uID09PSAnYm90dG9tJ2AsXG4gICAgJ1tjbGFzcy5hbS10b2FzdC1ub21hc2tdJzogJyFtYXNrJyxcbiAgICAnW2NsYXNzLmFtLXRvYXN0LW5vbWFzay10b3BdJzogYCFtYXNrICYmIHBvc2l0aW9uID09PSAndG9wJ2AsXG4gICAgJ1tjbGFzcy5hbS10b2FzdC1ub21hc2stbWlkZGxlXSc6IGAhbWFzayAmJiBwb3NpdGlvbiA9PT0gJ21pZGRsZSdgLFxuICAgICdbY2xhc3MuYW0tdG9hc3Qtbm9tYXNrLWJvdHRvbV0nOiBgIW1hc2sgJiYgcG9zaXRpb24gPT09ICdib3R0b20nYCxcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBUb2FzdENvbXBvbmVudCB7XG4gIHByZWZpeENsczogc3RyaW5nID0gJ2FtLXRvYXN0JztcbiAgaXNDb250ZW50U3RyaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgbWFza0NsYXNzTWFwO1xuICB0cmFuc2l0aW9uTmFtZSA9ICdhbS1mYWRlLWVudGVyIGFtLWZhZGUtZW50ZXItYWN0aXZlJztcblxuICBwcml2YXRlIF9pY29uVHlwZTogc3RyaW5nID0gJyc7XG4gIHByaXZhdGUgX2NvbnRlbnQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4gPSAnJztcblxuICBASW5wdXQoKVxuICBtYXNrOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KClcbiAgZ2V0IGNvbnRlbnQoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG4gIH1cbiAgc2V0IGNvbnRlbnQodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5pc0NvbnRlbnRTdHJpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc0NvbnRlbnRTdHJpbmcgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XG4gICAgICB0aGlzLl9jb250ZW50ID0gdmFsdWU7XG4gICAgfSk7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IGljb25UeXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2ljb25UeXBlO1xuICB9XG4gIHNldCBpY29uVHlwZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fem9uZS5ydW4oKCkgPT4ge1xuICAgICAgdGhpcy5faWNvblR5cGUgPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuICBASW5wdXQoKVxuICBwb3NpdGlvbjogc3RyaW5nID0gJ21pZGRsZSc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfem9uZTogTmdab25lKSB7fVxufVxuIl19
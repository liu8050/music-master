/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, HostBinding, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class RangeComponent {
    /**
     * @param {?} _elf
     */
    constructor(_elf) {
        this._elf = _elf;
        this.prefixCls = 'am-slider';
        this.offset = [];
        this.length = [];
        this._min = 0;
        this._max = 100;
        this._step = 1;
        this._defaultValue = [0, 0, 0];
        this._disabled = false;
        this._marks = {};
        this._dots = false;
        this._included = true;
        this._count = 1;
        this._allowCross = true;
        this._handleStyle = [];
        this._trackStyle = [];
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
        this.amWrapper = true;
        this._ngModelOnChange = (/**
         * @return {?}
         */
        () => { });
        this._ngModelOnTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = value;
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = value;
    }
    /**
     * @return {?}
     */
    get step() {
        return this._step;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this._step = value;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.setValue(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultValue(value) {
        this._defaultValue = value;
        this._value = this._defaultValue;
        this.setValue(value);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = value;
    }
    /**
     * @return {?}
     */
    get marks() {
        return this._marks;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set marks(value) {
        this._marks = value;
    }
    /**
     * @return {?}
     */
    get dots() {
        return this._dots;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dots(value) {
        this._dots = value;
    }
    /**
     * @return {?}
     */
    get included() {
        return this._included;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set included(value) {
        this._included = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set count(value) {
        this._count = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set allowCross(value) {
        this._allowCross = value;
        this.setValueBound();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pushable(value) {
        this._pushable = value;
        if (this.verifyPushable()) {
            this.setValueBound();
        }
    }
    /**
     * @return {?}
     */
    get handleStyle() {
        return this._handleStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set handleStyle(value) {
        this._handleStyle = value;
    }
    /**
     * @return {?}
     */
    get trackStyle() {
        return this._trackStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set trackStyle(value) {
        this._trackStyle = value;
    }
    /**
     * @return {?}
     */
    get railStyle() {
        return this._railStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set railStyle(value) {
        this._railStyle = value;
    }
    /**
     * @return {?}
     */
    setCls() {
        this.sliderCls = {
            [`${this.prefixCls}-disabled`]: this._disabled
        };
    }
    /**
     * @return {?}
     */
    initialValue() {
        /** @type {?} */
        const minTemp = this._min;
        if (!this.verifyPushable()) {
            this._pushable = 0;
            console.log('pushable设置无效，已大于有些value间隔，被强制设为0');
        }
        /** @type {?} */
        const initialValue = Array.apply(null, Array(this._count + 1)).map((/**
         * @return {?}
         */
        function () {
            return minTemp;
        }));
        this._defaultValue = this._defaultValue !== undefined ? this._defaultValue : initialValue;
        this._value = this._value !== undefined ? this._value : this._defaultValue;
        // 验证count值
        this._count = this._value.length - 1;
        // 验证value区间
        for (let i = 0; i < this._value.length; i++) {
            if (this._value[i] < this._min) {
                this._value[i] = this._min;
            }
            else if (this._value[i] > this._max) {
                this._value[i] = this._max;
            }
        }
        if (this._count > 0) {
            this.upperBound = Math.max(...this._value);
            this.lowerBound = Math.min(...this._value);
        }
    }
    /**
     * @param {?} e
     * @param {?} i
     * @return {?}
     */
    handleChange(e, i) {
        /** @type {?} */
        let temp = [...this._value];
        temp[i] = e;
        this.upperBound = Math.max(...temp);
        this.lowerBound = Math.min(...temp);
        this.setTrackStyle(temp);
        this.onChange.emit(temp);
    }
    /**
     * @param {?} e
     * @param {?} i
     * @return {?}
     */
    handleAfterChange(e, i) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this._value[i] = e;
            this.upperBound = Math.max(...this._value);
            this.lowerBound = Math.min(...this._value);
            this.setTrackStyle(this._value);
            this.onAfterChange.emit(this._value);
            this._ngModelOnChange(this._value);
            this.setValueBound();
        }), 0);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setTrackStyle(value) {
        if (value && value.length === this._count + 1) {
            value.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a - b));
            for (let i = 0; i < this._count; i++) {
                this.offset[i] = (value[i] * 100) / (this._max - this._min);
                this.length[i] = ((value[i + 1] - value[i]) * 100) / (this._max - this._min);
            }
        }
    }
    /**
     * @return {?}
     */
    setValueBound() {
        this.maxBound = [];
        this.minBound = [];
        if ((this._allowCross && this._pushable === undefined) || this._handleCount <= 1) {
            for (let i = 0; i < this._handleCount; i++) {
                this.maxBound[i] = this._max;
                this.minBound[i] = this._min;
            }
        }
        else {
            if (this._pushable === undefined) {
                this._pushable = 0;
            }
            for (let i = 0; i < this._handleCount; i++) {
                this.maxBound[i] = i === this._handleCount - 1 ? this._max : this._value[i + 1] - this._pushable;
                this.minBound[i] = i === 0 ? this._min : this._value[i - 1] + this._pushable;
            }
        }
    }
    /**
     * @return {?}
     */
    verifyPushable() {
        for (let i = 1; i < this._handleCount; i++) {
            /** @type {?} */
            const diff = this._value[i] - this._value[i - 1];
            if (diff < this._pushable) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.setValue(value, true);
    }
    /**
     * @param {?} value
     * @param {?=} isWriteValue
     * @return {?}
     */
    setValue(value, isWriteValue = false) {
        if (value) {
            this._value = value;
            this._handleCount = this._value.length + 1;
            this.initialValue();
            this.setValueBound();
            this.setCls();
            this.setTrackStyle(this._value);
            if (isWriteValue) {
                this._ngModelOnChange(this._value);
            }
            else {
                this.onAfterChange.emit(this._value);
            }
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._ngModelOnChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._ngModelOnTouched = fn;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initialValue();
        this.setValueBound();
        this._handleCount = this._count + 1;
        this.setCls();
        /** @type {?} */
        const sliderCoords = this._elf.nativeElement.getElementsByClassName('am-slider')[0].getBoundingClientRect();
        this.sliderLength = sliderCoords.width;
        this.sliderStart = sliderCoords.left;
    }
}
RangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'Range , nzm-range',
                template: "<div class=\"am-slider\" [ngClass]=\"sliderCls\">\n  <div class=\"am-slider-rail\" [ngStyle]=\"railStyle\"></div>\n  <SliderTrack *ngFor=\"let off of offset ; let i = index\"\n               [className]=\"'am-slider-track'\"\n               [included]=\"included\"\n               [style]=\"trackStyle[i]\"\n               [offset]=\"off\"\n               [length]=\"length[i]\"\n  ></SliderTrack>\n  <SliderSteps [max]=\"max\"\n               [min]=\"min\"\n               [dots]=\"dots\"\n               [step]=\"step\"\n               [marks]=\"marks\"\n               [upperBound]=\"upperBound\"\n               [lowerBound]=\"lowerBound\"\n  ></SliderSteps>\n  <SliderHandle *ngFor=\"let val of value ; let i = index\"\n                [max]=\"max\"\n                [min]=\"min\"\n                [maxBound]=\"maxBound[i]\"\n                [minBound]=\"minBound[i]\"\n                [value]=\"val\"\n                [step]=\"step\"\n                [disabled]=\"disabled\"\n                [sliderLength]=\"sliderLength\"\n                [sliderStart]=\"sliderStart\"\n                [handleStyle]=\"handleStyle[i]\"\n                (onChange)=\"handleChange($event , i)\"\n                (onAfterChange)=\"handleAfterChange($event , i)\"\n  ></SliderHandle>\n  <SliderMarks [max]=\"max\"\n               [min]=\"min\"\n               [marks]=\"marks\"\n               [upperBound]=\"upperBound\"\n               [lowerBound]=\"lowerBound\"\n  ></SliderMarks>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => RangeComponent)),
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
RangeComponent.ctorParameters = () => [
    { type: ElementRef }
];
RangeComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    value: [{ type: Input }],
    defaultValue: [{ type: Input }],
    disabled: [{ type: Input }],
    marks: [{ type: Input }],
    dots: [{ type: Input }],
    included: [{ type: Input }],
    count: [{ type: Input }],
    allowCross: [{ type: Input }],
    pushable: [{ type: Input }],
    handleStyle: [{ type: Input }],
    trackStyle: [{ type: Input }],
    railStyle: [{ type: Input }],
    onChange: [{ type: Output }],
    onAfterChange: [{ type: Output }],
    amWrapper: [{ type: HostBinding, args: ['class.am-slider-wrapper',] }]
};
if (false) {
    /** @type {?} */
    RangeComponent.prototype.prefixCls;
    /** @type {?} */
    RangeComponent.prototype.offset;
    /** @type {?} */
    RangeComponent.prototype.length;
    /** @type {?} */
    RangeComponent.prototype.upperBound;
    /** @type {?} */
    RangeComponent.prototype.lowerBound;
    /** @type {?} */
    RangeComponent.prototype.maxBound;
    /** @type {?} */
    RangeComponent.prototype.minBound;
    /** @type {?} */
    RangeComponent.prototype.sliderCls;
    /** @type {?} */
    RangeComponent.prototype.sliderLength;
    /** @type {?} */
    RangeComponent.prototype.sliderStart;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._min;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._max;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._step;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._defaultValue;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._marks;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._dots;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._included;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._count;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._allowCross;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._pushable;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._handleStyle;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._trackStyle;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._railStyle;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._handleCount;
    /** @type {?} */
    RangeComponent.prototype.onChange;
    /** @type {?} */
    RangeComponent.prototype.onAfterChange;
    /** @type {?} */
    RangeComponent.prototype.amWrapper;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._ngModelOnChange;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._ngModelOnTouched;
    /**
     * @type {?}
     * @private
     */
    RangeComponent.prototype._elf;
}
//# sourceMappingURL=data:application/json;base64,
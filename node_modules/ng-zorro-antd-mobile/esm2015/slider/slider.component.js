/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, ViewEncapsulation, HostBinding, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class SliderComponent {
    /**
     * @param {?} _elf
     */
    constructor(_elf) {
        this._elf = _elf;
        this.prefixCls = 'am-slider';
        this.offset = 0;
        this.length = 0;
        this._min = 0;
        this._max = 100;
        this._step = 1;
        this._defaultValue = 0;
        this._disabled = false;
        this._marks = {};
        this._dots = false;
        this._included = true;
        this._trackStyle = {};
        this.onAfterChange = new EventEmitter();
        this.onChange = new EventEmitter();
        this.amSliderWrapper = true;
        this._ngModelOnChange = (/**
         * @return {?}
         */
        () => { });
        this._ngModelOnTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = value;
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = value;
    }
    /**
     * @return {?}
     */
    get step() {
        return this._step;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this._step = value;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.setValue(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultValue(value) {
        this._defaultValue = value;
        this.setValue(value);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = value;
        this.setCls();
    }
    /**
     * @return {?}
     */
    get marks() {
        return this._marks;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set marks(value) {
        this._marks = value;
    }
    /**
     * @return {?}
     */
    get dots() {
        return this._dots;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dots(value) {
        this._dots = value;
    }
    /**
     * @return {?}
     */
    get included() {
        return this._included;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set included(value) {
        this._included = value;
    }
    /**
     * @return {?}
     */
    get handleStyle() {
        return this._handleStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set handleStyle(value) {
        this._handleStyle = value;
    }
    /**
     * @return {?}
     */
    get trackStyle() {
        return this._trackStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set trackStyle(value) {
        this._trackStyle = value;
    }
    /**
     * @return {?}
     */
    get railStyle() {
        return this._railStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set railStyle(value) {
        this._railStyle = value;
    }
    /**
     * @return {?}
     */
    setCls() {
        this.sliderCls = {
            [`${this.prefixCls}-disabled`]: this._disabled
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    handleChange(e) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setTrack(e);
            this._value = e;
        }), 10);
        this.onChange.emit(e);
        this._ngModelOnChange(e);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    handleAfterChange(e) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setTrack(e);
            this._value = e;
        }), 10);
        this.onAfterChange.emit(e);
    }
    /**
     * @return {?}
     */
    valueRange() {
        if (this._value < this._min) {
            this._value = this._min;
        }
        if (this._value > this._max) {
            this._value = this._max;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setCls();
        this.setValue(this._value);
        /** @type {?} */
        const sliderCoords = this._elf.nativeElement.getElementsByClassName('am-slider')[0].getBoundingClientRect();
        this.sliderLength = sliderCoords.width;
        this.sliderStart = sliderCoords.left;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.setValue(value, true);
    }
    /**
     * @param {?} value
     * @param {?=} isWriteValue
     * @return {?}
     */
    setValue(value, isWriteValue = false) {
        if (value === 0 || value) {
            this._value = value;
        }
        else {
            this._value = this._defaultValue;
        }
        this.valueRange();
        this.setTrack(this._value);
        if (isWriteValue) {
            this._ngModelOnChange(this._value);
        }
        else {
            this.onAfterChange.emit(this._value);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    setTrack(e) {
        this.offset = 0;
        this.length = ((e - this._min) * 100) / (this._max - this._min);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._ngModelOnChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._ngModelOnTouched = fn;
    }
}
SliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'Slider , nzm-slider',
                template: "<div class=\"am-slider\" [ngClass]=\"sliderCls\">\n  <div class=\"am-slider-rail\" [ngStyle]=\"railStyle\"></div>\n  <SliderTrack [className]=\"'am-slider-track'\"\n               [style]=\"trackStyle\"\n               [offset]=\"offset\"\n               [length]=\"length\"\n               [included]=\"included\"\n  ></SliderTrack>\n  <SliderSteps [max]=\"max\"\n               [min]=\"min\"\n               [dots]=\"dots\"\n               [step]=\"step\"\n               [marks]=\"marks\"\n               [lowerBound]=\"min\"\n               [upperBound]=\"value\"\n               [included]=\"included\"\n  ></SliderSteps>\n  <SliderHandle [max]=\"max\"\n                [min]=\"min\"\n                [value]=\"value\"\n                [step]=\"step\"\n                [disabled]=\"disabled\"\n                [handleStyle]=\"handleStyle\"\n                [sliderStart]=\"sliderStart\"\n                [sliderLength]=\"sliderLength\"\n                (onChange)=\"handleChange($event)\"\n                (onAfterChange)=\"handleAfterChange($event)\"\n  ></SliderHandle>\n  <SliderMarks [max]=\"max\"\n               [min]=\"min\"\n               [marks]=\"marks\"\n               [lowerBound]=\"min\"\n               [upperBound]=\"value\"\n               [included]=\"included\"\n  ></SliderMarks>\n</div>",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SliderComponent)),
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
SliderComponent.ctorParameters = () => [
    { type: ElementRef }
];
SliderComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    value: [{ type: Input }],
    defaultValue: [{ type: Input }],
    disabled: [{ type: Input }],
    marks: [{ type: Input }],
    dots: [{ type: Input }],
    included: [{ type: Input }],
    handleStyle: [{ type: Input }],
    trackStyle: [{ type: Input }],
    railStyle: [{ type: Input }],
    onAfterChange: [{ type: Output }],
    onChange: [{ type: Output }],
    amSliderWrapper: [{ type: HostBinding, args: ['class.am-slider-wrapper',] }]
};
if (false) {
    /** @type {?} */
    SliderComponent.prototype.prefixCls;
    /** @type {?} */
    SliderComponent.prototype.sliderLength;
    /** @type {?} */
    SliderComponent.prototype.sliderStart;
    /** @type {?} */
    SliderComponent.prototype.sliderCls;
    /** @type {?} */
    SliderComponent.prototype.offset;
    /** @type {?} */
    SliderComponent.prototype.length;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._min;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._max;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._step;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._defaultValue;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._marks;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._dots;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._included;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._handleStyle;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._trackStyle;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._railStyle;
    /** @type {?} */
    SliderComponent.prototype.onAfterChange;
    /** @type {?} */
    SliderComponent.prototype.onChange;
    /** @type {?} */
    SliderComponent.prototype.amSliderWrapper;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._ngModelOnChange;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._ngModelOnTouched;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype._elf;
}
//# sourceMappingURL=data:application/json;base64,
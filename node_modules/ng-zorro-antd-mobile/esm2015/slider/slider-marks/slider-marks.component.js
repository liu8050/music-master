/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Output, EventEmitter, HostBinding, ViewEncapsulation } from '@angular/core';
export class SliderMarksComponent {
    /**
     * @param {?} _elf
     */
    constructor(_elf) {
        this._elf = _elf;
        this.markArray = [];
        this._min = 0;
        this._max = 100;
        this._marks = {};
        this._included = true;
        this._className = 'am-slider-mark';
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        if (value && value <= this._max) {
            this._min = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        if (value && value >= this._min) {
            this._max = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set marks(value) {
        this._marks = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set included(value) {
        this._included = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set upperBound(value) {
        if (value && value !== this._upperBound) {
            this._upperBound = value;
            this.setActiveCls();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set lowerBound(value) {
        if (value && value !== this.lowerBound) {
            this._lowerBound = value;
            this.setActiveCls();
        }
    }
    /**
     * @return {?}
     */
    get class() {
        return this._className;
    }
    /**
     * @param {?} marksKeys
     * @return {?}
     */
    getMarks(marksKeys) {
        this.markArray = [];
        marksKeys
            .map(parseFloat)
            .sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => a - b))
            .map((/**
         * @param {?} point
         * @return {?}
         */
        point => {
            /** @type {?} */
            const markItem = {
                markLabel: '',
                point: '',
                className: {},
                style: {}
            };
            /** @type {?} */
            const markPoint = this._marks[point];
            /** @type {?} */
            const markPointIsObject = typeof markPoint === 'object';
            /** @type {?} */
            const markLabel = markPointIsObject ? markPoint.label : markPoint;
            if (!markLabel && markLabel !== 0) {
                return null;
            }
            /** @type {?} */
            const isActive = (!this._included && point === this._upperBound) ||
                (this._included && point <= this._upperBound && point >= this._lowerBound);
            /** @type {?} */
            const markClassName = {
                [`${this._className}-text`]: true,
                [`${this._className}-text-active`]: isActive
            };
            /** @type {?} */
            const bottomStyle = {
                marginBottom: '-50%',
                bottom: `${((point - this._min) / this._range) * 100}%`
            };
            /** @type {?} */
            const leftStyle = {
                width: `${this._markWidth}%`,
                marginLeft: `${-this._markWidth / 2}%`,
                left: `${((point - this._min) / this._range) * 100}%`
            };
            /** @type {?} */
            const style = leftStyle;
            /** @type {?} */
            const markStyle = markPointIsObject ? Object.assign({}, style, markPoint.style) : style;
            markItem.markLabel = markLabel;
            markItem.point = point;
            markItem.className = Object.keys(markClassName).join(' ');
            markItem.style = markStyle;
            this.markArray.push(markItem);
        }));
    }
    /**
     * @return {?}
     */
    setActiveCls() {
        for (let i = 0; i < this.markArray.length; i++) {
            /** @type {?} */
            const point = this.markArray[i].point;
            /** @type {?} */
            const isActive = (!this._included && point === this._upperBound) ||
                (this._included && point <= this._upperBound && point >= this._lowerBound);
            this.markArray[i].className = {
                [`${this._className}-text`]: true,
                [`${this._className}-text-active`]: isActive
            };
        }
    }
    /**
     * @return {?}
     */
    setMarksLable() {
        for (let i = 0; i < this.markArray.length; i++) {
            /** @type {?} */
            const markEle = this._elf.nativeElement.getElementsByClassName(this._className + '-text')[i];
            markEle.innerHTML = this.markArray[i].markLabel;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const marksKeys = Object.keys(this._marks);
        /** @type {?} */
        const marksCount = marksKeys.length;
        /** @type {?} */
        const unit = marksCount > 1 ? 100 / (marksCount - 1) : 100;
        this._markWidth = unit * 0.9;
        this._range = this._max - this._min;
        this.getMarks(marksKeys);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setMarksLable();
    }
}
SliderMarksComponent.decorators = [
    { type: Component, args: [{
                selector: 'SliderMarks, nzm-slider-marks',
                template: "<span *ngFor=\"let item of markArray\"\n      [ngClass]=\"item.className\"\n      [ngStyle]=\"item.style\">\n</span>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SliderMarksComponent.ctorParameters = () => [
    { type: ElementRef }
];
SliderMarksComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    marks: [{ type: Input }],
    included: [{ type: Input }],
    upperBound: [{ type: Input }],
    lowerBound: [{ type: Input }],
    onChange: [{ type: Output }],
    onAfterChange: [{ type: Output }],
    class: [{ type: HostBinding }]
};
if (false) {
    /** @type {?} */
    SliderMarksComponent.prototype.markArray;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._min;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._max;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._marks;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._included;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._className;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._upperBound;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._lowerBound;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._range;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._markWidth;
    /** @type {?} */
    SliderMarksComponent.prototype.onChange;
    /** @type {?} */
    SliderMarksComponent.prototype.onAfterChange;
    /**
     * @type {?}
     * @private
     */
    SliderMarksComponent.prototype._elf;
}
//# sourceMappingURL=data:application/json;base64,
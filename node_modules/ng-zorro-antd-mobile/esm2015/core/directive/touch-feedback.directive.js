/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, HostListener, ElementRef, Renderer2, InjectionToken, } from '@angular/core';
/** @type {?} */
export const INTERFACE_TOKEN = new InjectionToken('InterfaceToken');
export class TouchFeedbackDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.activeStyle = true;
        this.clickStart = new EventEmitter();
        this.clickEnd = new EventEmitter();
    }
    /**
     * @private
     * @param {?} className
     * @return {?}
     */
    addClass(className) {
        this._renderer.addClass(this._elementRef.nativeElement, className);
    }
    /**
     * @private
     * @param {?} className
     * @return {?}
     */
    removeClass(className) {
        this._renderer.removeClass(this._elementRef.nativeElement, className);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._className = this.className;
    }
    /**
     * @return {?}
     */
    touchStart() {
        if (this.activeStyle) {
            this.addClass(this._className);
            this.clickStart.emit();
        }
    }
    /**
     * @return {?}
     */
    touchEnd() {
        if (this.activeStyle) {
            this.removeClass(this._className);
            this.clickEnd.emit();
        }
    }
}
TouchFeedbackDirective.decorators = [
    { type: Directive, args: [{
                selector: '[TouchFeedbackDirective]'
            },] }
];
/** @nocollapse */
TouchFeedbackDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TouchFeedbackDirective.propDecorators = {
    className: [{ type: Input }],
    activeStyle: [{ type: Input }],
    clickStart: [{ type: Output }],
    clickEnd: [{ type: Output }],
    touchStart: [{ type: HostListener, args: ['touchstart',] }, { type: HostListener, args: ['mousedown',] }],
    touchEnd: [{ type: HostListener, args: ['touchend',] }, { type: HostListener, args: ['mouseup',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    TouchFeedbackDirective.prototype._className;
    /** @type {?} */
    TouchFeedbackDirective.prototype.className;
    /** @type {?} */
    TouchFeedbackDirective.prototype.activeStyle;
    /** @type {?} */
    TouchFeedbackDirective.prototype.clickStart;
    /** @type {?} */
    TouchFeedbackDirective.prototype.clickEnd;
    /**
     * @type {?}
     * @private
     */
    TouchFeedbackDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    TouchFeedbackDirective.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91Y2gtZmVlZGJhY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJjb3JlL2RpcmVjdGl2ZS90b3VjaC1mZWVkYmFjay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ1osWUFBWSxFQUNaLFVBQVUsRUFFVixTQUFTLEVBQ1QsY0FBYyxHQUNmLE1BQU0sZUFBZSxDQUFDOztBQUV2QixNQUFNLE9BQU8sZUFBZSxHQUFHLElBQUksY0FBYyxDQUFNLGdCQUFnQixDQUFDO0FBS3hFLE1BQU0sT0FBTyxzQkFBc0I7Ozs7O0lBUWpDLFlBQW9CLFdBQXVCLEVBQVUsU0FBb0I7UUFBckQsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBSmhFLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGVBQVUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNuRCxhQUFRLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFLM0QsQ0FBQzs7Ozs7O0lBRU8sUUFBUSxDQUFDLFNBQWlCO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7OztJQUVPLFdBQVcsQ0FBQyxTQUFpQjtRQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4RSxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBSUQsVUFBVTtRQUNSLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQzs7OztJQUlELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjthQUNyQzs7OztZQVZDLFVBQVU7WUFFVixTQUFTOzs7d0JBWVIsS0FBSzswQkFDTCxLQUFLO3lCQUNMLE1BQU07dUJBQ04sTUFBTTt5QkFtQk4sWUFBWSxTQUFDLFlBQVksY0FDekIsWUFBWSxTQUFDLFdBQVc7dUJBUXhCLFlBQVksU0FBQyxVQUFVLGNBQ3ZCLFlBQVksU0FBQyxTQUFTOzs7Ozs7O0lBakN2Qiw0Q0FBbUI7O0lBQ25CLDJDQUFrQzs7SUFDbEMsNkNBQTRCOztJQUM1Qiw0Q0FBNkQ7O0lBQzdELDBDQUEyRDs7Ozs7SUFFL0MsNkNBQStCOzs7OztJQUFFLDJDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXIsXG4gIEVsZW1lbnRSZWYsXG4gIE9uSW5pdCxcbiAgUmVuZGVyZXIyLFxuICBJbmplY3Rpb25Ub2tlbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBJTlRFUkZBQ0VfVE9LRU4gPSBuZXcgSW5qZWN0aW9uVG9rZW48YW55PignSW50ZXJmYWNlVG9rZW4nKTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW1RvdWNoRmVlZGJhY2tEaXJlY3RpdmVdJ1xufSlcbmV4cG9ydCBjbGFzcyBUb3VjaEZlZWRiYWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwcml2YXRlIF9jbGFzc05hbWU7XG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogQXJyYXk8c3RyaW5nPjtcbiAgQElucHV0KCkgYWN0aXZlU3R5bGUgPSB0cnVlO1xuICBAT3V0cHV0KCkgY2xpY2tTdGFydDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBjbGlja0VuZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHtcblxuICB9XG5cbiAgcHJpdmF0ZSBhZGRDbGFzcyhjbGFzc05hbWU6IHN0cmluZykge1xuICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLl9jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3RvdWNoc3RhcnQnKVxuICBASG9zdExpc3RlbmVyKCdtb3VzZWRvd24nKVxuICB0b3VjaFN0YXJ0KCkge1xuICAgIGlmICh0aGlzLmFjdGl2ZVN0eWxlKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKHRoaXMuX2NsYXNzTmFtZSk7XG4gICAgICB0aGlzLmNsaWNrU3RhcnQuZW1pdCgpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3RvdWNoZW5kJylcbiAgQEhvc3RMaXN0ZW5lcignbW91c2V1cCcpXG4gIHRvdWNoRW5kKCkge1xuICAgIGlmICh0aGlzLmFjdGl2ZVN0eWxlKSB7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKHRoaXMuX2NsYXNzTmFtZSk7XG4gICAgICB0aGlzLmNsaWNrRW5kLmVtaXQoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
export class PopupService {
    /**
     * @param {?} _overlay
     */
    constructor(_overlay) {
        this._overlay = _overlay;
        PopupService.overlay = this._overlay;
    }
    /**
     * @param {?} componentName
     * @param {?} component
     * @param {?=} childInjector
     * @param {?=} hasBackdrop
     * @param {?=} positionStrategy
     * @return {?}
     */
    static showPopup(componentName, component, childInjector, hasBackdrop, positionStrategy = PopupService.overlay.position().global().centerVertically().centerHorizontally()) {
        /** @type {?} */
        let overlayConfig = new OverlayConfig();
        overlayConfig.hasBackdrop = hasBackdrop;
        overlayConfig.positionStrategy = positionStrategy;
        PopupService.overlayRef = PopupService.overlay.create(overlayConfig);
        PopupService.overlayRef.backdropClick().subscribe((/**
         * @return {?}
         */
        () => {
            PopupService.hidePopup();
        }));
        PopupService.currentServiceName = componentName;
        /** @type {?} */
        const comRef = PopupService.overlayRef.attach(new ComponentPortal(component, undefined, childInjector));
        PopupService.serviceArray.push({ key: componentName, value: PopupService.overlayRef });
        return comRef;
    }
    /**
     * @param {?=} componentName
     * @return {?}
     */
    static hidePopup(componentName) {
        if (PopupService.serviceArray && PopupService.currentServiceName) {
            if (componentName) {
                PopupService.serviceArray.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                (element, index) => {
                    if (element.key === componentName) {
                        PopupService.serviceArray[index].value.dispose();
                        PopupService.serviceArray.splice(index, 1);
                    }
                }));
            }
            else {
                PopupService.serviceArray.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                (element, index) => {
                    PopupService.serviceArray[index].value.dispose();
                }));
                PopupService.serviceArray = [];
            }
        }
    }
}
PopupService.overlay = null;
PopupService.overlayRef = null;
PopupService.currentServiceName = null;
PopupService.serviceArray = [];
PopupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
    { type: Injectable }
];
/** @nocollapse */
PopupService.ctorParameters = () => [
    { type: Overlay }
];
if (false) {
    /** @type {?} */
    PopupService.overlay;
    /** @type {?} */
    PopupService.overlayRef;
    /** @type {?} */
    PopupService.currentServiceName;
    /** @type {?} */
    PopupService.serviceArray;
    /** @type {?} */
    PopupService.prototype._overlay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiY29yZS9zZXJ2aWNlcy9wb3B1cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUEwQixNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBc0MsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFLdEQsTUFBTSxPQUFPLFlBQVk7Ozs7SUFNdkIsWUFDUyxRQUFpQjtRQUFqQixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBRXhCLFlBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QyxDQUFDOzs7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUNkLGFBQWEsRUFDYixTQUFTLEVBQ1QsYUFBd0IsRUFDeEIsV0FBcUIsRUFDckIsbUJBQ0EsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLGtCQUFrQixFQUFFOztZQUM1RSxhQUFhLEdBQUcsSUFBSSxhQUFhLEVBQUU7UUFDdkMsYUFBYSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDeEMsYUFBYSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBQ2xELFlBQVksQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDckUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUU7WUFDckQsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNCLENBQUMsRUFBQyxDQUFDO1FBQ0gsWUFBWSxDQUFDLGtCQUFrQixHQUFHLGFBQWEsQ0FBQzs7Y0FDMUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksZUFBZSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDdkcsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQztRQUNyRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBc0I7UUFDckMsSUFBSSxZQUFZLENBQUMsWUFBWSxJQUFJLFlBQVksQ0FBQyxrQkFBa0IsRUFBRTtZQUNoRSxJQUFJLGFBQWEsRUFBRTtnQkFDakIsWUFBWSxDQUFDLFlBQVksQ0FBQyxPQUFPOzs7OztnQkFBQyxDQUFDLE9BQVksRUFBRSxLQUFhLEVBQUUsRUFBRTtvQkFDaEUsSUFBSSxPQUFPLENBQUMsR0FBRyxLQUFLLGFBQWEsRUFBRTt3QkFDakMsWUFBWSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7d0JBQ2pELFlBQVksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDNUM7Z0JBQ0gsQ0FBQyxFQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxZQUFZLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7O2dCQUFDLENBQUMsT0FBWSxFQUFFLEtBQWEsRUFBRSxFQUFFO29CQUNoRSxZQUFZLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDbkQsQ0FBQyxFQUFDLENBQUM7Z0JBQ0gsWUFBWSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7YUFDaEM7U0FDRjtJQUNILENBQUM7O0FBL0NNLG9CQUFPLEdBQVksSUFBSSxDQUFDO0FBQ3hCLHVCQUFVLEdBQWUsSUFBSSxDQUFDO0FBQzlCLCtCQUFrQixHQUFHLElBQUksQ0FBQztBQUMxQix5QkFBWSxHQUFRLEVBQUUsQ0FBQzs7WUFSL0IsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CO1lBQ0EsVUFBVTs7OztZQUxGLE9BQU87Ozs7SUFPZCxxQkFBK0I7O0lBQy9CLHdCQUFxQzs7SUFDckMsZ0NBQWlDOztJQUNqQywwQkFBOEI7O0lBRzVCLGdDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yLCBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE92ZXJsYXksIE92ZXJsYXlDb25maWcsIE92ZXJsYXlSZWYsIEdsb2JhbFBvc2l0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDb21wb25lbnRQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvcHVwU2VydmljZSB7XG4gIHN0YXRpYyBvdmVybGF5OiBPdmVybGF5ID0gbnVsbDtcbiAgc3RhdGljIG92ZXJsYXlSZWY6IE92ZXJsYXlSZWYgPSBudWxsO1xuICBzdGF0aWMgY3VycmVudFNlcnZpY2VOYW1lID0gbnVsbDtcbiAgc3RhdGljIHNlcnZpY2VBcnJheTogYW55ID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIF9vdmVybGF5OiBPdmVybGF5LFxuICApIHtcbiAgICBQb3B1cFNlcnZpY2Uub3ZlcmxheSA9IHRoaXMuX292ZXJsYXk7XG4gIH1cblxuICBzdGF0aWMgc2hvd1BvcHVwKFxuICAgIGNvbXBvbmVudE5hbWUsXG4gICAgY29tcG9uZW50LFxuICAgIGNoaWxkSW5qZWN0b3I/OiBJbmplY3RvcixcbiAgICBoYXNCYWNrZHJvcD86IGJvb2xlYW4sXG4gICAgcG9zaXRpb25TdHJhdGVneTogR2xvYmFsUG9zaXRpb25TdHJhdGVneSA9XG4gICAgUG9wdXBTZXJ2aWNlLm92ZXJsYXkucG9zaXRpb24oKS5nbG9iYWwoKS5jZW50ZXJWZXJ0aWNhbGx5KCkuY2VudGVySG9yaXpvbnRhbGx5KCkpOiBDb21wb25lbnRSZWY8YW55PiB7XG4gICAgbGV0IG92ZXJsYXlDb25maWcgPSBuZXcgT3ZlcmxheUNvbmZpZygpO1xuICAgIG92ZXJsYXlDb25maWcuaGFzQmFja2Ryb3AgPSBoYXNCYWNrZHJvcDtcbiAgICBvdmVybGF5Q29uZmlnLnBvc2l0aW9uU3RyYXRlZ3kgPSBwb3NpdGlvblN0cmF0ZWd5O1xuICAgIFBvcHVwU2VydmljZS5vdmVybGF5UmVmID0gUG9wdXBTZXJ2aWNlLm92ZXJsYXkuY3JlYXRlKG92ZXJsYXlDb25maWcpO1xuICAgIFBvcHVwU2VydmljZS5vdmVybGF5UmVmLmJhY2tkcm9wQ2xpY2soKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgUG9wdXBTZXJ2aWNlLmhpZGVQb3B1cCgpO1xuICAgIH0pO1xuICAgIFBvcHVwU2VydmljZS5jdXJyZW50U2VydmljZU5hbWUgPSBjb21wb25lbnROYW1lO1xuICAgIGNvbnN0IGNvbVJlZiA9IFBvcHVwU2VydmljZS5vdmVybGF5UmVmLmF0dGFjaChuZXcgQ29tcG9uZW50UG9ydGFsKGNvbXBvbmVudCwgdW5kZWZpbmVkLCBjaGlsZEluamVjdG9yKSk7XG4gICAgUG9wdXBTZXJ2aWNlLnNlcnZpY2VBcnJheS5wdXNoKHtrZXk6IGNvbXBvbmVudE5hbWUsIHZhbHVlOiBQb3B1cFNlcnZpY2Uub3ZlcmxheVJlZn0pO1xuICAgIHJldHVybiBjb21SZWY7XG4gIH1cblxuICBzdGF0aWMgaGlkZVBvcHVwKGNvbXBvbmVudE5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoUG9wdXBTZXJ2aWNlLnNlcnZpY2VBcnJheSAmJiBQb3B1cFNlcnZpY2UuY3VycmVudFNlcnZpY2VOYW1lKSB7XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICBQb3B1cFNlcnZpY2Uuc2VydmljZUFycmF5LmZvckVhY2goKGVsZW1lbnQ6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50LmtleSA9PT0gY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgICAgUG9wdXBTZXJ2aWNlLnNlcnZpY2VBcnJheVtpbmRleF0udmFsdWUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgUG9wdXBTZXJ2aWNlLnNlcnZpY2VBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBQb3B1cFNlcnZpY2Uuc2VydmljZUFycmF5LmZvckVhY2goKGVsZW1lbnQ6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgIFBvcHVwU2VydmljZS5zZXJ2aWNlQXJyYXlbaW5kZXhdLnZhbHVlLmRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFBvcHVwU2VydmljZS5zZXJ2aWNlQXJyYXkgPSBbXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==
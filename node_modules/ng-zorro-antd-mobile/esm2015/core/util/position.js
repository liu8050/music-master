/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} element
 * @return {?}
 */
export function getAllStyles(element) { return window.getComputedStyle(element); }
/**
 * @param {?} element
 * @param {?} prop
 * @return {?}
 */
export function getStyle(element, prop) { return getAllStyles(element)[prop]; }
/**
 * @param {?} element
 * @return {?}
 */
export function isStaticPositioned(element) {
    return (getStyle(element, 'position') || 'static') === 'static';
}
/**
 * @param {?} element
 * @return {?}
 */
export function getOffsetParent(element) {
    /** @type {?} */
    let offsetParentEl = element.offsetParent || document.documentElement;
    while (offsetParentEl && offsetParentEl !== document.documentElement && isStaticPositioned(offsetParentEl)) {
        offsetParentEl = offsetParentEl.offsetParent;
    }
    return offsetParentEl || document.documentElement;
}
/**
 * @param {?} element
 * @param {?} round
 * @return {?}
 */
export function getOffset(element, round) {
    if (round === void 0) {
        round = true;
    }
    /** @type {?} */
    let elBcr = element.getBoundingClientRect();
    /** @type {?} */
    let viewportOffset = {
        top: window.pageYOffset - document.documentElement.clientTop,
        left: window.pageXOffset - document.documentElement.clientLeft
    };
    /** @type {?} */
    let elOffset = {
        height: elBcr.height || element.offsetHeight,
        width: elBcr.width || element.offsetWidth,
        top: elBcr.top + viewportOffset.top,
        bottom: elBcr.bottom + viewportOffset.top,
        left: elBcr.left + viewportOffset.left,
        right: elBcr.right + viewportOffset.left
    };
    if (round) {
        elOffset.height = Math.round(elOffset.height);
        elOffset.width = Math.round(elOffset.width);
        elOffset.top = Math.round(elOffset.top);
        elOffset.bottom = Math.round(elOffset.bottom);
        elOffset.left = Math.round(elOffset.left);
        elOffset.right = Math.round(elOffset.right);
    }
    return elOffset;
}
/**
 * @param {?} element
 * @param {?} round
 * @return {?}
 */
export function getPosition(element, round) {
    if (round === void 0) {
        round = true;
    }
    /** @type {?} */
    let elPosition;
    /** @type {?} */
    let parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };
    if (getStyle(element, 'position') === 'fixed') {
        elPosition = element.getBoundingClientRect();
    }
    else {
        /** @type {?} */
        let offsetParentEl = getOffsetParent(element);
        elPosition = getOffset(element, false);
        if (offsetParentEl !== document.documentElement) {
            parentOffset = getOffset(offsetParentEl, false);
        }
        parentOffset.top += offsetParentEl.clientTop;
        parentOffset.left += offsetParentEl.clientLeft;
    }
    elPosition.top -= parentOffset.top;
    elPosition.bottom -= parentOffset.top;
    elPosition.left -= parentOffset.left;
    elPosition.right -= parentOffset.left;
    if (round) {
        elPosition.top = Math.round(elPosition.top);
        elPosition.bottom = Math.round(elPosition.bottom);
        elPosition.left = Math.round(elPosition.left);
        elPosition.right = Math.round(elPosition.right);
    }
    return elPosition;
}
/**
 * @param {?} hostElement
 * @param {?} targetElement
 * @param {?} placement
 * @param {?} appendToBody
 * @return {?}
 */
export function getPositionElements(hostElement, targetElement, placement, appendToBody) {
    /** @type {?} */
    let hostElPosition = appendToBody ? getOffset(hostElement, false) : getPosition(hostElement, false);
    /** @type {?} */
    let targetElStyles = getAllStyles(targetElement);
    /** @type {?} */
    let targetElBCR = targetElement.getBoundingClientRect();
    /** @type {?} */
    let placementPrimary = placement.split('-')[0] || 'top';
    /** @type {?} */
    let placementSecondary = placement.split('-')[1] || 'center';
    /** @type {?} */
    let targetElPosition = {
        'height': targetElBCR.height || targetElement.offsetHeight,
        'width': targetElBCR.width || targetElement.offsetWidth,
        'top': 0,
        'bottom': targetElBCR.height || targetElement.offsetHeight,
        'left': 0,
        'right': targetElBCR.width || targetElement.offsetWidth
    };
    switch (placementPrimary) {
        case 'top':
            targetElPosition.top =
                hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));
            break;
        case 'bottom':
            targetElPosition.top = hostElPosition.top + hostElPosition.height;
            break;
        case 'left':
            targetElPosition.left =
                hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));
            break;
        case 'right':
            targetElPosition.left = hostElPosition.left + hostElPosition.width;
            break;
    }
    switch (placementSecondary) {
        case 'top':
            targetElPosition.top = hostElPosition.top;
            break;
        case 'bottom':
            targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;
            break;
        case 'left':
            targetElPosition.left = hostElPosition.left;
            break;
        case 'right':
            targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;
            break;
        case 'center':
            if (placementPrimary === 'top' || placementPrimary === 'bottom') {
                targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;
            }
            else {
                targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;
            }
            break;
    }
    targetElPosition.top = Math.round(targetElPosition.top);
    targetElPosition.bottom = Math.round(targetElPosition.bottom);
    targetElPosition.left = Math.round(targetElPosition.left);
    targetElPosition.right = Math.round(targetElPosition.right);
    return targetElPosition;
}
//# sourceMappingURL=data:application/json;base64,
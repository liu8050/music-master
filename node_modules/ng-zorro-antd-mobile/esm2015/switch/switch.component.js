/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, Output, EventEmitter, forwardRef, HostBinding } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class SwitchComponent {
    constructor() {
        this.prefixCls = 'am-switch';
        this.wrapCls = 'am-switch';
        this.checkboxCls = {
            'checkbox-disabled': false,
            'checkbox-active': false,
            'checkbox-inactive': true
        };
        this.colorStyle = {};
        this.switchChecked = false;
        this._color = '';
        this._disabled = false;
        this.onChanged = Function.prototype;
        this.onTouched = Function.prototype;
        this.onChange = new EventEmitter();
        this.onClick = new EventEmitter();
        this.dispaly = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set color(value) {
        this._color = value;
        this.colorStyle = { background: this._color };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set platform(value) {
        this.wrapCls = value === 'android' ? `${this.prefixCls}-android` : this.prefixCls;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set checked(value) {
        this.switchChecked = value;
        this.checkboxCls = {
            'checkbox-disabled': this._disabled,
            'checkbox-active': this.switchChecked,
            'checkbox-inactive': !this.switchChecked
        };
        this.colorStyle = { background: value ? this._color : '' };
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = value;
        this.checkboxCls = {
            'checkbox-disabled': value,
            'checkbox-active': this.switchChecked,
            'checkbox-inactive': !this.switchChecked
        };
    }
    /**
     * @param {?} checkedValue
     * @return {?}
     */
    changeSwitch(checkedValue) {
        this.onChanged(checkedValue);
        this.switchChecked = checkedValue;
        this.checkboxCls = {
            'checkbox-disabled': this._disabled,
            'checkbox-active': this.switchChecked,
            'checkbox-inactive': !this.switchChecked
        };
        this.colorStyle = { background: checkedValue ? this._color : '' };
        this.onChange.emit(checkedValue);
    }
    /**
     * @return {?}
     */
    click() {
        this.onClick.emit(this.switchChecked);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.switchChecked = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChanged = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
SwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'Switch, nzm-switch',
                template: "<label class=\"{{prefixCls}}\" [ngClass]=\"wrapCls\">\n  <input #switchValue\n         type=\"checkbox\"\n         name=\"name\"\n         class=\"{{prefixCls}}-checkbox\"\n         [checked]=\"switchChecked\"\n         [value]=\"switchChecked\"\n         [disabled]=\"disabled\"\n         (change)=\"changeSwitch(switchValue.checked)\"\n  />\n  <div class=\"checkbox\"\n       [ngClass]=\"checkboxCls\"\n       [ngStyle]=\"colorStyle\"\n       (click)=\"click()\"\n  ></div>\n</label>",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SwitchComponent)),
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
SwitchComponent.ctorParameters = () => [];
SwitchComponent.propDecorators = {
    color: [{ type: Input }],
    name: [{ type: Input }],
    platform: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    onChange: [{ type: Output }],
    onClick: [{ type: Output }],
    dispaly: [{ type: HostBinding, args: ['style.display',] }]
};
if (false) {
    /** @type {?} */
    SwitchComponent.prototype.prefixCls;
    /** @type {?} */
    SwitchComponent.prototype.wrapCls;
    /** @type {?} */
    SwitchComponent.prototype.checkboxCls;
    /** @type {?} */
    SwitchComponent.prototype.colorStyle;
    /** @type {?} */
    SwitchComponent.prototype.switchChecked;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype.onChanged;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype.onTouched;
    /** @type {?} */
    SwitchComponent.prototype.name;
    /** @type {?} */
    SwitchComponent.prototype.onChange;
    /** @type {?} */
    SwitchComponent.prototype.onClick;
    /** @type {?} */
    SwitchComponent.prototype.dispaly;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsic3dpdGNoL3N3aXRjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBY3pFLE1BQU0sT0FBTyxlQUFlO0lBMkQxQjtRQTFEQSxjQUFTLEdBQUcsV0FBVyxDQUFDO1FBQ3hCLFlBQU8sR0FBRyxXQUFXLENBQUM7UUFDdEIsZ0JBQVcsR0FBRztZQUNaLG1CQUFtQixFQUFFLEtBQUs7WUFDMUIsaUJBQWlCLEVBQUUsS0FBSztZQUN4QixtQkFBbUIsRUFBRSxJQUFJO1NBQzFCLENBQUM7UUFDRixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLGtCQUFhLEdBQVksS0FBSyxDQUFDO1FBRXZCLFdBQU0sR0FBVyxFQUFFLENBQUM7UUFDcEIsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUMzQixjQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUMvQixjQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQXNDdkMsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFdkMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFHdEMsWUFBTyxHQUFZLElBQUksQ0FBQztJQUVULENBQUM7Ozs7O0lBM0NoQixJQUNJLEtBQUssQ0FBQyxLQUFLO1FBQ2IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFLRCxJQUNJLFFBQVEsQ0FBQyxLQUFhO1FBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDcEYsQ0FBQzs7Ozs7SUFDRCxJQUNJLE9BQU8sQ0FBQyxLQUFjO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDbkMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDckMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYTtTQUN6QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQzdELENBQUM7Ozs7SUFDRCxJQUNJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFDRCxJQUFJLFFBQVEsQ0FBQyxLQUFjO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsbUJBQW1CLEVBQUUsS0FBSztZQUMxQixpQkFBaUIsRUFBRSxJQUFJLENBQUMsYUFBYTtZQUNyQyxtQkFBbUIsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhO1NBQ3pDLENBQUM7SUFDSixDQUFDOzs7OztJQVdELFlBQVksQ0FBQyxZQUFZO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRztZQUNqQixtQkFBbUIsRUFBRSxJQUFJLENBQUMsU0FBUztZQUNuQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsYUFBYTtZQUNyQyxtQkFBbUIsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhO1NBQ3pDLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDbEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsS0FBYztRQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLEVBQXNCO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsRUFBWTtRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7WUFuR0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLGlmQUFzQztnQkFDdEMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBQzt3QkFDOUMsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7YUFDRjs7Ozs7b0JBaUJFLEtBQUs7bUJBTUwsS0FBSzt1QkFHTCxLQUFLO3NCQUlMLEtBQUs7dUJBVUwsS0FBSzt1QkFZTCxNQUFNO3NCQUVOLE1BQU07c0JBR04sV0FBVyxTQUFDLGVBQWU7Ozs7SUF2RDVCLG9DQUF3Qjs7SUFDeEIsa0NBQXNCOztJQUN0QixzQ0FJRTs7SUFDRixxQ0FBZ0I7O0lBQ2hCLHdDQUErQjs7Ozs7SUFFL0IsaUNBQTRCOzs7OztJQUM1QixvQ0FBbUM7Ozs7O0lBQ25DLG9DQUF1Qzs7Ozs7SUFDdkMsb0NBQXVDOztJQVF2QywrQkFDYTs7SUE0QmIsbUNBQ3VDOztJQUN2QyxrQ0FDc0M7O0lBRXRDLGtDQUN3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgZm9yd2FyZFJlZixcbiAgSG9zdEJpbmRpbmdcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnU3dpdGNoLCBuem0tc3dpdGNoJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3N3aXRjaC5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU3dpdGNoQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFN3aXRjaENvbXBvbmVudCB7XG4gIHByZWZpeENscyA9ICdhbS1zd2l0Y2gnO1xuICB3cmFwQ2xzID0gJ2FtLXN3aXRjaCc7XG4gIGNoZWNrYm94Q2xzID0ge1xuICAgICdjaGVja2JveC1kaXNhYmxlZCc6IGZhbHNlLFxuICAgICdjaGVja2JveC1hY3RpdmUnOiBmYWxzZSxcbiAgICAnY2hlY2tib3gtaW5hY3RpdmUnOiB0cnVlXG4gIH07XG4gIGNvbG9yU3R5bGUgPSB7fTtcbiAgc3dpdGNoQ2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgX2NvbG9yOiBzdHJpbmcgPSAnJztcbiAgcHJpdmF0ZSBfZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBvbkNoYW5nZWQgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gIHByaXZhdGUgb25Ub3VjaGVkID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBjb2xvcih2YWx1ZSkge1xuICAgIHRoaXMuX2NvbG9yID0gdmFsdWU7XG4gICAgdGhpcy5jb2xvclN0eWxlID0geyBiYWNrZ3JvdW5kOiB0aGlzLl9jb2xvciB9O1xuICB9XG5cbiAgQElucHV0KClcbiAgbmFtZTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBwbGF0Zm9ybSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy53cmFwQ2xzID0gdmFsdWUgPT09ICdhbmRyb2lkJyA/IGAke3RoaXMucHJlZml4Q2xzfS1hbmRyb2lkYCA6IHRoaXMucHJlZml4Q2xzO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBjaGVja2VkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5zd2l0Y2hDaGVja2VkID0gdmFsdWU7XG4gICAgdGhpcy5jaGVja2JveENscyA9IHtcbiAgICAgICdjaGVja2JveC1kaXNhYmxlZCc6IHRoaXMuX2Rpc2FibGVkLFxuICAgICAgJ2NoZWNrYm94LWFjdGl2ZSc6IHRoaXMuc3dpdGNoQ2hlY2tlZCxcbiAgICAgICdjaGVja2JveC1pbmFjdGl2ZSc6ICF0aGlzLnN3aXRjaENoZWNrZWRcbiAgICB9O1xuICAgIHRoaXMuY29sb3JTdHlsZSA9IHsgYmFja2dyb3VuZDogdmFsdWUgPyB0aGlzLl9jb2xvciA6ICcnIH07XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IHZhbHVlO1xuICAgIHRoaXMuY2hlY2tib3hDbHMgPSB7XG4gICAgICAnY2hlY2tib3gtZGlzYWJsZWQnOiB2YWx1ZSxcbiAgICAgICdjaGVja2JveC1hY3RpdmUnOiB0aGlzLnN3aXRjaENoZWNrZWQsXG4gICAgICAnY2hlY2tib3gtaW5hY3RpdmUnOiAhdGhpcy5zd2l0Y2hDaGVja2VkXG4gICAgfTtcbiAgfVxuICBAT3V0cHV0KClcbiAgb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIEBPdXRwdXQoKVxuICBvbkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIEBIb3N0QmluZGluZygnc3R5bGUuZGlzcGxheScpXG4gIGRpc3BhbHk6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBjaGFuZ2VTd2l0Y2goY2hlY2tlZFZhbHVlKSB7XG4gICAgdGhpcy5vbkNoYW5nZWQoY2hlY2tlZFZhbHVlKTtcbiAgICB0aGlzLnN3aXRjaENoZWNrZWQgPSBjaGVja2VkVmFsdWU7XG4gICAgdGhpcy5jaGVja2JveENscyA9IHtcbiAgICAgICdjaGVja2JveC1kaXNhYmxlZCc6IHRoaXMuX2Rpc2FibGVkLFxuICAgICAgJ2NoZWNrYm94LWFjdGl2ZSc6IHRoaXMuc3dpdGNoQ2hlY2tlZCxcbiAgICAgICdjaGVja2JveC1pbmFjdGl2ZSc6ICF0aGlzLnN3aXRjaENoZWNrZWRcbiAgICB9O1xuICAgIHRoaXMuY29sb3JTdHlsZSA9IHsgYmFja2dyb3VuZDogY2hlY2tlZFZhbHVlID8gdGhpcy5fY29sb3IgOiAnJyB9O1xuICAgIHRoaXMub25DaGFuZ2UuZW1pdChjaGVja2VkVmFsdWUpO1xuICB9XG5cbiAgY2xpY2soKSB7XG4gICAgdGhpcy5vbkNsaWNrLmVtaXQodGhpcy5zd2l0Y2hDaGVja2VkKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnN3aXRjaENoZWNrZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBib29sZWFuKSA9PiB7fSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2VkID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbn1cbiJdfQ==
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
/**
 * @record
 */
export function DatePickerOptionsInterface() { }
if (false) {
    /** @type {?} */
    DatePickerOptionsInterface.prototype.mode;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.value;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.minDate;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.maxDate;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.use12Hours;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.minuteStep;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.locale;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.disabled;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.mask;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.title;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.okText;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.dismissText;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.appendToBody;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.showErrorToast;
    /** @type {?} */
    DatePickerOptionsInterface.prototype.showErrorToastInterval;
}
export class DatePickerOptions {
    constructor() {
        this.mode = 'date';
        this.value = new Date();
        this.minDate = new Date(2000, 6, 1, 0, 0, 0);
        this.maxDate = new Date(2030, 1, 1, 23, 59, 59);
        this.use12Hours = false;
        this.minuteStep = 1;
        this.data = [];
        this.mask = true;
        this.title = '';
        this.okText = '确定';
        this.dismissText = '取消';
        this.disabled = false;
        this.appendToBody = false;
        this.showErrorToast = true;
        this.showErrorToastInterval = 2000;
        this.onOk = new EventEmitter();
        this.onDismiss = new EventEmitter();
        this.onValueChange = new EventEmitter();
        this.onChange = new EventEmitter();
    }
}
if (false) {
    /** @type {?} */
    DatePickerOptions.prototype.mode;
    /** @type {?} */
    DatePickerOptions.prototype.value;
    /** @type {?} */
    DatePickerOptions.prototype.minDate;
    /** @type {?} */
    DatePickerOptions.prototype.maxDate;
    /** @type {?} */
    DatePickerOptions.prototype.use12Hours;
    /** @type {?} */
    DatePickerOptions.prototype.minuteStep;
    /** @type {?} */
    DatePickerOptions.prototype.data;
    /** @type {?} */
    DatePickerOptions.prototype.mask;
    /** @type {?} */
    DatePickerOptions.prototype.title;
    /** @type {?} */
    DatePickerOptions.prototype.okText;
    /** @type {?} */
    DatePickerOptions.prototype.dismissText;
    /** @type {?} */
    DatePickerOptions.prototype.disabled;
    /** @type {?} */
    DatePickerOptions.prototype.locale;
    /** @type {?} */
    DatePickerOptions.prototype.appendToBody;
    /** @type {?} */
    DatePickerOptions.prototype.showErrorToast;
    /** @type {?} */
    DatePickerOptions.prototype.showErrorToastInterval;
    /** @type {?} */
    DatePickerOptions.prototype.onOk;
    /** @type {?} */
    DatePickerOptions.prototype.onDismiss;
    /** @type {?} */
    DatePickerOptions.prototype.onValueChange;
    /** @type {?} */
    DatePickerOptions.prototype.onChange;
    /** @type {?} */
    DatePickerOptions.prototype.hidePicker;
    /** @type {?} */
    DatePickerOptions.prototype.updateNgModel;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXItb3B0aW9ucy5wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXItb3B0aW9ucy5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUU3QyxnREFnQkM7OztJQWZDLDBDQUFhOztJQUNiLDJDQUFZOztJQUNaLDZDQUFjOztJQUNkLDZDQUFjOztJQUNkLGdEQUFvQjs7SUFDcEIsZ0RBQW1COztJQUNuQiw0Q0FBWTs7SUFDWiw4Q0FBa0I7O0lBQ2xCLDBDQUFjOztJQUNkLDJDQUFjOztJQUNkLDRDQUFlOztJQUNmLGlEQUFvQjs7SUFDcEIsa0RBQXNCOztJQUN0QixvREFBd0I7O0lBQ3hCLDREQUErQjs7QUFHakMsTUFBTSxPQUFPLGlCQUFpQjtJQUE5QjtRQUNFLFNBQUksR0FBRyxNQUFNLENBQUM7UUFDZCxVQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNuQixZQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QyxZQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMzQyxlQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ25CLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDZixTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsU0FBSSxHQUFZLElBQUksQ0FBQztRQUNyQixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsV0FBTSxHQUFHLElBQUksQ0FBQztRQUNkLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ25CLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFDckIsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFDdEIsMkJBQXNCLEdBQUcsSUFBSSxDQUFDO1FBQzlCLFNBQUksR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM3QyxjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEQsa0JBQWEsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN0RCxhQUFRLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFHbkQsQ0FBQztDQUFBOzs7SUF0QkMsaUNBQWM7O0lBQ2Qsa0NBQW1COztJQUNuQixvQ0FBd0M7O0lBQ3hDLG9DQUEyQzs7SUFDM0MsdUNBQW1COztJQUNuQix1Q0FBZTs7SUFDZixpQ0FBVTs7SUFDVixpQ0FBcUI7O0lBQ3JCLGtDQUFXOztJQUNYLG1DQUFjOztJQUNkLHdDQUFtQjs7SUFDbkIscUNBQWlCOztJQUNqQixtQ0FBTzs7SUFDUCx5Q0FBcUI7O0lBQ3JCLDJDQUFzQjs7SUFDdEIsbURBQThCOztJQUM5QixpQ0FBNkM7O0lBQzdDLHNDQUFrRDs7SUFDbEQsMENBQXNEOztJQUN0RCxxQ0FBaUQ7O0lBQ2pELHVDQUF1Qjs7SUFDdkIsMENBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB6aF9DTiB9IGZyb20gJy4uL2xvY2FsZS1wcm92aWRlci9sb2NhbGUnO1xuZXhwb3J0IGludGVyZmFjZSBEYXRlUGlja2VyT3B0aW9uc0ludGVyZmFjZSB7XG4gIG1vZGU6IHN0cmluZztcbiAgdmFsdWU6IERhdGU7XG4gIG1pbkRhdGU6IERhdGU7XG4gIG1heERhdGU6IERhdGU7XG4gIHVzZTEySG91cnM6IGJvb2xlYW47XG4gIG1pbnV0ZVN0ZXA6IE51bWJlcjtcbiAgbG9jYWxlOiBhbnk7XG4gIGRpc2FibGVkOiBib29sZWFuO1xuICBtYXNrOiBib29sZWFuO1xuICB0aXRsZTogc3RyaW5nO1xuICBva1RleHQ6IHN0cmluZztcbiAgZGlzbWlzc1RleHQ6IHN0cmluZztcbiAgYXBwZW5kVG9Cb2R5OiBib29sZWFuO1xuICBzaG93RXJyb3JUb2FzdDogYm9vbGVhbjtcbiAgc2hvd0Vycm9yVG9hc3RJbnRlcnZhbDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0ZVBpY2tlck9wdGlvbnMgaW1wbGVtZW50cyBEYXRlUGlja2VyT3B0aW9uc0ludGVyZmFjZSB7XG4gIG1vZGUgPSAnZGF0ZSc7XG4gIHZhbHVlID0gbmV3IERhdGUoKTtcbiAgbWluRGF0ZSA9IG5ldyBEYXRlKDIwMDAsIDYsIDEsIDAsIDAsIDApO1xuICBtYXhEYXRlID0gbmV3IERhdGUoMjAzMCwgMSwgMSwgMjMsIDU5LCA1OSk7XG4gIHVzZTEySG91cnMgPSBmYWxzZTtcbiAgbWludXRlU3RlcCA9IDE7XG4gIGRhdGEgPSBbXTtcbiAgbWFzazogYm9vbGVhbiA9IHRydWU7XG4gIHRpdGxlID0gJyc7XG4gIG9rVGV4dCA9ICfnoa7lrponO1xuICBkaXNtaXNzVGV4dCA9ICflj5bmtognO1xuICBkaXNhYmxlZCA9IGZhbHNlO1xuICBsb2NhbGU7XG4gIGFwcGVuZFRvQm9keSA9IGZhbHNlO1xuICBzaG93RXJyb3JUb2FzdCA9IHRydWU7XG4gIHNob3dFcnJvclRvYXN0SW50ZXJ2YWwgPSAyMDAwO1xuICBvbk9rOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgb25EaXNtaXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgb25WYWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgaGlkZVBpY2tlcjogKCkgPT4gdm9pZDtcbiAgdXBkYXRlTmdNb2RlbD86ICh2YWx1ZTogRGF0ZSkgPT4gdm9pZDtcbn1cbiJdfQ==
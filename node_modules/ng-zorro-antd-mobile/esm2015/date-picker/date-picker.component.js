/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, ViewEncapsulation, HostListener, ViewChild, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
import { DatePickerOptions } from './date-picker-options.provider';
import { ToastService } from '../toast/toast.service';
import * as velocity from '../core/util/velocity';
export class DatePickerComponent {
    /**
     * @param {?} elementRef
     * @param {?} options
     * @param {?} toast
     * @param {?} localeProviderService
     */
    constructor(elementRef, options, toast, localeProviderService) {
        this.elementRef = elementRef;
        this.options = options;
        this.toast = toast;
        this.localeProviderService = localeProviderService;
        this.transitionName = 'am-slide-up-enter am-slide-up-enter-active';
        this.maskTransitionName = 'am-fade-enter am-fade-enter-active';
        this.modeSwitch = [1, 1, 1, 1, 1, 1];
        this.localMinDate = [];
        this.localMaxDate = [];
        this.currentTime = [];
        this.indexArray = [];
        this.min_date = [];
        this.max_date = [];
        this.current_time = [
            new Date().getFullYear(),
            new Date().getMonth() + 1,
            new Date().getDate(),
            new Date().getHours(),
            new Date().getMinutes()
        ];
        this.clos = 0;
        this.resultArr = [];
        this.data = [];
        this.dataWithStr = [];
        this.startY = 0;
        this.differY = 0;
        this.currentY = 0;
        this.len = 0;
        this.dom = null;
        this.index = 0;
        this.maxY = 0;
        this.lineHeight = 34;
        this.selectedTarget = [];
        this.isMouseDown = false;
        this.localeNew = {};
        this.unsubscribe$ = new Subject();
        this.Velocity = velocity.getVelocity();
        this.errorMessage = '';
        this.curTLessThanMin = false;
        this.curTMoreThanMax = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    panstart(event) {
        if (!event.target.classList.contains('am-picker-col-mask')) {
            return;
        }
        this.isMouseDown = true;
        event.preventDefault();
        this.dom = event.target.parentElement.children[2];
        this.len = this.dom.children.length;
        this.maxY = -(this.len - 1);
        if (this.dom.style.transform === 'translateY(0px)') {
            this.currentY = 0;
            this.maxY = -(this.len - 1);
        }
        else if (this.selectedTarget.length > 0) {
            this.selectedTarget.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item.targetId === event.target.id) {
                    this.currentY = item.currentY;
                }
            }));
        }
        /** @type {?} */
        const ev = this.getEventTarget(event);
        this.startY = ev.clientY;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    panmove(event) {
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        const ev = this.getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        this.Velocity.record(this.differY);
        this.dom.style.transition = 'transform 0s';
        this.dom.style.transform = `translateY(${this.currentY * this.lineHeight + this.differY}px)`;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    panend(event) {
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown) {
            return;
        }
        this.isMouseDown = false;
        event.preventDefault();
        /** @type {?} */
        const ev = this.getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        /** @type {?} */
        let time = 0.3;
        /** @type {?} */
        const velocityTemp = this.Velocity.getVelocity(this.differY) * 4;
        if (velocityTemp) {
            this.differY = velocityTemp * 40 + this.differY;
            time = Math.abs(velocityTemp) * 0.1;
        }
        this.dom.style.transition = 'transform ' + (time < 0.3 ? 0.3 : time) + 's';
        if (this.differY <= -this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY <= this.maxY) {
                this.currentY = this.maxY;
            }
        }
        else if (this.differY >= this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY >= 0) {
                this.currentY = 0;
            }
        }
        if (this.selectedTarget.length > 0) {
            /** @type {?} */
            let hasKey = false;
            this.selectedTarget.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item.targetId === event.target.id) {
                    hasKey = true;
                    item.targetId = event.target.id;
                    item.currentY = this.currentY;
                }
            }));
            if (!hasKey) {
                this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
            }
        }
        else {
            this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
        }
        this.dom.style.transform = `translateY(${this.currentY * this.lineHeight}px)`;
        this.index = Math.floor(Math.abs(this.currentY / 1)); // 记录当前位移在数组中的索引,必须取整，否则会出现浮点数
        this.current_time[this.indexArray[parseInt(event.target.id, 0)]] = this.resultArr[this.indexArray[parseInt(event.target.id, 0)]] = this.data[parseInt(event.target.id, 0)][this.index];
        if (this.judgeTime(this.current_time, this.max_date)) {
            this.currentTime = this.current_time = this.max_date.slice(0, this.indexArray.length);
            this.resultArr = this.current_time;
            this.options.onValueChange.emit({ date: this.handleReslut(), index: event.target.id });
            if (this.options.updateNgModel) {
                this.options.updateNgModel(this.handleReslut());
            }
            if (this.ngModelOnChange) {
                this.ngModelOnChange(this.handleReslut());
            }
            this.init();
        }
        else if (this.judgeTime(this.min_date, this.current_time)) {
            this.currentTime = this.current_time = this.min_date.slice(0, this.indexArray.length);
            this.resultArr = this.currentTime;
            this.options.onValueChange.emit({ date: this.handleReslut(), index: event.target.id });
            if (this.options.updateNgModel) {
                this.options.updateNgModel(this.handleReslut());
            }
            if (this.ngModelOnChange) {
                this.ngModelOnChange(this.handleReslut());
            }
            this.init();
        }
        else {
            this.setCurrentSelected(0, this.differY < 0, this.index);
            this.options.onValueChange.emit({ date: this.handleReslut(), index: event.target.id });
            if (this.options.updateNgModel) {
                this.options.updateNgModel(this.handleReslut());
            }
            if (this.ngModelOnChange) {
                this.ngModelOnChange(this.handleReslut());
            }
        }
    }
    /**
     * @return {?}
     */
    init() {
        if (!this.checkTime() && this.options.showErrorToast) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                ToastService.fail(this.errorMessage, this.options.showErrorToastInterval);
            }), 0);
        }
        this.initResult();
        this.initReady();
        this.getInitValueIndex();
    }
    /**
     * @return {?}
     */
    reloadPicker() {
        if (!this.picker || this.picker === undefined) {
            return;
        }
        this.currentPicker = this.picker.element.nativeElement;
        if (this.currentPicker && this.currentPicker.children.length > 0) {
            /** @type {?} */
            const self = this;
            setTimeout((/**
             * @return {?}
             */
            () => {
                self.selectedTarget.forEach((/**
                 * @param {?} item
                 * @param {?} i
                 * @return {?}
                 */
                (item, i) => {
                    self.currentPicker.children[i].children[2].style.transition = 'transform .3s';
                    /** @type {?} */
                    const index = parseInt(item.currentY, 0);
                    self.currentPicker.children[i].children[2].style.transform = `translateY(${index * self.lineHeight}px)`;
                }));
            }), 0);
        }
    }
    /**
     * @return {?}
     */
    localeProvider() {
        /** @type {?} */
        const self = this;
        if (self.options.locale || self.options.locale !== undefined) {
            self.localeProviderService.setLocale(self.options.locale);
        }
        self.localeProviderService.localeChange.pipe(takeUntil(self.unsubscribe$)).subscribe((/**
         * @param {?} _
         * @return {?}
         */
        _ => {
            self.options.locale = self.localeProviderService.getLocale();
            self.localeNew = self.localeProviderService.getLocaleSubObj('DatePicker');
            self.options.okText = self.localeNew.okText;
            self.options.dismissText = self.localeNew.dismissText;
            self.init();
        }));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    transformDateFormat(date) {
        if (!date) {
            return '';
        }
        else {
            return 'yyyy-mm-dd-HH-MM'
                .replace('yyyy', date.getFullYear() + '')
                .replace('mm', date.getMonth() + 1 + '')
                .replace('dd', date.getDate() + '')
                .replace('HH', date.getHours() + '')
                .replace('MM', date.getMinutes() + '');
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    preZero(val) {
        return val < 10 ? '0' + val : val + '';
    }
    /**
     * @return {?}
     */
    getInitValueIndex() {
        this.selectedTarget = [];
        this.indexArray.map((/**
         * @param {?} index
         * @param {?} i
         * @return {?}
         */
        (index, i) => {
            this.data.forEach((/**
             * @param {?} item
             * @param {?} j
             * @return {?}
             */
            (item, j) => {
                item.forEach((/**
                 * @param {?} item1
                 * @param {?} k
                 * @return {?}
                 */
                (item1, k) => {
                    if (this.currentTime[index] === item1 && i === j) {
                        this.selectedTarget.push({ targetId: `${i}`, currentY: -k });
                    }
                }));
            }));
        }));
        this.reloadPicker();
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    checkMode(mode) {
        this.modeSwitch = [1, 1, 1, 1, 1, 1];
        switch (mode) {
            case 'date':
                this.modeSwitch = [1, 1, 1, 0, 0, 0];
                break;
            case 'time':
                if (this.options.use12Hours) {
                    this.modeSwitch = [0, 0, 0, 1, 1, 1];
                }
                else {
                    this.modeSwitch = [0, 0, 0, 1, 1, 0];
                }
                break;
            case 'datetime':
                if (this.options.use12Hours) {
                    this.modeSwitch = [1, 1, 1, 1, 1, 1];
                }
                else {
                    this.modeSwitch = [1, 1, 1, 1, 1, 0];
                }
                break;
            case 'year':
                this.modeSwitch = [1, 0, 0, 0, 0];
                break;
            case 'month':
                this.modeSwitch = [1, 1, 0, 0, 0];
                break;
            default:
                break;
        }
        /** @type {?} */
        const tempIndexArray = [];
        for (let i = 0; i < this.modeSwitch.length; i++) {
            if (this.modeSwitch[i] > 0) {
                tempIndexArray.push(i);
            }
        }
        this.clos = tempIndexArray[tempIndexArray.length - 1] - tempIndexArray[0] + 1;
        this.indexArray = tempIndexArray;
    }
    /**
     * @return {?}
     */
    initResult() {
        this.resultArr = [];
        for (let i = 0; i < this.clos; i++) {
            /** @type {?} */
            const res = this.currentTime[i];
            if (this.options.mode === 'time') {
                this.resultArr = this.currentTime;
            }
            else {
                this.resultArr.push(res);
            }
        }
    }
    /**
     * @return {?}
     */
    checkTime() {
        /** @type {?} */
        const min_Date = this.transformDateFormat(this.options.minDate).split('-');
        if (min_Date.length > 0) {
            this.min_date = min_Date.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return parseInt(item, 0);
            }));
        }
        /** @type {?} */
        const max_Date = this.transformDateFormat(this.options.maxDate).split('-');
        if (max_Date.length > 0) {
            this.max_date = max_Date.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return parseInt(item, 0);
            }));
        }
        /** @type {?} */
        const min_date = this.min_date;
        /** @type {?} */
        const max_date = this.max_date;
        /** @type {?} */
        const current_time = this.currentTime;
        this.localMinDate = [];
        if (this.localMinDate.length === 0) {
            for (let index = 0; index < this.indexArray.length; index++) {
                this.localMinDate.push(min_date[this.indexArray[index]]);
            }
        }
        this.localMaxDate = [];
        if (this.localMaxDate.length === 0) {
            for (let index = 0; index < this.indexArray.length; index++) {
                this.localMaxDate.push(max_date[this.indexArray[index]]);
            }
        }
        if (this.indexArray.length === this.localMinDate.length &&
            this.localMinDate.length === this.localMaxDate.length) {
            /** @type {?} */
            const minT = new Date(min_date[0], min_date[1], min_date[2], min_date[3], min_date[4]).getTime();
            /** @type {?} */
            const maxT = new Date(max_date[0], max_date[1], max_date[2], max_date[3], max_date[4]).getTime();
            /** @type {?} */
            const curT = new Date(current_time[0], current_time[1], current_time[2], current_time[3] || 0, current_time[4] || 0).getTime();
            this.curTLessThanMin = false;
            this.curTMoreThanMax = false;
            if (curT < minT) {
                this.curTLessThanMin = true;
                this.currentTime = this.min_date;
                this.errorMessage = this.localeNew.curTLessthanMin;
            }
            if (curT > maxT) {
                this.curTMoreThanMax = true;
                this.currentTime = this.max_date;
                this.errorMessage = this.localeNew.curTMorethanMax;
            }
            /** @type {?} */
            let _indexArrayIndex = 0;
            for (let i = 0; i < this.modeSwitch.length; i++) {
                if (this.modeSwitch[i] === 0) {
                    switch (i) {
                        case 0:
                            min_date[i] = new Date().getFullYear();
                            max_date[i] = new Date().getFullYear();
                            break;
                        case 1:
                            min_date[i] = new Date().getMonth() + 1;
                            max_date[i] = new Date().getMonth() + 1;
                            break;
                        case 2:
                            min_date[i] = new Date().getDate();
                            max_date[i] = new Date().getDate();
                            break;
                        case 3:
                            min_date[i] = new Date().getHours();
                            max_date[i] = new Date().getHours();
                            break;
                        case 4:
                            min_date[i] = new Date().getMinutes();
                            max_date[i] = new Date().getMinutes();
                            break;
                        case 5:
                            min_date[i] = 0;
                            max_date[i] = 1;
                            break;
                    }
                }
                else {
                    switch (i) {
                        case 0:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                (this.localMinDate[_indexArrayIndex] >= 1900)
                                    ? this.localMinDate[_indexArrayIndex]
                                    : new Date().getFullYear();
                            this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                this.localMaxDate[_indexArrayIndex] >= 1900
                                    ? this.localMaxDate[_indexArrayIndex]
                                    : new Date().getFullYear() + 1;
                            break;
                        case 1:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                this.localMinDate[_indexArrayIndex] > 0 && this.localMinDate[_indexArrayIndex] <= 12
                                    ? this.localMinDate[_indexArrayIndex]
                                    : 1;
                            this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                this.localMaxDate[_indexArrayIndex] > 0 && this.localMaxDate[_indexArrayIndex] <= 12
                                    ? this.localMaxDate[_indexArrayIndex]
                                    : 12;
                            break;
                        case 2:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                this.localMinDate[_indexArrayIndex] > 0 &&
                                    this.localMinDate[_indexArrayIndex] <= new Date(min_date[0], min_date[1], 0).getDate()
                                    ? this.localMinDate[_indexArrayIndex]
                                    : 1;
                            this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                this.localMaxDate[_indexArrayIndex] > 0 &&
                                    this.localMaxDate[_indexArrayIndex] <= new Date(max_date[0], max_date[1], 0).getDate()
                                    ? this.localMaxDate[_indexArrayIndex]
                                    : new Date(max_date[0], max_date[1], 0).getDate();
                            break;
                        case 3:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                this.localMinDate[_indexArrayIndex] >= 0 && this.localMinDate[_indexArrayIndex] <= 23
                                    ? this.localMinDate[_indexArrayIndex]
                                    : 0;
                            if (this.options.use12Hours) {
                                this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                    this.localMaxDate[_indexArrayIndex] >= 0 && this.localMaxDate[_indexArrayIndex] <= 11
                                        ? this.localMaxDate[_indexArrayIndex]
                                        : 11;
                            }
                            else {
                                this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                    this.localMaxDate[_indexArrayIndex] >= 0 && this.localMaxDate[_indexArrayIndex] <= 23
                                        ? this.localMaxDate[_indexArrayIndex]
                                        : 23;
                            }
                            break;
                        case 4:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                this.localMinDate[_indexArrayIndex] >= 0 && this.localMinDate[_indexArrayIndex] <= 59
                                    ? this.localMinDate[_indexArrayIndex]
                                    : 0;
                            this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                this.localMaxDate[_indexArrayIndex] >= 0 && this.localMaxDate[_indexArrayIndex] <= 59
                                    ? this.localMaxDate[_indexArrayIndex]
                                    : 59;
                            break;
                    }
                }
                _indexArrayIndex++;
            }
            return minT <= curT && curT <= maxT;
        }
        else {
            this.errorMessage = this.localeNew.errorMessage;
            return false;
        }
    }
    /**
     * @param {?} arr1
     * @param {?} arr2
     * @return {?}
     */
    judgeTime(arr1, arr2) {
        /** @type {?} */
        let date1;
        /** @type {?} */
        let date2;
        date1 = arr1.slice(0, 3).join('-') + ' ' + arr1.slice(3, 5).join(':');
        date2 = arr2.slice(0, 3).join('-') + ' ' + arr2.slice(3, 5).join(':');
        return new Date(date1).getTime() >= new Date(date2).getTime();
    }
    /**
     * @param {?} arr1
     * @param {?} arr2
     * @param {?} length
     * @return {?}
     */
    judgeEqualArray(arr1, arr2, length) {
        /** @type {?} */
        let status = true;
        for (let i = 0; i < length; i++) {
            if (arr1[i] != arr2[i]) {
                status = false;
            }
        }
        return status;
    }
    /**
     * @return {?}
     */
    initReady() {
        /** @type {?} */
        let realIdx = 0;
        for (let i = 0; i < this.clos; i++) {
            realIdx = this.indexArray[i];
            /** @type {?} */
            let min = 0;
            /** @type {?} */
            let max = 0;
            /** @type {?} */
            const tempArray = [];
            switch (realIdx) {
                case 0:
                    this.initData(tempArray, this.localMinDate[i], this.localMaxDate[i], this.localeNew.year, i);
                    break;
                case 1:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 1) ? this.localMinDate[i] : 1;
                    max = this.judgeEqualArray(this.max_date, this.current_time, 1) ? this.localMaxDate[i] : 12;
                    this.initData(tempArray, min, max, this.localeNew.month, i);
                    break;
                case 2:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 2)
                        ? this.localMinDate[i]
                        : (this.curTLessThanMin ? this.localMinDate[i] : 1);
                    max = this.judgeEqualArray(this.max_date, this.current_time, 2)
                        ? this.localMaxDate[i]
                        : new Date(this.current_time[0], this.current_time[1], 0).getDate();
                    this.initData(tempArray, min, max, this.localeNew.day, i);
                    break;
                case 3:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 3)
                        ? this.localMinDate[i]
                        : (this.curTLessThanMin ? this.localMinDate[i] : 0);
                    max = this.judgeEqualArray(this.max_date, this.current_time, 3)
                        ? this.localMaxDate[i]
                        : (this.curTMoreThanMax ? this.localMaxDate[i] : 23);
                    this.initData(tempArray, min, max, this.localeNew.hour, i);
                    break;
                case 4:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 4)
                        ? this.localMinDate[i]
                        : (this.curTLessThanMin ? this.localMinDate[i] : 0);
                    max = this.judgeEqualArray(this.max_date, this.current_time, 4)
                        ? this.localMaxDate[i]
                        : (this.curTMoreThanMax ? this.localMaxDate[i] : 59);
                    this.initData(tempArray, min, max, this.localeNew.minute, i);
                    break;
                case 5:
                    min = 0;
                    max = 1;
                    this.initData(tempArray, min, max, 'use12Hours', i);
                    break;
            }
        }
    }
    /**
     * @param {?} tempArr
     * @param {?} min
     * @param {?} max
     * @param {?} str
     * @param {?} idx
     * @return {?}
     */
    initData(tempArr, min, max, str, idx) {
        /** @type {?} */
        const dataWithStr = [];
        /** @type {?} */
        const increaseValue = str === this.localeNew.minute ? this.options.minuteStep : 1;
        for (min; min < max + 1; min += increaseValue) {
            tempArr.push(min);
            dataWithStr.push(min + str);
        }
        if (this.data.length > this.indexArray.length) {
            this.data = [];
            this.dataWithStr = [];
        }
        if (this.data.length > idx && this.data[idx].toString() !== tempArr.toString()) {
            this.data[idx] = tempArr;
        }
        else if (this.data.length > idx && this.data[idx].toString() === tempArr.toString()) {
            this.data[idx] = tempArr;
        }
        else {
            this.data.push(tempArr);
        }
        if (this.options.locale === undefined || this.options.locale.locale === 'zh_CN') {
            if (this.dataWithStr.length > idx && this.dataWithStr[idx].toString() !== dataWithStr.toString()) {
                this.dataWithStr[idx] = dataWithStr;
            }
            else if (this.dataWithStr.length > idx && this.dataWithStr[idx].toString() === dataWithStr.toString()) {
                this.dataWithStr[idx] = dataWithStr;
            }
            else {
                this.dataWithStr.push(dataWithStr);
            }
        }
        else {
            this.dataWithStr = this.data;
        }
    }
    /**
     * @return {?}
     */
    ok() {
        this.options.onOk.emit(this.handleReslut());
        this.setTransitionName();
    }
    /**
     * @return {?}
     */
    handleReslut() {
        /** @type {?} */
        let result = '';
        if (this.options.mode === 'datetime' || this.options.mode === 'time') {
            /** @type {?} */
            const temp = this.resultArr;
            result = temp.slice(0, 3).join('-') + ' ' + temp.slice(3, 5).join(':');
        }
        else {
            if (this.resultArr.length < 3) {
                this.resultArr.push('1');
            }
            result = this.resultArr.map((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                return this.preZero(parseInt(v, 0));
            })).join('-');
        }
        this.resultDate = new Date(result.replace(/-/g, '/'));
        if (this.options.minDate.getTime() > this.resultDate.getTime()) {
            if (this.resultArr.length > 0) {
                for (let index = 0; index < this.resultArr.length; index++) {
                    this.resultArr = this.min_date;
                    this.currentTime = this.resultArr;
                    this.current_time = this.currentTime;
                }
            }
            this.resultDate = this.options.minDate;
        }
        return this.resultDate;
    }
    /**
     * @return {?}
     */
    cancel() {
        this.options.onDismiss.emit();
        this.setTransitionName();
    }
    /**
     * @return {?}
     */
    setTransitionName() {
        this.transitionName = 'am-slide-up-leave am-slide-up-leave-active';
        this.maskTransitionName = 'am-fade-leave am-fade-leave-active';
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.options.hidePicker();
        }), 200);
    }
    /**
     * @param {?} checkIdx
     * @param {?} sta
     * @param {?} indexT
     * @return {?}
     */
    setCurrentSelected(checkIdx, sta, indexT) {
        if (checkIdx >= this.clos - 1) {
            return;
        }
        /** @type {?} */
        let status = null;
        if (sta) {
            status = this.judgeEqualArray(this.min_date, this.resultArr, checkIdx + 1);
        }
        else {
            status = this.judgeEqualArray(this.max_date, this.resultArr, checkIdx + 1);
        }
        if (!status) {
            /** @type {?} */
            let min = 0;
            /** @type {?} */
            let max = 0;
            /** @type {?} */
            let str = '';
            /** @type {?} */
            const realIdx = this.indexArray[checkIdx];
            switch (realIdx) {
                case 0:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 1) ? this.localMinDate[checkIdx + 1] : 1;
                    max = this.judgeEqualArray(this.max_date, this.current_time, 1) ? this.localMaxDate[checkIdx + 1] : 12;
                    str = '月';
                    break;
                case 1:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 2)
                        ? this.localMinDate[checkIdx + 1]
                        : (this.curTLessThanMin ? this.localMinDate[checkIdx + 1] : 1);
                    max = this.judgeEqualArray(this.max_date, this.current_time, 2)
                        ? this.localMaxDate[checkIdx + 1]
                        : new Date(this.current_time[0], this.current_time[1], 0).getDate();
                    str = '日';
                    break;
                case 2:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 3)
                        ? this.localMinDate[checkIdx + 1]
                        : (this.curTLessThanMin ? this.localMinDate[checkIdx + 1] : 0);
                    max = this.judgeEqualArray(this.max_date, this.current_time, 3)
                        ? this.localMaxDate[checkIdx + 1]
                        : (this.curTMoreThanMax ? this.localMaxDate[checkIdx + 1] : 23);
                    str = '时';
                    break;
                case 3:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 4)
                        ? this.localMinDate[checkIdx + 1]
                        : (this.curTLessThanMin ? this.localMinDate[checkIdx + 1] : 0);
                    max = this.judgeEqualArray(this.max_date, this.current_time, 4)
                        ? this.localMaxDate[checkIdx + 1]
                        : (this.curTMoreThanMax ? this.localMaxDate[checkIdx + 1] : 59);
                    str = '分';
                    break;
            }
            this.initRangeArr(min, max, indexT, checkIdx + 1, str);
        }
        this.setCurrentSelected(checkIdx + 1, sta, indexT);
    }
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} indexT
     * @param {?} checkIdx
     * @param {?} str
     * @return {?}
     */
    initRangeArr(min, max, indexT, checkIdx, str) {
        /** @type {?} */
        const realIdx = this.indexArray[checkIdx];
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        let targetLong = 0;
        /** @type {?} */
        const increaseValue = str === this.localeNew.minute ? this.options.minuteStep : 1;
        for (let index = min; index < max + 1; index += increaseValue) {
            arr.push(index);
        }
        if (arr.indexOf(this.resultArr[checkIdx]) == -1) {
            if (-this.selectedTarget[checkIdx].currentY > max - min) {
                indexT = max - min;
                this.selectedTarget[checkIdx].currentY = -indexT;
            }
            targetLong = -arr.length * this.lineHeight;
        }
        else {
            targetLong = -arr.indexOf(this.resultArr[checkIdx]) * this.lineHeight;
            this.selectedTarget[checkIdx].currentY = -arr.indexOf(this.resultArr[checkIdx]);
        }
        if (this.data[checkIdx].toString() !== arr.toString()) {
            if (checkIdx >= 3) {
                this.current_time[realIdx] = -targetLong / this.lineHeight;
                this.resultArr[checkIdx] = -targetLong / this.lineHeight;
            }
            else {
                this.current_time[realIdx] = -targetLong / this.lineHeight + 1;
                this.resultArr[checkIdx] = -targetLong / this.lineHeight + 1;
            }
            this.data[checkIdx] = arr;
            this.dataWithStr[checkIdx] =
                this.options.locale.locale === 'zh_CN'
                    ? arr.map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        return item + str;
                    }))
                    : arr;
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.selectedTarget.forEach((/**
                 * @param {?} item
                 * @param {?} i
                 * @return {?}
                 */
                (item, i) => {
                    if (i >= checkIdx) {
                        this.currentPicker.children[i].children[2].style.transition = '';
                        /** @type {?} */
                        const index = parseInt(item.currentY, 0);
                        this.currentPicker.children[i].children[2].style.transform = `translateY(${index * this.lineHeight}px)`;
                    }
                }));
            }), 0);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getEventTarget(event) {
        if (event.type === 'mousedown' ||
            event.type === 'mousemove' ||
            event.type === 'mouseup' ||
            event.type === 'mouseleave') {
            return event;
        }
        else {
            if (event && event.changedTouches && event.changedTouches[0]) {
                return event.changedTouches[0];
            }
            return null;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkMode(this.options.mode);
        /** @type {?} */
        const value = this.transformDateFormat(this.options.value).split('-');
        if (value.length > 1) {
            this.current_time = this.currentTime = value.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return parseInt(item, 0);
            }));
        }
        else {
            this.currentTime = this.current_time;
        }
        this.localeProvider();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.reloadPicker();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'DatePicker, nzm-date-picker',
                template: "<div *ngIf=\"options.mask\" class=\"am-picker-popup-mask {{maskTransitionName}}\" (click)=\"cancel()\"></div>\n<div class=\"am-picker-popup {{transitionName}}\" style=\"z-index: 1000\">\n  <div class=\"am-picker-popup-content\">\n    <div class=\"am-picker-popup-body\">\n      <div>\n        <div class=\"am-picker-popup-header\">\n          <div class=\"am-picker-popup-item am-picker-popup-header-left\"\n               (click)=\"cancel()\"\n          >\n            {{options.dismissText}}\n          </div>\n          <div class=\"am-picker-popup-item am-picker-popup-title\">{{options.title}}</div>\n          <div class=\"am-picker-popup-item am-picker-popup-header-right\"\n               (click)=\"ok()\"\n          >\n            {{options.okText}}\n          </div>\n        </div>\n        <div #picker\n             class=\"am-picker\"\n             style=\"flex-direction: row; align-items: center;\"\n        >\n          <div *ngFor=\"let item of dataWithStr; let i = index\" class=\"am-picker-col\">\n            <div class=\"am-picker-col-indicator \" style=\"top: 102px;\"></div>\n            <div id={{i}}\n                 class=\"am-picker-col-mask\"\n                 style=\"background-size: 100% 102px;\"\n            ></div>\n            <div class=\"am-picker-col-content\">\n              <div id={{i}}\n                   class=\"am-picker-col-item\"\n                   *ngFor=\"let val of item; let i = index\"\n              >{{val.label?val.label:val}}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DatePickerOptions },
    { type: ToastService },
    { type: LocaleProviderService }
];
DatePickerComponent.propDecorators = {
    picker: [{ type: ViewChild, args: ['picker', { read: ViewContainerRef },] }],
    panstart: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
    panmove: [{ type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }],
    panend: [{ type: HostListener, args: ['mouseleave', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchend', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    DatePickerComponent.prototype.transitionName;
    /** @type {?} */
    DatePickerComponent.prototype.maskTransitionName;
    /** @type {?} */
    DatePickerComponent.prototype.modeSwitch;
    /** @type {?} */
    DatePickerComponent.prototype.localMinDate;
    /** @type {?} */
    DatePickerComponent.prototype.localMaxDate;
    /** @type {?} */
    DatePickerComponent.prototype.currentTime;
    /** @type {?} */
    DatePickerComponent.prototype.indexArray;
    /** @type {?} */
    DatePickerComponent.prototype.min_date;
    /** @type {?} */
    DatePickerComponent.prototype.max_date;
    /** @type {?} */
    DatePickerComponent.prototype.current_time;
    /** @type {?} */
    DatePickerComponent.prototype.clos;
    /** @type {?} */
    DatePickerComponent.prototype.resultArr;
    /** @type {?} */
    DatePickerComponent.prototype.resultDate;
    /** @type {?} */
    DatePickerComponent.prototype.data;
    /** @type {?} */
    DatePickerComponent.prototype.dataWithStr;
    /** @type {?} */
    DatePickerComponent.prototype.startY;
    /** @type {?} */
    DatePickerComponent.prototype.differY;
    /** @type {?} */
    DatePickerComponent.prototype.currentY;
    /** @type {?} */
    DatePickerComponent.prototype.len;
    /** @type {?} */
    DatePickerComponent.prototype.dom;
    /** @type {?} */
    DatePickerComponent.prototype.index;
    /** @type {?} */
    DatePickerComponent.prototype.maxY;
    /** @type {?} */
    DatePickerComponent.prototype.lineHeight;
    /** @type {?} */
    DatePickerComponent.prototype.selectedTarget;
    /** @type {?} */
    DatePickerComponent.prototype.isMouseDown;
    /** @type {?} */
    DatePickerComponent.prototype.currentPicker;
    /** @type {?} */
    DatePickerComponent.prototype.localeNew;
    /** @type {?} */
    DatePickerComponent.prototype.unsubscribe$;
    /** @type {?} */
    DatePickerComponent.prototype.Velocity;
    /** @type {?} */
    DatePickerComponent.prototype.errorMessage;
    /** @type {?} */
    DatePickerComponent.prototype.curTLessThanMin;
    /** @type {?} */
    DatePickerComponent.prototype.curTMoreThanMax;
    /** @type {?} */
    DatePickerComponent.prototype.ngModelOnChange;
    /** @type {?} */
    DatePickerComponent.prototype.ngModelOnTouched;
    /** @type {?} */
    DatePickerComponent.prototype.picker;
    /** @type {?} */
    DatePickerComponent.prototype.elementRef;
    /** @type {?} */
    DatePickerComponent.prototype.options;
    /** @type {?} */
    DatePickerComponent.prototype.toast;
    /** @type {?} */
    DatePickerComponent.prototype.localeProviderService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJkYXRlLXBpY2tlci9kYXRlLXBpY2tlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsVUFBVSxFQUNWLGlCQUFpQixFQUNqQixZQUFZLEVBQ1osU0FBUyxFQUNULGdCQUFnQixFQUdqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNuRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxLQUFLLFFBQVEsTUFBTSx1QkFBdUIsQ0FBQztBQVFsRCxNQUFNLE9BQU8sbUJBQW1COzs7Ozs7O0lBdUs5QixZQUNTLFVBQXNCLEVBQ3RCLE9BQTBCLEVBQzFCLEtBQW1CLEVBQ25CLHFCQUE0QztRQUg1QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLFlBQU8sR0FBUCxPQUFPLENBQW1CO1FBQzFCLFVBQUssR0FBTCxLQUFLLENBQWM7UUFDbkIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQTFLckQsbUJBQWMsR0FBVyw0Q0FBNEMsQ0FBQztRQUN0RSx1QkFBa0IsR0FBVyxvQ0FBb0MsQ0FBQztRQUNsRSxlQUFVLEdBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFDLGlCQUFZLEdBQVUsRUFBRSxDQUFDO1FBQ3pCLGlCQUFZLEdB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Q0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBQ3RFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzFELE1BQU07Z0JBQ1IsS0FBSyxDQUFDO29CQUNKLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7d0JBQy9ELENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzt3QkFDdEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3BELEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7d0JBQy9ELENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzt3QkFDdEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ3JELElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzNELE1BQU07Z0JBQ1IsS0FBSyxDQUFDO29CQUNKLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FB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QUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdEcsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO29CQUN2RyxHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLE1BQU07Z0JBQ1IsS0FBSyxDQUFDO29CQUNKLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7d0JBQy9ELENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7d0JBQ2pDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0QsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQzt3QkFDN0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQzt3QkFDbkMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDcEUsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixNQUFNO2dCQUNSLEtBQUssQ0FBQztvQkFDSixHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO3dCQUMvRCxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO3dCQUNqQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQy9ELEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7d0JBQy9ELENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7d0JBQ2pDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDaEUsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixNQUFNO2dCQUNSLEtBQUssQ0FBQztvQkFDSixHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO3dCQUMvRCxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO3dCQUNqQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMs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QUN4Qiw2Q0FBMkI7O0lBQzNCLDBDQUE2Qjs7SUFDN0IsNENBQW1COztJQUNuQix3Q0FBb0I7O0lBQ3BCLDJDQUFtQzs7SUFDbkMsdUNBQWtDOztJQUNsQywyQ0FBa0I7O0lBQ2xCLDhDQUF3Qjs7SUFDeEIsOENBQXdCOztJQUN4Qiw4Q0FBcUM7O0lBQ3JDLCtDQUEyQjs7SUFFM0IscUNBQ3lCOztJQTZIdkIseUNBQTZCOztJQUM3QixzQ0FBaUM7O0lBQ2pDLG9DQUEwQjs7SUFDMUIsb0RBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBPbkluaXQsXG4gIEVsZW1lbnRSZWYsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBIb3N0TGlzdGVuZXIsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgT25EZXN0cm95LFxuICBBZnRlclZpZXdJbml0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTG9jYWxlUHJvdmlkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbG9jYWxlLXByb3ZpZGVyL2xvY2FsZS1wcm92aWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVQaWNrZXJPcHRpb25zIH0gZnJvbSAnLi9kYXRlLXBpY2tlci1vcHRpb25zLnByb3ZpZGVyJztcbmltcG9ydCB7IFRvYXN0U2VydmljZSB9IGZyb20gJy4uL3RvYXN0L3RvYXN0LnNlcnZpY2UnO1xuaW1wb3J0ICogYXMgdmVsb2NpdHkgZnJvbSAnLi4vY29yZS91dGlsL3ZlbG9jaXR5JztcbmV4cG9ydCB0eXBlIERhdGVNb2RlID0gJ2RhdGUnIHwgJ3RpbWUnIHwgJ2RhdGV0aW1lJyB8ICd5ZWFyJyB8ICdtb250aCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ0RhdGVQaWNrZXIsIG56bS1kYXRlLXBpY2tlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9kYXRlLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgRGF0ZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgdHJhbnNpdGlvbk5hbWU6IHN0cmluZyA9ICdhbS1zbGlkZS11cC1lbnRlciBhbS1zbGlkZS11cC1lbnRlci1hY3RpdmUnO1xuICBtYXNrVHJhbnNpdGlvbk5hbWU6IHN0cmluZyA9ICdhbS1mYWRlLWVudGVyIGFtLWZhZGUtZW50ZXItYWN0aXZlJztcbiAgbW9kZVN3aXRjaDogbnVtYmVyW10gPSBbMSwgMSwgMSwgMSwgMSwgMV07XG4gIGxvY2FsTWluRGF0ZTogYW55W10gPSBbXTtcbiAgbG9jYWxNYXhEYXRlOiBhbnlbXSA9IFtdO1xuICBjdXJyZW50VGltZTogYW55W10gPSBbXTtcbiAgaW5kZXhBcnJheTogYW55ID0gW107XG4gIG1pbl9kYXRlOiBhbnlbXSA9IFtdO1xuICBtYXhfZGF0ZTogYW55W10gPSBbXTtcbiAgY3VycmVudF90aW1lOiBhbnlbXSA9IFtcbiAgICBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCksXG4gICAgbmV3IERhdGUoKS5nZXRNb250aCgpICsgMSxcbiAgICBuZXcgRGF0ZSgpLmdldERhdGUoKSxcbiAgICBuZXcgRGF0ZSgpLmdldEhvdXJzKCksXG4gICAgbmV3IERhdGUoKS5nZXRNaW51dGVzKClcbiAgXTtcbiAgY2xvczogbnVtYmVyID0gMDtcbiAgcmVzdWx0QXJyOiBhbnkgPSBbXTtcbiAgcmVzdWx0RGF0ZTogRGF0ZTtcbiAgZGF0YTogYW55W10gPSBbXTtcbiAgZGF0YVdpdGhTdHI6IGFueVtdID0gW107XG4gIHN0YXJ0WTogbnVtYmVyID0gMDtcbiAgZGlmZmVyWTogbnVtYmVyID0gMDtcbiAgY3VycmVudFk6IG51bWJlciA9IDA7XG4gIGxlbjogbnVtYmVyID0gMDtcbiAgZG9tOiBhbnkgPSBudWxsO1xuICBpbmRleDogbnVtYmVyID0gMDtcbiAgbWF4WTogbnVtYmVyID0gMDtcbiAgbGluZUhlaWdodDogbnVtYmVyID0gMzQ7XG4gIHNlbGVjdGVkVGFyZ2V0OiBhbnlbXSA9IFtdO1xuICBpc01vdXNlRG93bjogYm9vbGVhbiA9IGZhbHNlO1xuICBjdXJyZW50UGlja2VyOiBhbnk7XG4gIGxvY2FsZU5ldzogYW55ID0ge307XG4gIHVuc3Vic2NyaWJlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIFZlbG9jaXR5ID0gdmVsb2NpdHkuZ2V0VmVsb2NpdHkoKTtcbiAgZXJyb3JNZXNzYWdlID0gJyc7XG4gIGN1clRMZXNzVGhhbk1pbiA9IGZhbHNlO1xuICBjdXJUTW9yZVRoYW5NYXggPSBmYWxzZTtcbiAgbmdNb2RlbE9uQ2hhbmdlOiAodmFsdWU6IERhdGUpID0+IHt9O1xuICBuZ01vZGVsT25Ub3VjaGVkOiAoKSA9PiB7fTtcblxuICBAVmlld0NoaWxkKCdwaWNrZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSlcbiAgcGlja2VyOiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bicsIFsnJGV2ZW50J10pXG4gIEBIb3N0TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBbJyRldmVudCddKVxuICBwYW5zdGFydChldmVudCkge1xuICAgIGlmICghZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYW0tcGlja2VyLWNvbC1tYXNrJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc01vdXNlRG93biA9IHRydWU7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmRvbSA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuWzJdO1xuICAgIHRoaXMubGVuID0gdGhpcy5kb20uY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHRoaXMubWF4WSA9IC0odGhpcy5sZW4gLSAxKTtcblxuICAgIGlmICh0aGlzLmRvbS5zdHlsZS50cmFuc2Zvcm0gPT09ICd0cmFuc2xhdGVZKDBweCknKSB7XG4gICAgICB0aGlzLmN1cnJlbnRZID0gMDtcbiAgICAgIHRoaXMubWF4WSA9IC0odGhpcy5sZW4gLSAxKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRUYXJnZXQubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5zZWxlY3RlZFRhcmdldC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBpZiAoaXRlbS50YXJnZXRJZCA9PT0gZXZlbnQudGFyZ2V0LmlkKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50WSA9IGl0ZW0uY3VycmVudFk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBldiA9IHRoaXMuZ2V0RXZlbnRUYXJnZXQoZXZlbnQpO1xuICAgIHRoaXMuc3RhcnRZID0gZXYuY2xpZW50WTtcbiAgfVxuICBASG9zdExpc3RlbmVyKCdtb3VzZW1vdmUnLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCd0b3VjaG1vdmUnLCBbJyRldmVudCddKVxuICBwYW5tb3ZlKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhbS1waWNrZXItY29sLW1hc2snKSB8fCAhdGhpcy5pc01vdXNlRG93bikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGV2ID0gdGhpcy5nZXRFdmVudFRhcmdldChldmVudCk7XG4gICAgdGhpcy5kaWZmZXJZID0gZXYuY2xpZW50WSAtIHRoaXMuc3RhcnRZO1xuICAgIHRoaXMuVmVsb2NpdHkucmVjb3JkKHRoaXMuZGlmZmVyWSk7XG4gICAgdGhpcy5kb20uc3R5bGUudHJhbnNpdGlvbiA9ICd0cmFuc2Zvcm0gMHMnO1xuICAgIHRoaXMuZG9tLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVZKCR7dGhpcy5jdXJyZW50WSAqIHRoaXMubGluZUhlaWdodCArIHRoaXMuZGlmZmVyWX1weClgO1xuICB9XG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCdtb3VzZXVwJywgWyckZXZlbnQnXSlcbiAgQEhvc3RMaXN0ZW5lcigndG91Y2hlbmQnLCBbJyRldmVudCddKVxuICBwYW5lbmQoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FtLXBpY2tlci1jb2wtbWFzaycpIHx8ICF0aGlzLmlzTW91c2VEb3duKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNNb3VzZURvd24gPSBmYWxzZTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGV2ID0gdGhpcy5nZXRFdmVudFRhcmdldChldmVudCk7XG4gICAgdGhpcy5kaWZmZXJZID0gZXYuY2xpZW50WSAtIHRoaXMuc3RhcnRZO1xuICAgIGxldCB0aW1lID0gMC4zO1xuICAgIGNvbnN0IHZlbG9jaXR5VGVtcCA9IHRoaXMuVmVsb2NpdHkuZ2V0VmVsb2NpdHkodGhpcy5kaWZmZXJZKSAqIDQ7XG4gICAgaWYgKHZlbG9jaXR5VGVtcCkge1xuICAgICAgdGhpcy5kaWZmZXJZID0gdmVsb2NpdHlUZW1wICogNDAgKyB0aGlzLmRpZmZlclk7XG4gICAgICB0aW1lID0gTWF0aC5hYnModmVsb2NpdHlUZW1wKSAqIDAuMTtcbiAgICB9XG4gICAgdGhpcy5kb20uc3R5bGUudHJhbnNpdGlvbiA9ICd0cmFuc2Zvcm0gJyArICh0aW1lIDwgMC4zID8gMC4zIDogdGltZSkgKyAncyc7XG4gICAgaWYgKHRoaXMuZGlmZmVyWSA8PSAtdGhpcy5saW5lSGVpZ2h0IC8gMikge1xuICAgICAgdGhpcy5jdXJyZW50WSArPSBNYXRoLmZsb29yKHRoaXMuZGlmZmVyWSAvIHRoaXMubGluZUhlaWdodCk7XG4gICAgICBpZiAodGhpcy5jdXJyZW50WSA8PSB0aGlzLm1heFkpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50WSA9IHRoaXMubWF4WTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZGlmZmVyWSA+PSB0aGlzLmxpbmVIZWlnaHQgLyAyKSB7XG4gICAgICB0aGlzLmN1cnJlbnRZICs9IE1hdGguZmxvb3IodGhpcy5kaWZmZXJZIC8gdGhpcy5saW5lSGVpZ2h0KTtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRZID49IDApIHtcbiAgICAgICAgdGhpcy5jdXJyZW50WSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRUYXJnZXQubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IGhhc0tleSA9IGZhbHNlO1xuICAgICAgdGhpcy5zZWxlY3RlZFRhcmdldC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBpZiAoaXRlbS50YXJnZXRJZCA9PT0gZXZlbnQudGFyZ2V0LmlkKSB7XG4gICAgICAgICAgaGFzS2V5ID0gdHJ1ZTtcbiAgICAgICAgICBpdGVtLnRhcmdldElkID0gZXZlbnQudGFyZ2V0LmlkO1xuICAgICAgICAgIGl0ZW0uY3VycmVudFkgPSB0aGlzLmN1cnJlbnRZO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghaGFzS2V5KSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUYXJnZXQucHVzaCh7IHRhcmdldElkOiBldmVudC50YXJnZXQuaWQsIGN1cnJlbnRZOiB0aGlzLmN1cnJlbnRZIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGVkVGFyZ2V0LnB1c2goeyB0YXJnZXRJZDogZXZlbnQudGFyZ2V0LmlkLCBjdXJyZW50WTogdGhpcy5jdXJyZW50WSB9KTtcbiAgICB9XG4gICAgdGhpcy5kb20uc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHt0aGlzLmN1cnJlbnRZICogdGhpcy5saW5lSGVpZ2h0fXB4KWA7XG4gICAgdGhpcy5pbmRleCA9IE1hdGguZmxvb3IoTWF0aC5hYnModGhpcy5jdXJyZW50WSAvIDEpKTsgLy8g6K6w5b2V5b2T5YmN5L2N56e75Zyo5pWw57uE5Lit55qE57Si5byVLOW/hemhu+WPluaVtO+8jOWQpuWImeS8muWHuueOsOa1rueCueaVsFxuICAgIHRoaXMuY3VycmVudF90aW1lW3RoaXMuaW5kZXhBcnJheVtwYXJzZUludChldmVudC50YXJnZXQuaWQsIDApXV0gPSB0aGlzLnJlc3VsdEFycltcbiAgICAgIHRoaXMuaW5kZXhBcnJheVtwYXJzZUludChldmVudC50YXJnZXQuaWQsIDApXVxuICAgIF0gPSB0aGlzLmRhdGFbcGFyc2VJbnQoZXZlbnQudGFyZ2V0LmlkLCAwKV1bdGhpcy5pbmRleF07XG4gICAgaWYgKHRoaXMuanVkZ2VUaW1lKHRoaXMuY3VycmVudF90aW1lLCB0aGlzLm1heF9kYXRlKSkge1xuICAgICAgdGhpcy5jdXJyZW50VGltZSA9IHRoaXMuY3VycmVudF90aW1lID0gdGhpcy5tYXhfZGF0ZS5zbGljZSgwLCB0aGlzLmluZGV4QXJyYXkubGVuZ3RoKTtcbiAgICAgIHRoaXMucmVzdWx0QXJyID0gdGhpcy5jdXJyZW50X3RpbWU7XG4gICAgICB0aGlzLm9wdGlvbnMub25WYWx1ZUNoYW5nZS5lbWl0KHtkYXRlOiB0aGlzLmhhbmRsZVJlc2x1dCgpLCBpbmRleDogZXZlbnQudGFyZ2V0LmlkfSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVwZGF0ZU5nTW9kZWwpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnVwZGF0ZU5nTW9kZWwodGhpcy5oYW5kbGVSZXNsdXQoKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZ01vZGVsT25DaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5uZ01vZGVsT25DaGFuZ2UodGhpcy5oYW5kbGVSZXNsdXQoKSk7XG4gICAgICB9XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuanVkZ2VUaW1lKHRoaXMubWluX2RhdGUsIHRoaXMuY3VycmVudF90aW1lKSkge1xuICAgICAgdGhpcy5jdXJyZW50VGltZSA9IHRoaXMuY3VycmVudF90aW1lID0gdGhpcy5taW5fZGF0ZS5zbGljZSgwLCB0aGlzLmluZGV4QXJyYXkubGVuZ3RoKTtcbiAgICAgIHRoaXMucmVzdWx0QXJyID0gdGhpcy5jdXJyZW50VGltZTtcbiAgICAgIHRoaXMub3B0aW9ucy5vblZhbHVlQ2hhbmdlLmVtaXQoe2RhdGU6IHRoaXMuaGFuZGxlUmVzbHV0KCksIGluZGV4OiBldmVudC50YXJnZXQuaWR9KTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBkYXRlTmdNb2RlbCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudXBkYXRlTmdNb2RlbCh0aGlzLmhhbmRsZVJlc2x1dCgpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5nTW9kZWxPbkNoYW5nZSkge1xuICAgICAgICB0aGlzLm5nTW9kZWxPbkNoYW5nZSh0aGlzLmhhbmRsZVJlc2x1dCgpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRTZWxlY3RlZCgwLCB0aGlzLmRpZmZlclkgPCAwLCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMub3B0aW9ucy5vblZhbHVlQ2hhbmdlLmVtaXQoe2RhdGU6IHRoaXMuaGFuZGxlUmVzbHV0KCksIGluZGV4OiBldmVudC50YXJnZXQuaWR9KTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBkYXRlTmdNb2RlbCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudXBkYXRlTmdNb2RlbCh0aGlzLmhhbmRsZVJlc2x1dCgpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5nTW9kZWxPbkNoYW5nZSkge1xuICAgICAgICB0aGlzLm5nTW9kZWxPbkNoYW5nZSh0aGlzLmhhbmRsZVJlc2x1dCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwdWJsaWMgb3B0aW9uczogRGF0ZVBpY2tlck9wdGlvbnMsXG4gICAgcHVibGljIHRvYXN0OiBUb2FzdFNlcnZpY2UsXG4gICAgcHVibGljIGxvY2FsZVByb3ZpZGVyU2VydmljZTogTG9jYWxlUHJvdmlkZXJTZXJ2aWNlXG4gICkgeyB9XG5cbiAgaW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuY2hlY2tUaW1lKCkgJiYgdGhpcy5vcHRpb25zLnNob3dFcnJvclRvYXN0KSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgVG9hc3RTZXJ2aWNlLmZhaWwodGhpcy5lcnJvck1lc3NhZ2UsIHRoaXMub3B0aW9ucy5zaG93RXJyb3JUb2FzdEludGVydmFsKTtcbiAgICAgIH0sIDApO1xuICAgIH1cbiAgICB0aGlzLmluaXRSZXN1bHQoKTtcbiAgICB0aGlzLmluaXRSZWFkeSgpO1xuICAgIHRoaXMuZ2V0SW5pdFZhbHVlSW5kZXgoKTtcbiAgfVxuXG4gIHJlbG9hZFBpY2tlcigpIHtcbiAgICBpZiAoIXRoaXMucGlja2VyIHx8IHRoaXMucGlja2VyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50UGlja2VyID0gdGhpcy5waWNrZXIuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgIGlmICh0aGlzLmN1cnJlbnRQaWNrZXIgJiYgdGhpcy5jdXJyZW50UGlja2VyLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNlbGYuc2VsZWN0ZWRUYXJnZXQuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgIHNlbGYuY3VycmVudFBpY2tlci5jaGlsZHJlbltpXS5jaGlsZHJlblsyXS5zdHlsZS50cmFuc2l0aW9uID0gJ3RyYW5zZm9ybSAuM3MnO1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoaXRlbS5jdXJyZW50WSwgMCk7XG4gICAgICAgICAgc2VsZi5jdXJyZW50UGlja2VyLmNoaWxkcmVuW2ldLmNoaWxkcmVuWzJdLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVZKCR7aW5kZXggKiBzZWxmLmxpbmVIZWlnaHR9cHgpYDtcbiAgICAgICAgfSk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICBsb2NhbGVQcm92aWRlcigpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoc2VsZi5vcHRpb25zLmxvY2FsZSB8fCBzZWxmLm9wdGlvbnMubG9jYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNlbGYubG9jYWxlUHJvdmlkZXJTZXJ2aWNlLnNldExvY2FsZShzZWxmLm9wdGlvbnMubG9jYWxlKTtcbiAgICB9XG4gICAgc2VsZi5sb2NhbGVQcm92aWRlclNlcnZpY2UubG9jYWxlQ2hhbmdlLnBpcGUodGFrZVVudGlsKHNlbGYudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKF8gPT4ge1xuICAgICAgc2VsZi5vcHRpb25zLmxvY2FsZSA9IHNlbGYubG9jYWxlUHJvdmlkZXJTZXJ2aWNlLmdldExvY2FsZSgpO1xuICAgICAgc2VsZi5sb2NhbGVOZXcgPSBzZWxmLmxvY2FsZVByb3ZpZGVyU2VydmljZS5nZXRMb2NhbGVTdWJPYmooJ0RhdGVQaWNrZXInKTtcbiAgICAgIHNlbGYub3B0aW9ucy5va1RleHQgPSBzZWxmLmxvY2FsZU5ldy5va1RleHQ7XG4gICAgICBzZWxmLm9wdGlvbnMuZGlzbWlzc1RleHQgPSBzZWxmLmxvY2FsZU5ldy5kaXNtaXNzVGV4dDtcbiAgICAgIHNlbGYuaW5pdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgdHJhbnNmb3JtRGF0ZUZvcm1hdChkYXRlKTogYW55IHtcbiAgICBpZiAoIWRhdGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICd5eXl5LW1tLWRkLUhILU1NJ1xuICAgICAgICAucmVwbGFjZSgneXl5eScsIGRhdGUuZ2V0RnVsbFllYXIoKSArICcnKVxuICAgICAgICAucmVwbGFjZSgnbW0nLCBkYXRlLmdldE1vbnRoKCkgKyAxICsgJycpXG4gICAgICAgIC5yZXBsYWNlKCdkZCcsIGRhdGUuZ2V0RGF0ZSgpICsgJycpXG4gICAgICAgIC5yZXBsYWNlKCdISCcsIGRhdGUuZ2V0SG91cnMoKSArICcnKVxuICAgICAgICAucmVwbGFjZSgnTU0nLCBkYXRlLmdldE1pbnV0ZXMoKSArICcnKTtcbiAgICB9XG4gIH1cblxuICBwcmVaZXJvKHZhbDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdmFsIDwgMTAgPyAnMCcgKyB2YWwgOiB2YWwgKyAnJztcbiAgfVxuXG4gIGdldEluaXRWYWx1ZUluZGV4KCkge1xuICAgIHRoaXMuc2VsZWN0ZWRUYXJnZXQgPSBbXTtcbiAgICB0aGlzLmluZGV4QXJyYXkubWFwKChpbmRleCwgaSkgPT4ge1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goKGl0ZW0sIGopID0+IHtcbiAgICAgICAgaXRlbS5mb3JFYWNoKChpdGVtMSwgaykgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRUaW1lW2luZGV4XSA9PT0gaXRlbTEgJiYgaSA9PT0gaikge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRhcmdldC5wdXNoKHsgdGFyZ2V0SWQ6IGAke2l9YCwgY3VycmVudFk6IC1rIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLnJlbG9hZFBpY2tlcigpO1xuICB9XG5cbiAgY2hlY2tNb2RlKG1vZGUpIHtcbiAgICB0aGlzLm1vZGVTd2l0Y2ggPSBbMSwgMSwgMSwgMSwgMSwgMV07XG4gICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgdGhpcy5tb2RlU3dpdGNoID0gWzEsIDEsIDEsIDAsIDAsIDBdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RpbWUnOlxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVzZTEySG91cnMpIHtcbiAgICAgICAgICB0aGlzLm1vZGVTd2l0Y2ggPSBbMCwgMCwgMCwgMSwgMSwgMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tb2RlU3dpdGNoID0gWzAsIDAsIDAsIDEsIDEsIDBdO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGF0ZXRpbWUnOlxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVzZTEySG91cnMpIHtcbiAgICAgICAgICB0aGlzLm1vZGVTd2l0Y2ggPSBbMSwgMSwgMSwgMSwgMSwgMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tb2RlU3dpdGNoID0gWzEsIDEsIDEsIDEsIDEsIDBdO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIHRoaXMubW9kZVN3aXRjaCA9IFsxLCAwLCAwLCAwLCAwXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIHRoaXMubW9kZVN3aXRjaCA9IFsxLCAxLCAwLCAwLCAwXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc3QgdGVtcEluZGV4QXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubW9kZVN3aXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMubW9kZVN3aXRjaFtpXSA+IDApIHtcbiAgICAgICAgdGVtcEluZGV4QXJyYXkucHVzaChpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jbG9zID0gdGVtcEluZGV4QXJyYXlbdGVtcEluZGV4QXJyYXkubGVuZ3RoIC0gMV0gLSB0ZW1wSW5kZXhBcnJheVswXSArIDE7XG4gICAgdGhpcy5pbmRleEFycmF5ID0gdGVtcEluZGV4QXJyYXk7XG4gIH1cblxuICBpbml0UmVzdWx0KCkge1xuICAgIHRoaXMucmVzdWx0QXJyID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNsb3M7IGkrKykge1xuICAgICAgY29uc3QgcmVzID0gdGhpcy5jdXJyZW50VGltZVtpXTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ3RpbWUnKSB7XG4gICAgICAgIHRoaXMucmVzdWx0QXJyID0gdGhpcy5jdXJyZW50VGltZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVzdWx0QXJyLnB1c2gocmVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjaGVja1RpbWUoKSB7XG4gICAgY29uc3QgbWluX0RhdGUgPSB0aGlzLnRyYW5zZm9ybURhdGVGb3JtYXQodGhpcy5vcHRpb25zLm1pbkRhdGUpLnNwbGl0KCctJyk7XG4gICAgaWYgKG1pbl9EYXRlLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMubWluX2RhdGUgPSBtaW5fRGF0ZS5tYXAoaXRlbSA9PiB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChpdGVtLCAwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBtYXhfRGF0ZSA9IHRoaXMudHJhbnNmb3JtRGF0ZUZvcm1hdCh0aGlzLm9wdGlvbnMubWF4RGF0ZSkuc3BsaXQoJy0nKTtcbiAgICBpZiAobWF4X0RhdGUubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5tYXhfZGF0ZSA9IG1heF9EYXRlLm1hcChpdGVtID0+IHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGl0ZW0sIDApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG1pbl9kYXRlID0gdGhpcy5taW5fZGF0ZTtcbiAgICBjb25zdCBtYXhfZGF0ZSA9IHRoaXMubWF4X2RhdGU7XG4gICAgY29uc3QgY3VycmVudF90aW1lID0gdGhpcy5jdXJyZW50VGltZTtcbiAgICB0aGlzLmxvY2FsTWluRGF0ZSA9IFtdO1xuICAgIGlmICh0aGlzLmxvY2FsTWluRGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4QXJyYXkubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMubG9jYWxNaW5EYXRlLnB1c2gobWluX2RhdGVbdGhpcy5pbmRleEFycmF5W2luZGV4XV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxvY2FsTWF4RGF0ZSA9IFtdO1xuICAgIGlmICh0aGlzLmxvY2FsTWF4RGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4QXJyYXkubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMubG9jYWxNYXhEYXRlLnB1c2gobWF4X2RhdGVbdGhpcy5pbmRleEFycmF5W2luZGV4XV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoXG4gICAgICB0aGlzLmluZGV4QXJyYXkubGVuZ3RoID09PSB0aGlzLmxvY2FsTWluRGF0ZS5sZW5ndGggJiZcbiAgICAgIHRoaXMubG9jYWxNaW5EYXRlLmxlbmd0aCA9PT0gdGhpcy5sb2NhbE1heERhdGUubGVuZ3RoXG4gICAgKSB7XG4gICAgICBjb25zdCBtaW5UID0gbmV3IERhdGUobWluX2RhdGVbMF0sIG1pbl9kYXRlWzFdLCBtaW5fZGF0ZVsyXSwgbWluX2RhdGVbM10sIG1pbl9kYXRlWzRdKS5nZXRUaW1lKCk7XG4gICAgICBjb25zdCBtYXhUID0gbmV3IERhdGUobWF4X2RhdGVbMF0sIG1heF9kYXRlWzFdLCBtYXhfZGF0ZVsyXSwgbWF4X2RhdGVbM10sIG1heF9kYXRlWzRdKS5nZXRUaW1lKCk7XG4gICAgICBjb25zdCBjdXJUID0gbmV3IERhdGUoXG4gICAgICAgIGN1cnJlbnRfdGltZVswXSxcbiAgICAgICAgY3VycmVudF90aW1lWzFdLFxuICAgICAgICBjdXJyZW50X3RpbWVbMl0sXG4gICAgICAgIGN1cnJlbnRfdGltZVszXSB8fCAwLFxuICAgICAgICBjdXJyZW50X3RpbWVbNF0gfHwgMFxuICAgICAgKS5nZXRUaW1lKCk7XG4gICAgICB0aGlzLmN1clRMZXNzVGhhbk1pbiA9IGZhbHNlO1xuICAgICAgdGhpcy5jdXJUTW9yZVRoYW5NYXggPSBmYWxzZTtcbiAgICAgIGlmIChjdXJUIDwgbWluVCkge1xuICAgICAgICB0aGlzLmN1clRMZXNzVGhhbk1pbiA9IHRydWU7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSB0aGlzLm1pbl9kYXRlO1xuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IHRoaXMubG9jYWxlTmV3LmN1clRMZXNzdGhhbk1pbjtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJUID4gbWF4VCkge1xuICAgICAgICB0aGlzLmN1clRNb3JlVGhhbk1heCA9IHRydWU7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSB0aGlzLm1heF9kYXRlO1xuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IHRoaXMubG9jYWxlTmV3LmN1clRNb3JldGhhbk1heDtcbiAgICAgIH1cbiAgICAgIGxldCBfaW5kZXhBcnJheUluZGV4ID0gMDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tb2RlU3dpdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGVTd2l0Y2hbaV0gPT09IDApIHtcbiAgICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgbWluX2RhdGVbaV0gPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgIG1heF9kYXRlW2ldID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgbWluX2RhdGVbaV0gPSBuZXcgRGF0ZSgpLmdldE1vbnRoKCkgKyAxO1xuICAgICAgICAgICAgICBtYXhfZGF0ZVtpXSA9IG5ldyBEYXRlKCkuZ2V0TW9udGgoKSArIDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBtaW5fZGF0ZVtpXSA9IG5ldyBEYXRlKCkuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgICBtYXhfZGF0ZVtpXSA9IG5ldyBEYXRlKCkuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgbWluX2RhdGVbaV0gPSBuZXcgRGF0ZSgpLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgIG1heF9kYXRlW2ldID0gbmV3IERhdGUoKS5nZXRIb3VycygpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgbWluX2RhdGVbaV0gPSBuZXcgRGF0ZSgpLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgbWF4X2RhdGVbaV0gPSBuZXcgRGF0ZSgpLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgIG1pbl9kYXRlW2ldID0gMDtcbiAgICAgICAgICAgICAgbWF4X2RhdGVbaV0gPSAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHRoaXMubG9jYWxNaW5EYXRlW19pbmRleEFycmF5SW5kZXhdID0gbWluX2RhdGVbaV0gPVxuICAgICAgICAgICAgICAgICh0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XSA+PSAxOTAwKVxuICAgICAgICAgICAgICAgICAgPyB0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XVxuICAgICAgICAgICAgICAgICAgOiBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgIHRoaXMubG9jYWxNYXhEYXRlW19pbmRleEFycmF5SW5kZXhdID0gbWF4X2RhdGVbaV0gPVxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxNYXhEYXRlW19pbmRleEFycmF5SW5kZXhdID49IDE5MDBcbiAgICAgICAgICAgICAgICAgID8gdGhpcy5sb2NhbE1heERhdGVbX2luZGV4QXJyYXlJbmRleF1cbiAgICAgICAgICAgICAgICAgIDogbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpICsgMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIHRoaXMubG9jYWxNaW5EYXRlW19pbmRleEFycmF5SW5kZXhdID0gbWluX2RhdGVbaV0gPVxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxNaW5EYXRlW19pbmRleEFycmF5SW5kZXhdID4gMCAmJiB0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XSA8PSAxMlxuICAgICAgICAgICAgICAgICAgPyB0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XVxuICAgICAgICAgICAgICAgICAgOiAxO1xuICAgICAgICAgICAgICB0aGlzLmxvY2FsTWF4RGF0ZVtfaW5kZXhBcnJheUluZGV4XSA9IG1heF9kYXRlW2ldID1cbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsTWF4RGF0ZVtfaW5kZXhBcnJheUluZGV4XSA+IDAgJiYgdGhpcy5sb2NhbE1heERhdGVbX2luZGV4QXJyYXlJbmRleF0gPD0gMTJcbiAgICAgICAgICAgICAgICAgID8gdGhpcy5sb2NhbE1heERhdGVbX2luZGV4QXJyYXlJbmRleF1cbiAgICAgICAgICAgICAgICAgIDogMTI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICB0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XSA9IG1pbl9kYXRlW2ldID1cbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XSA+IDAgJiZcbiAgICAgICAgICAgICAgICAgIHRoaXMubG9jYWxNaW5EYXRlW19pbmRleEFycmF5SW5kZXhdIDw9IG5ldyBEYXRlKG1pbl9kYXRlWzBdLCBtaW5fZGF0ZVsxXSwgMCkuZ2V0RGF0ZSgpXG4gICAgICAgICAgICAgICAgICA/IHRoaXMubG9jYWxNaW5EYXRlW19pbmRleEFycmF5SW5kZXhdXG4gICAgICAgICAgICAgICAgICA6IDE7XG4gICAgICAgICAgICAgIHRoaXMubG9jYWxNYXhEYXRlW19pbmRleEFycmF5SW5kZXhdID0gbWF4X2RhdGVbaV0gPVxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxNYXhEYXRlW19pbmRleEFycmF5SW5kZXhdID4gMCAmJlxuICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbE1heERhdGVbX2luZGV4QXJyYXlJbmRleF0gPD0gbmV3IERhdGUobWF4X2RhdGVbMF0sIG1heF9kYXRlWzFdLCAwKS5nZXREYXRlKClcbiAgICAgICAgICAgICAgICAgID8gdGhpcy5sb2NhbE1heERhdGVbX2luZGV4QXJyYXlJbmRleF1cbiAgICAgICAgICAgICAgICAgIDogbmV3IERhdGUobWF4X2RhdGVbMF0sIG1heF9kYXRlWzFdLCAwKS5nZXREYXRlKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICB0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XSA9IG1pbl9kYXRlW2ldID1cbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XSA+PSAwICYmIHRoaXMubG9jYWxNaW5EYXRlW19pbmRleEFycmF5SW5kZXhdIDw9IDIzXG4gICAgICAgICAgICAgICAgICA/IHRoaXMubG9jYWxNaW5EYXRlW19pbmRleEFycmF5SW5kZXhdXG4gICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlMTJIb3Vycykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxNYXhEYXRlW19pbmRleEFycmF5SW5kZXhdID0gbWF4X2RhdGVbaV0gPVxuICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbE1heERhdGVbX2luZGV4QXJyYXlJbmRleF0gPj0gMCAmJiB0aGlzLmxvY2FsTWF4RGF0ZVtfaW5kZXhBcnJheUluZGV4XSA8PSAxMVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMubG9jYWxNYXhEYXRlW19pbmRleEFycmF5SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgIDogMTE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbE1heERhdGVbX2luZGV4QXJyYXlJbmRleF0gPSBtYXhfZGF0ZVtpXSA9XG4gICAgICAgICAgICAgICAgICB0aGlzLmxvY2FsTWF4RGF0ZVtfaW5kZXhBcnJheUluZGV4XSA+PSAwICYmIHRoaXMubG9jYWxNYXhEYXRlW19pbmRleEFycmF5SW5kZXhdIDw9IDIzXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5sb2NhbE1heERhdGVbX2luZGV4QXJyYXlJbmRleF1cbiAgICAgICAgICAgICAgICAgICAgOiAyMztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgdGhpcy5sb2NhbE1pbkRhdGVbX2luZGV4QXJyYXlJbmRleF0gPSBtaW5fZGF0ZVtpXSA9XG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbE1pbkRhdGVbX2luZGV4QXJyYXlJbmRleF0gPj0gMCAmJiB0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XSA8PSA1OVxuICAgICAgICAgICAgICAgICAgPyB0aGlzLmxvY2FsTWluRGF0ZVtfaW5kZXhBcnJheUluZGV4XVxuICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgICB0aGlzLmxvY2FsTWF4RGF0ZVtfaW5kZXhBcnJheUluZGV4XSA9IG1heF9kYXRlW2ldID1cbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsTWF4RGF0ZVtfaW5kZXhBcnJheUluZGV4XSA+PSAwICYmIHRoaXMubG9jYWxNYXhEYXRlW19pbmRleEFycmF5SW5kZXhdIDw9IDU5XG4gICAgICAgICAgICAgICAgICA/IHRoaXMubG9jYWxNYXhEYXRlW19pbmRleEFycmF5SW5kZXhdXG4gICAgICAgICAgICAgICAgICA6IDU5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX2luZGV4QXJyYXlJbmRleCsrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1pblQgPD0gY3VyVCAmJiBjdXJUIDw9IG1heFQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gdGhpcy5sb2NhbGVOZXcuZXJyb3JNZXNzYWdlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGp1ZGdlVGltZShhcnIxLCBhcnIyKSB7XG4gICAgbGV0IGRhdGUxO1xuICAgIGxldCBkYXRlMjtcbiAgICBkYXRlMSA9IGFycjEuc2xpY2UoMCwgMykuam9pbignLScpICsgJyAnICsgYXJyMS5zbGljZSgzLCA1KS5qb2luKCc6Jyk7XG4gICAgZGF0ZTIgPSBhcnIyLnNsaWNlKDAsIDMpLmpvaW4oJy0nKSArICcgJyArIGFycjIuc2xpY2UoMywgNSkuam9pbignOicpO1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlMSkuZ2V0VGltZSgpID49IG5ldyBEYXRlKGRhdGUyKS5nZXRUaW1lKCk7XG4gIH1cblxuICBqdWRnZUVxdWFsQXJyYXkoYXJyMSwgYXJyMiwgbGVuZ3RoKSB7XG4gICAgbGV0IHN0YXR1cyA9IHRydWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFycjFbaV0gIT0gYXJyMltpXSkge1xuICAgICAgICBzdGF0dXMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXR1cztcbiAgfVxuXG4gIGluaXRSZWFkeSgpIHtcbiAgICBsZXQgcmVhbElkeCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNsb3M7IGkrKykge1xuICAgICAgcmVhbElkeCA9IHRoaXMuaW5kZXhBcnJheVtpXTtcbiAgICAgIGxldCBtaW4gPSAwO1xuICAgICAgbGV0IG1heCA9IDA7XG4gICAgICBjb25zdCB0ZW1wQXJyYXkgPSBbXTtcbiAgICAgIHN3aXRjaCAocmVhbElkeCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5pbml0RGF0YSh0ZW1wQXJyYXksIHRoaXMubG9jYWxNaW5EYXRlW2ldLCB0aGlzLmxvY2FsTWF4RGF0ZVtpXSwgdGhpcy5sb2NhbGVOZXcueWVhciwgaSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtaW4gPSB0aGlzLmp1ZGdlRXF1YWxBcnJheSh0aGlzLm1pbl9kYXRlLCB0aGlzLmN1cnJlbnRfdGltZSwgMSkgPyB0aGlzLmxvY2FsTWluRGF0ZVtpXSA6IDE7XG4gICAgICAgICAgbWF4ID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5tYXhfZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDEpID8gdGhpcy5sb2NhbE1heERhdGVbaV0gOiAxMjtcbiAgICAgICAgICB0aGlzLmluaXREYXRhKHRlbXBBcnJheSwgbWluLCBtYXgsIHRoaXMubG9jYWxlTmV3Lm1vbnRoLCBpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1pbiA9IHRoaXMuanVkZ2VFcXVhbEFycmF5KHRoaXMubWluX2RhdGUsIHRoaXMuY3VycmVudF90aW1lLCAyKVxuICAgICAgICAgID8gdGhpcy5sb2NhbE1pbkRhdGVbaV1cbiAgICAgICAgICA6ICh0aGlzLmN1clRMZXNzVGhhbk1pbiA/IHRoaXMubG9jYWxNaW5EYXRlW2ldIDogMSk7XG4gICAgICAgICAgbWF4ID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5tYXhfZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDIpXG4gICAgICAgICAgICA/IHRoaXMubG9jYWxNYXhEYXRlW2ldXG4gICAgICAgICAgICA6IG5ldyBEYXRlKHRoaXMuY3VycmVudF90aW1lWzBdLCB0aGlzLmN1cnJlbnRfdGltZVsxXSwgMCkuZ2V0RGF0ZSgpO1xuICAgICAgICAgIHRoaXMuaW5pdERhdGEodGVtcEFycmF5LCBtaW4sIG1heCwgdGhpcy5sb2NhbGVOZXcuZGF5LCBpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIG1pbiA9IHRoaXMuanVkZ2VFcXVhbEFycmF5KHRoaXMubWluX2RhdGUsIHRoaXMuY3VycmVudF90aW1lLCAzKVxuICAgICAgICAgID8gdGhpcy5sb2NhbE1pbkRhdGVbaV1cbiAgICAgICAgICA6ICh0aGlzLmN1clRMZXNzVGhhbk1pbiA/IHRoaXMubG9jYWxNaW5EYXRlW2ldIDogMCk7XG4gICAgICAgICAgbWF4ID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5tYXhfZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDMpXG4gICAgICAgICAgPyB0aGlzLmxvY2FsTWF4RGF0ZVtpXVxuICAgICAgICAgIDogKHRoaXMuY3VyVE1vcmVUaGFuTWF4ID8gdGhpcy5sb2NhbE1heERhdGVbaV0gOiAyMyk7XG4gICAgICAgICAgdGhpcy5pbml0RGF0YSh0ZW1wQXJyYXksIG1pbiwgbWF4LCB0aGlzLmxvY2FsZU5ldy5ob3VyLCBpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1pbiA9IHRoaXMuanVkZ2VFcXVhbEFycmF5KHRoaXMubWluX2RhdGUsIHRoaXMuY3VycmVudF90aW1lLCA0KVxuICAgICAgICAgID8gdGhpcy5sb2NhbE1pbkRhdGVbaV1cbiAgICAgICAgICA6ICh0aGlzLmN1clRMZXNzVGhhbk1pbiA/IHRoaXMubG9jYWxNaW5EYXRlW2ldIDogMCk7XG4gICAgICAgICAgbWF4ID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5tYXhfZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDQpXG4gICAgICAgICAgPyB0aGlzLmxvY2FsTWF4RGF0ZVtpXVxuICAgICAgICAgIDogKHRoaXMuY3VyVE1vcmVUaGFuTWF4ID8gdGhpcy5sb2NhbE1heERhdGVbaV0gOiA1OSk7XG4gICAgICAgICAgdGhpcy5pbml0RGF0YSh0ZW1wQXJyYXksIG1pbiwgbWF4LCB0aGlzLmxvY2FsZU5ldy5taW51dGUsIGkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgbWluID0gMDtcbiAgICAgICAgICBtYXggPSAxO1xuICAgICAgICAgIHRoaXMuaW5pdERhdGEodGVtcEFycmF5LCBtaW4sIG1heCwgJ3VzZTEySG91cnMnLCBpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpbml0RGF0YSh0ZW1wQXJyLCBtaW4sIG1heCwgc3RyLCBpZHgpIHtcbiAgICBjb25zdCBkYXRhV2l0aFN0ciA9IFtdO1xuICAgIGNvbnN0IGluY3JlYXNlVmFsdWUgPSBzdHIgPT09IHRoaXMubG9jYWxlTmV3Lm1pbnV0ZSA/IHRoaXMub3B0aW9ucy5taW51dGVTdGVwIDogMTtcbiAgICBmb3IgKG1pbjsgbWluIDwgbWF4ICsgMTsgbWluICs9IGluY3JlYXNlVmFsdWUpIHtcbiAgICAgIHRlbXBBcnIucHVzaChtaW4pO1xuICAgICAgZGF0YVdpdGhTdHIucHVzaChtaW4gKyBzdHIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCA+IHRoaXMuaW5kZXhBcnJheS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgdGhpcy5kYXRhV2l0aFN0ciA9IFtdO1xuICAgIH1cbiAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCA+IGlkeCAmJiB0aGlzLmRhdGFbaWR4XS50b1N0cmluZygpICE9PSB0ZW1wQXJyLnRvU3RyaW5nKCkpIHtcbiAgICAgIHRoaXMuZGF0YVtpZHhdID0gdGVtcEFycjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5sZW5ndGggPiBpZHggJiYgdGhpcy5kYXRhW2lkeF0udG9TdHJpbmcoKSA9PT0gdGVtcEFyci50b1N0cmluZygpKSB7XG4gICAgICB0aGlzLmRhdGFbaWR4XSA9IHRlbXBBcnI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5wdXNoKHRlbXBBcnIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmxvY2FsZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMub3B0aW9ucy5sb2NhbGUubG9jYWxlID09PSAnemhfQ04nKSB7XG4gICAgICBpZiAodGhpcy5kYXRhV2l0aFN0ci5sZW5ndGggPiBpZHggJiYgdGhpcy5kYXRhV2l0aFN0cltpZHhdLnRvU3RyaW5nKCkgIT09IGRhdGFXaXRoU3RyLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgdGhpcy5kYXRhV2l0aFN0cltpZHhdID0gZGF0YVdpdGhTdHI7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YVdpdGhTdHIubGVuZ3RoID4gaWR4ICYmIHRoaXMuZGF0YVdpdGhTdHJbaWR4XS50b1N0cmluZygpID09PSBkYXRhV2l0aFN0ci50b1N0cmluZygpKSB7XG4gICAgICAgIHRoaXMuZGF0YVdpdGhTdHJbaWR4XSA9IGRhdGFXaXRoU3RyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kYXRhV2l0aFN0ci5wdXNoKGRhdGFXaXRoU3RyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhV2l0aFN0ciA9IHRoaXMuZGF0YTtcbiAgICB9XG4gIH1cblxuICBvaygpIHtcbiAgICB0aGlzLm9wdGlvbnMub25Pay5lbWl0KHRoaXMuaGFuZGxlUmVzbHV0KCkpO1xuICAgIHRoaXMuc2V0VHJhbnNpdGlvbk5hbWUoKTtcbiAgfVxuXG4gIGhhbmRsZVJlc2x1dCgpIHtcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5tb2RlID09PSAnZGF0ZXRpbWUnIHx8IHRoaXMub3B0aW9ucy5tb2RlID09PSAndGltZScpIHtcbiAgICAgIGNvbnN0IHRlbXAgPSB0aGlzLnJlc3VsdEFycjtcbiAgICAgIHJlc3VsdCA9IHRlbXAuc2xpY2UoMCwgMykuam9pbignLScpICsgJyAnICsgdGVtcC5zbGljZSgzLCA1KS5qb2luKCc6Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnJlc3VsdEFyci5sZW5ndGggPCAzKSB7XG4gICAgICAgIHRoaXMucmVzdWx0QXJyLnB1c2goJzEnKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHRoaXMucmVzdWx0QXJyLm1hcCh2ID0+IHtcbiAgICAgICByZXR1cm4gdGhpcy5wcmVaZXJvKHBhcnNlSW50KHYsIDApKTtcbiAgICAgIH0pLmpvaW4oJy0nKTtcbiAgICB9XG4gICAgdGhpcy5yZXN1bHREYXRlID0gbmV3IERhdGUocmVzdWx0LnJlcGxhY2UoLy0vZywgJy8nKSk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5taW5EYXRlLmdldFRpbWUoKSA+IHRoaXMucmVzdWx0RGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgIGlmICh0aGlzLnJlc3VsdEFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnJlc3VsdEFyci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICB0aGlzLnJlc3VsdEFyciA9IHRoaXMubWluX2RhdGU7XG4gICAgICAgICAgdGhpcy5jdXJyZW50VGltZSA9IHRoaXMucmVzdWx0QXJyO1xuICAgICAgICAgIHRoaXMuY3VycmVudF90aW1lID0gdGhpcy5jdXJyZW50VGltZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5yZXN1bHREYXRlID0gdGhpcy5vcHRpb25zLm1pbkRhdGU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlc3VsdERhdGU7XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5vcHRpb25zLm9uRGlzbWlzcy5lbWl0KCk7XG4gICAgdGhpcy5zZXRUcmFuc2l0aW9uTmFtZSgpO1xuICB9XG5cbiAgc2V0VHJhbnNpdGlvbk5hbWUoKSB7XG4gICAgdGhpcy50cmFuc2l0aW9uTmFtZSA9ICdhbS1zbGlkZS11cC1sZWF2ZSBhbS1zbGlkZS11cC1sZWF2ZS1hY3RpdmUnO1xuICAgIHRoaXMubWFza1RyYW5zaXRpb25OYW1lID0gJ2FtLWZhZGUtbGVhdmUgYW0tZmFkZS1sZWF2ZS1hY3RpdmUnO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5vcHRpb25zLmhpZGVQaWNrZXIoKTtcbiAgICB9LCAyMDApO1xuICB9XG5cbiAgc2V0Q3VycmVudFNlbGVjdGVkKGNoZWNrSWR4LCBzdGEsIGluZGV4VCkge1xuICAgIGlmIChjaGVja0lkeCA+PSB0aGlzLmNsb3MgLSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzdGF0dXMgPSBudWxsO1xuICAgIGlmIChzdGEpIHtcbiAgICAgIHN0YXR1cyA9IHRoaXMuanVkZ2VFcXVhbEFycmF5KHRoaXMubWluX2RhdGUsIHRoaXMucmVzdWx0QXJyLCBjaGVja0lkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0dXMgPSB0aGlzLmp1ZGdlRXF1YWxBcnJheSh0aGlzLm1heF9kYXRlLCB0aGlzLnJlc3VsdEFyciwgY2hlY2tJZHggKyAxKTtcbiAgICB9XG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIGxldCBtaW4gPSAwO1xuICAgICAgbGV0IG1heCA9IDA7XG4gICAgICBsZXQgc3RyID0gJyc7XG4gICAgICBjb25zdCByZWFsSWR4ID0gdGhpcy5pbmRleEFycmF5W2NoZWNrSWR4XTtcbiAgICAgIHN3aXRjaCAocmVhbElkeCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgbWluID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5taW5fZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDEpID8gdGhpcy5sb2NhbE1pbkRhdGVbY2hlY2tJZHggKyAxXSA6IDE7XG4gICAgICAgICAgbWF4ID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5tYXhfZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDEpID8gdGhpcy5sb2NhbE1heERhdGVbY2hlY2tJZHggKyAxXSA6IDEyO1xuICAgICAgICAgIHN0ciA9ICfmnIgnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWluID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5taW5fZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDIpXG4gICAgICAgICAgPyB0aGlzLmxvY2FsTWluRGF0ZVtjaGVja0lkeCArIDFdXG4gICAgICAgICAgOiAodGhpcy5jdXJUTGVzc1RoYW5NaW4gPyB0aGlzLmxvY2FsTWluRGF0ZVtjaGVja0lkeCArIDFdIDogMSk7XG4gICAgICAgICAgbWF4ID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5tYXhfZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDIpXG4gICAgICAgICAgICA/IHRoaXMubG9jYWxNYXhEYXRlW2NoZWNrSWR4ICsgMV1cbiAgICAgICAgICA6IG5ldyBEYXRlKHRoaXMuY3VycmVudF90aW1lWzBdLCB0aGlzLmN1cnJlbnRfdGltZVsxXSwgMCkuZ2V0RGF0ZSgpO1xuICAgICAgICAgIHN0ciA9ICfml6UnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWluID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5taW5fZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDMpXG4gICAgICAgICAgPyB0aGlzLmxvY2FsTWluRGF0ZVtjaGVja0lkeCArIDFdXG4gICAgICAgICAgOiAodGhpcy5jdXJUTGVzc1RoYW5NaW4gPyB0aGlzLmxvY2FsTWluRGF0ZVtjaGVja0lkeCArIDFdIDogMCk7XG4gICAgICAgICAgbWF4ID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5tYXhfZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDMpXG4gICAgICAgICAgPyB0aGlzLmxvY2FsTWF4RGF0ZVtjaGVja0lkeCArIDFdXG4gICAgICAgICAgOiAodGhpcy5jdXJUTW9yZVRoYW5NYXggPyB0aGlzLmxvY2FsTWF4RGF0ZVtjaGVja0lkeCArIDFdIDogMjMpO1xuICAgICAgICAgIHN0ciA9ICfml7YnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWluID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5taW5fZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDQpXG4gICAgICAgICAgPyB0aGlzLmxvY2FsTWluRGF0ZVtjaGVja0lkeCArIDFdXG4gICAgICAgICAgOiAodGhpcy5jdXJUTGVzc1RoYW5NaW4gPyB0aGlzLmxvY2FsTWluRGF0ZVtjaGVja0lkeCArIDFdIDogMCk7XG4gICAgICAgICAgbWF4ID0gdGhpcy5qdWRnZUVxdWFsQXJyYXkodGhpcy5tYXhfZGF0ZSwgdGhpcy5jdXJyZW50X3RpbWUsIDQpXG4gICAgICAgICAgPyB0aGlzLmxvY2FsTWF4RGF0ZVtjaGVja0lkeCArIDFdXG4gICAgICAgICAgOiAodGhpcy5jdXJUTW9yZVRoYW5NYXggPyB0aGlzLmxvY2FsTWF4RGF0ZVtjaGVja0lkeCArIDFdIDogNTkpO1xuICAgICAgICAgIHN0ciA9ICfliIYnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluaXRSYW5nZUFycihtaW4sIG1heCwgaW5kZXhULCBjaGVja0lkeCArIDEsIHN0cik7XG4gICAgfVxuICAgIHRoaXMuc2V0Q3VycmVudFNlbGVjdGVkKGNoZWNrSWR4ICsgMSwgc3RhLCBpbmRleFQpO1xuICB9XG5cbiAgaW5pdFJhbmdlQXJyKG1pbiwgbWF4LCBpbmRleFQsIGNoZWNrSWR4LCBzdHIpIHtcbiAgICBjb25zdCByZWFsSWR4ID0gdGhpcy5pbmRleEFycmF5W2NoZWNrSWR4XTtcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICBsZXQgdGFyZ2V0TG9uZyA9IDA7XG4gICAgY29uc3QgaW5jcmVhc2VWYWx1ZSA9IHN0ciA9PT0gdGhpcy5sb2NhbGVOZXcubWludXRlID8gdGhpcy5vcHRpb25zLm1pbnV0ZVN0ZXAgOiAxO1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSBtaW47IGluZGV4IDwgbWF4ICsgMTsgaW5kZXggKz0gaW5jcmVhc2VWYWx1ZSkge1xuICAgICAgYXJyLnB1c2goaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChhcnIuaW5kZXhPZih0aGlzLnJlc3VsdEFycltjaGVja0lkeF0pID09IC0xKSB7XG4gICAgICBpZiAoLXRoaXMuc2VsZWN0ZWRUYXJnZXRbY2hlY2tJZHhdLmN1cnJlbnRZID4gbWF4IC0gbWluKSB7XG4gICAgICAgIGluZGV4VCA9IG1heCAtIG1pbjtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRhcmdldFtjaGVja0lkeF0uY3VycmVudFkgPSAtaW5kZXhUO1xuICAgICAgfVxuICAgICAgdGFyZ2V0TG9uZyA9IC1hcnIubGVuZ3RoICogdGhpcy5saW5lSGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRMb25nID0gLWFyci5pbmRleE9mKHRoaXMucmVzdWx0QXJyW2NoZWNrSWR4XSkgKiB0aGlzLmxpbmVIZWlnaHQ7XG4gICAgICB0aGlzLnNlbGVjdGVkVGFyZ2V0W2NoZWNrSWR4XS5jdXJyZW50WSA9IC1hcnIuaW5kZXhPZih0aGlzLnJlc3VsdEFycltjaGVja0lkeF0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5kYXRhW2NoZWNrSWR4XS50b1N0cmluZygpICE9PSBhcnIudG9TdHJpbmcoKSkge1xuICAgICAgaWYgKGNoZWNrSWR4ID49IDMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X3RpbWVbcmVhbElkeF0gPSAtdGFyZ2V0TG9uZyAvIHRoaXMubGluZUhlaWdodDtcbiAgICAgICAgdGhpcy5yZXN1bHRBcnJbY2hlY2tJZHhdID0gLXRhcmdldExvbmcgLyB0aGlzLmxpbmVIZWlnaHQ7XG4gICAgICB9ZWxzZSB7XG4gICAgICAgIHRoaXMuY3VycmVudF90aW1lW3JlYWxJZHhdID0gLXRhcmdldExvbmcgLyB0aGlzLmxpbmVIZWlnaHQgKyAxO1xuICAgICAgICB0aGlzLnJlc3VsdEFycltjaGVja0lkeF0gPSAtdGFyZ2V0TG9uZyAvIHRoaXMubGluZUhlaWdodCArIDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGF0YVtjaGVja0lkeF0gPSBhcnI7XG4gICAgICB0aGlzLmRhdGFXaXRoU3RyW2NoZWNrSWR4XSA9XG4gICAgICAgIHRoaXMub3B0aW9ucy5sb2NhbGUubG9jYWxlID09PSAnemhfQ04nXG4gICAgICAgICAgPyBhcnIubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0gKyBzdHI7XG4gICAgICAgICAgfSlcbiAgICAgICAgICA6IGFycjtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVGFyZ2V0LmZvckVhY2goKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICBpZiAoaSA+PSBjaGVja0lkeCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGlja2VyLmNoaWxkcmVuW2ldLmNoaWxkcmVuWzJdLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoaXRlbS5jdXJyZW50WSwgMCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQaWNrZXIuY2hpbGRyZW5baV0uY2hpbGRyZW5bMl0uc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHtpbmRleCAqIHRoaXMubGluZUhlaWdodH1weClgO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICBnZXRFdmVudFRhcmdldChldmVudCkge1xuICAgIGlmIChcbiAgICAgIGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nIHx8XG4gICAgICBldmVudC50eXBlID09PSAnbW91c2Vtb3ZlJyB8fFxuICAgICAgZXZlbnQudHlwZSA9PT0gJ21vdXNldXAnIHx8XG4gICAgICBldmVudC50eXBlID09PSAnbW91c2VsZWF2ZSdcbiAgICApIHtcbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LmNoYW5nZWRUb3VjaGVzICYmIGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdKSB7XG4gICAgICAgIHJldHVybiBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY2hlY2tNb2RlKHRoaXMub3B0aW9ucy5tb2RlKTtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudHJhbnNmb3JtRGF0ZUZvcm1hdCh0aGlzLm9wdGlvbnMudmFsdWUpLnNwbGl0KCctJyk7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMuY3VycmVudF90aW1lID0gdGhpcy5jdXJyZW50VGltZSA9IHZhbHVlLm1hcChpdGVtID0+IHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGl0ZW0sIDApO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUgPSB0aGlzLmN1cnJlbnRfdGltZTtcbiAgICB9XG4gICAgdGhpcy5sb2NhbGVQcm92aWRlcigpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMucmVsb2FkUGlja2VyKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5uZXh0KCk7XG4gICAgdGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19
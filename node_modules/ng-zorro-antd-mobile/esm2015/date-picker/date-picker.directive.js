/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, Injector, Directive, forwardRef, EventEmitter, HostListener, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { DatePickerComponent } from './date-picker.component';
import { DatePickerOptions } from './date-picker-options.provider';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class DatePickerDirective {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _defaultOptions
     * @param {?} _cfr
     */
    constructor(_viewContainerRef, _defaultOptions, _cfr) {
        this._viewContainerRef = _viewContainerRef;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._eventListeners = [];
        this.minuteStep = 1;
        this.value = new Date();
        this.onVisibleChange = new EventEmitter(true);
        this.onValueChange = new EventEmitter();
        this.onOk = new EventEmitter();
        this.onDismiss = new EventEmitter();
    }
    /**
     * @return {?}
     */
    togglePicker() {
        if (!this.picker) {
            this.showPicker();
        }
        else {
            this.hidePicker();
        }
    }
    /**
     * @return {?}
     */
    showPicker() {
        if (!this.picker && !this.disabled) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this._eventListeners = [];
            }));
            /** @type {?} */
            const options = new DatePickerOptions();
            Object.assign(options, this._defaultOptions, {
                hidePicker: (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this.hidePicker();
                }),
                updateNgModel: (/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    if (this._ngModelOnChange) {
                        this.value = value;
                        this._ngModelOnChange(value);
                    }
                })
            });
            /** @type {?} */
            const optionalParams = [
                'mode',
                'minDate',
                'maxDate',
                'minuteStep',
                'value',
                'mask',
                'title',
                'okText',
                'dismissText',
                'disabled',
                'locale',
                'appendToBody',
                'showErrorToast',
                'showErrorToastInterval',
                'onOk',
                'onDismiss',
                'onValueChange'
            ];
            optionalParams.forEach((/**
             * @param {?} param
             * @return {?}
             */
            param => {
                if (typeof this[param] !== 'undefined') {
                    ((/** @type {?} */ (options)))[param] = this[param];
                }
            }));
            /** @type {?} */
            const componentFactory = this._cfr.resolveComponentFactory(DatePickerComponent);
            /** @type {?} */
            const childInjector = Injector.create([
                {
                    provide: DatePickerOptions,
                    useValue: options
                }
            ]);
            this.picker = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options.appendToBody) {
                document.body.appendChild(this.picker.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    }
    /**
     * @return {?}
     */
    hidePicker() {
        if (this.picker) {
            this.picker.destroy();
            delete this.picker;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._eventListeners = [];
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._ngModelOnChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._ngModelOnTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onVisibleChange.emit(false);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.isOpen) {
            if (changes.isOpen.currentValue === true) {
                this.showPicker();
            }
            else {
                this.hidePicker();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.hidePicker();
    }
}
DatePickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[DatePicker]',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => DatePickerDirective)),
                        multi: true
                    }
                ]
            },] }
];
/** @nocollapse */
DatePickerDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: DatePickerOptions },
    { type: ComponentFactoryResolver }
];
DatePickerDirective.propDecorators = {
    isOpen: [{ type: Input }],
    mode: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    use12Hours: [{ type: Input }],
    minuteStep: [{ type: Input }],
    value: [{ type: Input }],
    mask: [{ type: Input }],
    title: [{ type: Input }],
    okText: [{ type: Input }],
    dismissText: [{ type: Input }],
    disabled: [{ type: Input }],
    locale: [{ type: Input }],
    appendToBody: [{ type: Input }],
    showErrorToast: [{ type: Input }],
    showErrorToastInterval: [{ type: Input }],
    onVisibleChange: [{ type: Output }],
    onValueChange: [{ type: Output }],
    onOk: [{ type: Output }],
    onDismiss: [{ type: Output }],
    togglePicker: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    DatePickerDirective.prototype.picker;
    /**
     * @type {?}
     * @private
     */
    DatePickerDirective.prototype._eventListeners;
    /**
     * @type {?}
     * @private
     */
    DatePickerDirective.prototype._ngModelOnChange;
    /**
     * @type {?}
     * @private
     */
    DatePickerDirective.prototype._ngModelOnTouched;
    /** @type {?} */
    DatePickerDirective.prototype.isOpen;
    /** @type {?} */
    DatePickerDirective.prototype.mode;
    /** @type {?} */
    DatePickerDirective.prototype.minDate;
    /** @type {?} */
    DatePickerDirective.prototype.maxDate;
    /** @type {?} */
    DatePickerDirective.prototype.use12Hours;
    /** @type {?} */
    DatePickerDirective.prototype.minuteStep;
    /** @type {?} */
    DatePickerDirective.prototype.value;
    /** @type {?} */
    DatePickerDirective.prototype.mask;
    /** @type {?} */
    DatePickerDirective.prototype.title;
    /** @type {?} */
    DatePickerDirective.prototype.okText;
    /** @type {?} */
    DatePickerDirective.prototype.dismissText;
    /** @type {?} */
    DatePickerDirective.prototype.disabled;
    /** @type {?} */
    DatePickerDirective.prototype.locale;
    /** @type {?} */
    DatePickerDirective.prototype.appendToBody;
    /** @type {?} */
    DatePickerDirective.prototype.showErrorToast;
    /** @type {?} */
    DatePickerDirective.prototype.showErrorToastInterval;
    /** @type {?} */
    DatePickerDirective.prototype.onVisibleChange;
    /** @type {?} */
    DatePickerDirective.prototype.onValueChange;
    /** @type {?} */
    DatePickerDirective.prototype.onOk;
    /** @type {?} */
    DatePickerDirective.prototype.onDismiss;
    /**
     * @type {?}
     * @private
     */
    DatePickerDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    DatePickerDirective.prototype._defaultOptions;
    /**
     * @type {?}
     * @private
     */
    DatePickerDirective.prototype._cfr;
}
//# sourceMappingURL=data:application/json;base64,
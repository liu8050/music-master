/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { PickerComponent } from './picker.component';
import { PickerOptions } from './picker-options.provider';
import { PopupService } from '../core/services/popup.service';
export class PickerService extends PopupService {
    /**
     * @param {?=} config
     * @param {?=} confirmCallback
     * @param {?=} cancelCallback
     * @return {?}
     */
    static showPicker(config = PickerService.defaultOptions, confirmCallback, cancelCallback) {
        /** @type {?} */
        const options = new PickerOptions();
        Object.assign(options, config, {
            hidePicker: (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                this.hidePicker();
            }),
            confirm: (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                if (confirmCallback) {
                    confirmCallback(event);
                }
            }),
            cancel: (/**
             * @return {?}
             */
            () => {
                if (cancelCallback) {
                    cancelCallback();
                }
            })
        });
        /** @type {?} */
        const childInjector = Injector.create([
            {
                provide: PickerOptions,
                useValue: options
            }
        ]);
        PickerService.showPopup('PickerComponent', PickerComponent, childInjector);
    }
    /**
     * @return {?}
     */
    static hidePicker() {
        PickerService.hidePopup('PickerComponent');
    }
}
PickerService.defaultOptions = new PickerOptions();
PickerService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    PickerService.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbInBpY2tlci9waWNrZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBa0IsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRzlELE1BQU0sT0FBTyxhQUFjLFNBQVEsWUFBWTs7Ozs7OztJQUc3QyxNQUFNLENBQUMsVUFBVSxDQUNmLFNBQXdCLGFBQWEsQ0FBQyxjQUFjLEVBQ3BELGVBQWdDLEVBQ2hDLGNBQStCOztjQUV6QixPQUFPLEdBQUcsSUFBSSxhQUFhLEVBQUU7UUFDbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFO1lBQzdCLFVBQVU7Ozs7WUFBRSxDQUFDLEtBQUssRUFBUSxFQUFFO2dCQUMxQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDcEIsQ0FBQyxDQUFBO1lBQ0QsT0FBTzs7OztZQUFFLENBQUMsS0FBSyxFQUFRLEVBQUU7Z0JBQ3ZCLElBQUksZUFBZSxFQUFFO29CQUNuQixlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3hCO1lBQ0gsQ0FBQyxDQUFBO1lBQ0QsTUFBTTs7O1lBQUUsR0FBUyxFQUFFO2dCQUNqQixJQUFJLGNBQWMsRUFBRTtvQkFDbEIsY0FBYyxFQUFFLENBQUM7aUJBQ2xCO1lBQ0gsQ0FBQyxDQUFBO1NBQ0YsQ0FBQyxDQUFDOztjQUVHLGFBQWEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ3BDO2dCQUNFLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixRQUFRLEVBQUUsT0FBTzthQUNsQjtTQUNGLENBQUM7UUFDRixhQUFhLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3RSxDQUFDOzs7O0lBRUQsTUFBTSxDQUFDLFVBQVU7UUFDZixhQUFhLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDN0MsQ0FBQzs7QUFuQ00sNEJBQWMsR0FBa0IsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7WUFGNUQsVUFBVTs7OztJQUVULDZCQUEyRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL3BpY2tlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGlja2VyQ2FsbEJhY2ssIFBpY2tlck9wdGlvbnMgfSBmcm9tICcuL3BpY2tlci1vcHRpb25zLnByb3ZpZGVyJztcbmltcG9ydCB7IFBvcHVwU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2VydmljZXMvcG9wdXAuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQaWNrZXJTZXJ2aWNlIGV4dGVuZHMgUG9wdXBTZXJ2aWNlIHtcbiAgc3RhdGljIGRlZmF1bHRPcHRpb25zOiBQaWNrZXJPcHRpb25zID0gbmV3IFBpY2tlck9wdGlvbnMoKTtcblxuICBzdGF0aWMgc2hvd1BpY2tlcihcbiAgICBjb25maWc6IFBpY2tlck9wdGlvbnMgPSBQaWNrZXJTZXJ2aWNlLmRlZmF1bHRPcHRpb25zLFxuICAgIGNvbmZpcm1DYWxsYmFjaz86IFBpY2tlckNhbGxCYWNrLFxuICAgIGNhbmNlbENhbGxiYWNrPzogUGlja2VyQ2FsbEJhY2tcbiAgKTogdm9pZCB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IG5ldyBQaWNrZXJPcHRpb25zKCk7XG4gICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCBjb25maWcsIHtcbiAgICAgIGhpZGVQaWNrZXI6IChldmVudCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmhpZGVQaWNrZXIoKTtcbiAgICAgIH0sXG4gICAgICBjb25maXJtOiAoZXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKGNvbmZpcm1DYWxsYmFjaykge1xuICAgICAgICAgIGNvbmZpcm1DYWxsYmFjayhldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYW5jZWw6ICgpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKGNhbmNlbENhbGxiYWNrKSB7XG4gICAgICAgICAgY2FuY2VsQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgY2hpbGRJbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZShbXG4gICAgICB7XG4gICAgICAgIHByb3ZpZGU6IFBpY2tlck9wdGlvbnMsXG4gICAgICAgIHVzZVZhbHVlOiBvcHRpb25zXG4gICAgICB9XG4gICAgXSk7XG4gICAgUGlja2VyU2VydmljZS5zaG93UG9wdXAoJ1BpY2tlckNvbXBvbmVudCcsIFBpY2tlckNvbXBvbmVudCwgY2hpbGRJbmplY3Rvcik7XG4gIH1cblxuICBzdGF0aWMgaGlkZVBpY2tlcigpOiB2b2lkIHtcbiAgICBQaWNrZXJTZXJ2aWNlLmhpZGVQb3B1cCgnUGlja2VyQ29tcG9uZW50Jyk7XG4gIH1cbn1cbiJdfQ==
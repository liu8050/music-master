/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, NgZone, Injector, Renderer2, Directive, ElementRef, forwardRef, HostListener, EventEmitter, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { PickerComponent } from './picker.component';
import { PickerOptions } from './picker-options.provider';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class PickerDirective {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _elm
     * @param {?} _defaultOptions
     * @param {?} _cfr
     * @param {?} _renderer
     * @param {?} _zone
     */
    constructor(_viewContainerRef, _elm, _defaultOptions, _cfr, _renderer, _zone) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._renderer = _renderer;
        this._zone = _zone;
        this._eventListeners = [];
        this.onVisibleChange = new EventEmitter(true);
        this.onPickerChange = new EventEmitter();
        this.onDismiss = new EventEmitter();
        this.onChange = (/**
         * @return {?}
         */
        () => null);
        this.onTouched = (/**
         * @return {?}
         */
        () => null);
    }
    /**
     * @return {?}
     */
    togglePicker() {
        if (!this.picker) {
            this.showPicker();
        }
        else {
            this.hidePicker();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onVisibleChange.emit(false);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ngOnChanges(value) {
        if (value.cols && this.picker) {
            this.picker.instance.options.cols = value.cols.currentValue;
        }
        if (value.data && this.picker) {
            this.picker.instance.options.data = value.data.currentValue;
            this.showPicker();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.hidePicker();
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        if (this.picker &&
            !this._elm.nativeElement.contains(event.target) &&
            !this.picker.location.nativeElement.contains(event.target)) {
            this.hidePicker();
        }
    }
    /**
     * @private
     * @return {?}
     */
    showPicker() {
        if (this.picker) {
            this._zone.run((/**
             * @return {?}
             */
            () => {
                this.picker.instance.init();
            }));
        }
        else if (!this.picker && !this.disabled) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this._eventListeners = [
                    this._renderer.listen('document', 'click', (/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => this.onDocumentClick(event))),
                    this._renderer.listen('document', 'touchend', (/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => this.onDocumentClick(event)))
                ];
            }));
            /** @type {?} */
            const options = new PickerOptions();
            Object.assign(options, this._defaultOptions, {
                hidePicker: (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    this.hidePicker();
                }),
                updateNgModel: (/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    this.onChange(value);
                })
            });
            /** @type {?} */
            const optionalParams = [
                'data',
                'value',
                'cols',
                'mask',
                'title',
                'okText',
                'dismissText',
                'disabled',
                'cascade',
                'appendToBody',
                'indicatorStyle',
                'onPickerChange',
                'onVisibleChange',
                'onDismiss'
            ];
            optionalParams.forEach((/**
             * @param {?} param
             * @return {?}
             */
            param => {
                if (typeof this[param] !== 'undefined') {
                    ((/** @type {?} */ (options)))[param] = this[param];
                }
            }));
            /** @type {?} */
            const componentFactory = this._cfr.resolveComponentFactory(PickerComponent);
            /** @type {?} */
            const childInjector = Injector.create([
                {
                    provide: PickerOptions,
                    useValue: options
                }
            ]);
            this.picker = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options.appendToBody) {
                document.body.appendChild(this.picker.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    }
    /**
     * @private
     * @return {?}
     */
    hidePicker() {
        if (this.picker) {
            this.picker.destroy();
            delete this.picker;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._eventListeners = [];
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = Array.isArray(value) ? value : [];
        if (this.picker) {
            this.picker.instance.options.value = this.value;
            this.showPicker();
            this.picker.instance.reloadPicker();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
PickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[Picker], [nzm-picker]',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PickerDirective)),
                        multi: true
                    }
                ]
            },] }
];
/** @nocollapse */
PickerDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: PickerOptions },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: NgZone }
];
PickerDirective.propDecorators = {
    data: [{ type: Input }],
    cols: [{ type: Input }],
    mask: [{ type: Input }],
    title: [{ type: Input }],
    visible: [{ type: Input }],
    okText: [{ type: Input }],
    dismissText: [{ type: Input }],
    disabled: [{ type: Input }],
    cascade: [{ type: Input }],
    appendToBody: [{ type: Input }],
    indicatorStyle: [{ type: Input }],
    onVisibleChange: [{ type: Output }],
    onPickerChange: [{ type: Output }],
    onDismiss: [{ type: Output }],
    togglePicker: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    PickerDirective.prototype.picker;
    /** @type {?} */
    PickerDirective.prototype.value;
    /**
     * @type {?}
     * @private
     */
    PickerDirective.prototype._eventListeners;
    /** @type {?} */
    PickerDirective.prototype.data;
    /** @type {?} */
    PickerDirective.prototype.cols;
    /** @type {?} */
    PickerDirective.prototype.mask;
    /** @type {?} */
    PickerDirective.prototype.title;
    /** @type {?} */
    PickerDirective.prototype.visible;
    /** @type {?} */
    PickerDirective.prototype.okText;
    /** @type {?} */
    PickerDirective.prototype.dismissText;
    /** @type {?} */
    PickerDirective.prototype.disabled;
    /** @type {?} */
    PickerDirective.prototype.cascade;
    /** @type {?} */
    PickerDirective.prototype.appendToBody;
    /** @type {?} */
    PickerDirective.prototype.indicatorStyle;
    /** @type {?} */
    PickerDirective.prototype.onVisibleChange;
    /** @type {?} */
    PickerDirective.prototype.onPickerChange;
    /** @type {?} */
    PickerDirective.prototype.onDismiss;
    /** @type {?} */
    PickerDirective.prototype.onChange;
    /** @type {?} */
    PickerDirective.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    PickerDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    PickerDirective.prototype._elm;
    /**
     * @type {?}
     * @private
     */
    PickerDirective.prototype._defaultOptions;
    /**
     * @type {?}
     * @private
     */
    PickerDirective.prototype._cfr;
    /**
     * @type {?}
     * @private
     */
    PickerDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    PickerDirective.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,
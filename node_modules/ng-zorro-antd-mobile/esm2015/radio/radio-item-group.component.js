/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, Output, QueryList, forwardRef, EventEmitter, ContentChildren, ChangeDetectorRef, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';
import { RadioItemComponent } from './radio-item.component';
import { merge, Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
/** @type {?} */
export const RADIO_ITEM_GROUP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => RadioItemGroupComponent)),
    multi: true
};
export class RadioItemGroupComponent {
    /**
     * @param {?} cdr
     */
    constructor(cdr) {
        this.cdr = cdr;
        this.destroy$ = new Subject();
        this.onChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    updateChildrenStatus() {
        if (this.radioItems && typeof (this.selectedValue) !== 'undefined' && null !== this.selectedValue) {
            Promise.resolve().then((/**
             * @return {?}
             */
            () => {
                this.radioItems.forEach((/**
                 * @param {?} radioItem
                 * @return {?}
                 */
                radioItem => {
                    radioItem.checked = radioItem.value === this.selectedValue;
                    radioItem.markForCheck();
                }));
            }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.radioItems.changes
            .pipe(startWith(null), takeUntil(this.destroy$))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this.updateChildrenStatus();
            if (this.selectSubscription) {
                this.selectSubscription.unsubscribe();
            }
            this.selectSubscription = merge(...this.radioItems.map((/**
             * @param {?} radioItem
             * @return {?}
             */
            radioItem => radioItem.select$)))
                .pipe(takeUntil(this.destroy$))
                .subscribe((/**
             * @param {?} radioItem
             * @return {?}
             */
            radioItem => {
                if (typeof (this.selectedValue) !== 'undefined' && null !== this.selectedValue) {
                    this.selectedValue = radioItem.value;
                    this._ngModelOnChange(radioItem.value);
                    this.updateChildrenStatus();
                    if (this.onChange) {
                        this.onChange.emit({ name: radioItem.name, value: radioItem.value });
                    }
                }
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (typeof (value) !== 'undefined' && null !== value) {
            this.selectedValue = value;
            this.updateChildrenStatus();
            this.cdr.markForCheck();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._ngModelOnChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._ngModelOnTouched = fn;
    }
}
RadioItemGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'RadioItemGroup, nzm-radio-item-group',
                template: "<ng-content></ng-content>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [RADIO_ITEM_GROUP_VALUE_ACCESSOR]
            }] }
];
/** @nocollapse */
RadioItemGroupComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
RadioItemGroupComponent.propDecorators = {
    radioItems: [{ type: ContentChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => RadioItemComponent)),] }],
    onChange: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype.selectedValue;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype.selectSubscription;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype._ngModelOnChange;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype._ngModelOnTouched;
    /** @type {?} */
    RadioItemGroupComponent.prototype.radioItems;
    /** @type {?} */
    RadioItemGroupComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,
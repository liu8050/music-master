/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation, HostBinding } from '@angular/core';
export class DotIndicatorComponent {
    constructor() {
        this.items = [];
        this._page = 0;
        this._pageCount = 0;
        this.dotStyle = {};
        this.dotActiveStyle = {};
        this.dotColor = 'white';
        this.dotIndicator = true;
    }
    /**
     * @param {?} p
     * @return {?}
     */
    set page(p) {
        this._page = p;
        this.updateSelected();
    }
    /**
     * @param {?} p
     * @return {?}
     */
    set pageCount(p) {
        this._pageCount = p || 0;
        this.updateItems();
    }
    /**
     * @private
     * @return {?}
     */
    updateItems() {
        this.items = new Array(this._pageCount);
        for (let i = 0; i < this._pageCount; i++) {
            this.items[i] = { active: i == this._page };
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateSelected() {
        if (this.items.length != this._pageCount) {
            return this.updateItems();
        }
        if (this.items.length == 0) {
            return;
        }
        for (let i = 0; i < this._pageCount; i++) {
            this.items[i].active = false;
        }
        this.items[this._page].active = true;
    }
}
DotIndicatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'DotIndicator, nzm-dot-indicator',
                template: "<div class=\"am-carousel-wrap\">\n  <div *ngFor=\"let item of items\"\n       class=\"am-carousel-wrap-dot\"\n       [class.am-carousel-wrap-dot-active]=\"item.active\"\n  >\n    <span [ngStyle]=\"item.active ? dotActiveStyle : dotStyle\"></span>\n  </div>\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
DotIndicatorComponent.propDecorators = {
    page: [{ type: Input }],
    pageCount: [{ type: Input }],
    dotStyle: [{ type: Input }],
    dotActiveStyle: [{ type: Input }],
    dotColor: [{ type: Input }],
    dotIndicator: [{ type: HostBinding, args: ['class.dot-indicator',] }]
};
if (false) {
    /** @type {?} */
    DotIndicatorComponent.prototype.items;
    /**
     * @type {?}
     * @private
     */
    DotIndicatorComponent.prototype._page;
    /**
     * @type {?}
     * @private
     */
    DotIndicatorComponent.prototype._pageCount;
    /** @type {?} */
    DotIndicatorComponent.prototype.dotStyle;
    /** @type {?} */
    DotIndicatorComponent.prototype.dotActiveStyle;
    /** @type {?} */
    DotIndicatorComponent.prototype.dotColor;
    /** @type {?} */
    DotIndicatorComponent.prototype.dotIndicator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG90aW5kaWNhdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiY2Fyb3VzZWwvZG90aW5kaWNhdG9yL2RvdGluZGljYXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU9qRixNQUFNLE9BQU8scUJBQXFCO0lBTGxDO1FBTUUsVUFBSyxHQUEwQixFQUFFLENBQUM7UUFFMUIsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUNWLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFhdkIsYUFBUSxHQUFXLEVBQUUsQ0FBQztRQUV0QixtQkFBYyxHQUFXLEVBQUUsQ0FBQztRQUU1QixhQUFRLEdBQUcsT0FBTyxDQUFDO1FBR25CLGlCQUFZLEdBQVksSUFBSSxDQUFDO0lBcUIvQixDQUFDOzs7OztJQXZDQyxJQUNJLElBQUksQ0FBQyxDQUFTO1FBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBQ0QsSUFDSSxTQUFTLENBQUMsQ0FBUztRQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBV08sV0FBVztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDN0M7SUFDSCxDQUFDOzs7OztJQUVPLGNBQWM7UUFDcEIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3hDLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDMUIsT0FBTztTQUNSO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1NBQzlCO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUN2QyxDQUFDOzs7WUFqREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQ0FBaUM7Z0JBQzNDLG9SQUE0QztnQkFDNUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7YUFDdEM7OzttQkFPRSxLQUFLO3dCQUtMLEtBQUs7dUJBS0wsS0FBSzs2QkFFTCxLQUFLO3VCQUVMLEtBQUs7MkJBR0wsV0FBVyxTQUFDLHFCQUFxQjs7OztJQXRCbEMsc0NBQWtDOzs7OztJQUVsQyxzQ0FBa0I7Ozs7O0lBQ2xCLDJDQUF1Qjs7SUFZdkIseUNBQ3NCOztJQUN0QiwrQ0FDNEI7O0lBQzVCLHlDQUNtQjs7SUFFbkIsNkNBQzZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb24sIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ0RvdEluZGljYXRvciwgbnptLWRvdC1pbmRpY2F0b3InLFxuICB0ZW1wbGF0ZVVybDogJy4vZG90aW5kaWNhdG9yLmNvbXBvbmVudC5odG1sJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBEb3RJbmRpY2F0b3JDb21wb25lbnQge1xuICBpdGVtczogeyBhY3RpdmU6IGJvb2xlYW4gfVtdID0gW107XG5cbiAgcHJpdmF0ZSBfcGFnZSA9IDA7XG4gIHByaXZhdGUgX3BhZ2VDb3VudCA9IDA7XG5cbiAgQElucHV0KClcbiAgc2V0IHBhZ2UocDogbnVtYmVyKSB7XG4gICAgdGhpcy5fcGFnZSA9IHA7XG4gICAgdGhpcy51cGRhdGVTZWxlY3RlZCgpO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBwYWdlQ291bnQocDogbnVtYmVyKSB7XG4gICAgdGhpcy5fcGFnZUNvdW50ID0gcCB8fCAwO1xuICAgIHRoaXMudXBkYXRlSXRlbXMoKTtcbiAgfVxuICBASW5wdXQoKVxuICBkb3RTdHlsZTogb2JqZWN0ID0ge307XG4gIEBJbnB1dCgpXG4gIGRvdEFjdGl2ZVN0eWxlOiBvYmplY3QgPSB7fTtcbiAgQElucHV0KClcbiAgZG90Q29sb3IgPSAnd2hpdGUnO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZG90LWluZGljYXRvcicpXG4gIGRvdEluZGljYXRvcjogYm9vbGVhbiA9IHRydWU7XG5cbiAgcHJpdmF0ZSB1cGRhdGVJdGVtcygpIHtcbiAgICB0aGlzLml0ZW1zID0gbmV3IEFycmF5KHRoaXMuX3BhZ2VDb3VudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYWdlQ291bnQ7IGkrKykge1xuICAgICAgdGhpcy5pdGVtc1tpXSA9IHsgYWN0aXZlOiBpID09IHRoaXMuX3BhZ2UgfTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVNlbGVjdGVkKCkge1xuICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCAhPSB0aGlzLl9wYWdlQ291bnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUl0ZW1zKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGFnZUNvdW50OyBpKyspIHtcbiAgICAgIHRoaXMuaXRlbXNbaV0uYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuaXRlbXNbdGhpcy5fcGFnZV0uYWN0aXZlID0gdHJ1ZTtcbiAgfVxufVxuIl19
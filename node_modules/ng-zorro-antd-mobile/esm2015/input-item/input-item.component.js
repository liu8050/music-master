/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, HostBinding, Renderer2, ElementRef, forwardRef, TemplateRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class InputItemComponent {
    /**
     * @param {?} element
     * @param {?} render
     */
    constructor(element, render) {
        this.element = element;
        this.render = render;
        this.prefixCls = 'am-input';
        this.setFocus = {};
        this.pattern = '';
        this.autoFocus = false;
        this.inputType = 'text';
        this.ngTemplate = false;
        this._type = 'text';
        this._defaultValue = '';
        this._placeholder = '';
        this._editable = true;
        this._disabled = false;
        this._clear = false;
        this._error = false;
        this._extra = '';
        this._labelNumber = 5;
        this._updatePlaceholder = false;
        this._prefixListCls = 'am-list';
        this._moneyKeyboardAlign = 'right';
        this._focus = false;
        this._isClear = false;
        this._inputLock = false;
        this.onChange = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onErrorClick = new EventEmitter();
        this.onExtraClick = new EventEmitter();
        this.clsItem = true;
        this.clsDisabled = this._disabled;
        this.clsError = this._error;
        this.clsFocus = this._focus;
        this.clsAndroid = this._focus;
        this._onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this._el = element.nativeElement;
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        if (value && value.length > 0) {
            this.inputType = value;
            if (value === 'bankCard' || value === 'phone') {
                this._type = 'tel';
            }
            else if (value === 'password') {
                this._type = 'password';
            }
            else if (value === 'digit') {
                this._type = 'number';
            }
            else if (value !== 'text' && value !== 'number') {
                this._type = value;
            }
            if (value === 'number') {
                this.pattern = '[0-9]*';
            }
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (typeof v === 'undefined' || v === null) {
            this._value = '';
        }
        else {
            this._value = v;
        }
    }
    /**
     * @return {?}
     */
    get defaultValue() {
        return this._defaultValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultValue(value) {
        this._defaultValue = value;
        if (!this._value) {
            this._value = this._defaultValue;
        }
    }
    /**
     * @return {?}
     */
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set placeholder(value) {
        this._placeholder = value;
    }
    /**
     * @return {?}
     */
    get editable() {
        return this._editable;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set editable(value) {
        this._editable = value;
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = value;
        this.clsDisabled = value;
    }
    /**
     * @return {?}
     */
    get clear() {
        return this._clear;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set clear(value) {
        this._clear = value;
    }
    /**
     * @return {?}
     */
    get maxLength() {
        return this._maxLength;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxLength(value) {
        this._maxLength = value;
    }
    /**
     * @return {?}
     */
    get error() {
        return this._error;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set error(value) {
        this._error = value;
        this.clsError = value;
    }
    /**
     * @return {?}
     */
    get extra() {
        return this._extra;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set extra(value) {
        if (value instanceof TemplateRef) {
            this.ngTemplate = true;
        }
        else {
            this.ngTemplate = false;
        }
        this._extra = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set labelNumber(value) {
        this._labelNumber = value;
        this.setCls();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set updatePlaceholder(value) {
        this._updatePlaceholder = value;
    }
    /**
     * @return {?}
     */
    get prefixListCls() {
        return this._prefixListCls;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set prefixListCls(value) {
        this._prefixListCls = value;
        this.render.addClass(this._el, value + '-item');
        this.render.addClass(this._el, value + '-item-middle');
    }
    /**
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this._name = value;
    }
    /**
     * @return {?}
     */
    get moneyKeyboardAlign() {
        return this._moneyKeyboardAlign;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set moneyKeyboardAlign(value) {
        this._moneyKeyboardAlign = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set locale(value) {
        this._locale = value;
    }
    /**
     * @return {?}
     */
    get fontColor() {
        return this._fontColor;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set fontColor(value) {
        this._fontColor = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set focus(value) {
        if (value && value.focus) {
            this.autoFocus = value.focus;
            if (this._type === 'money') {
                this.setFocus = value;
            }
            else if (this.inputElementRef) {
                this._focus = true;
                this.inputElementRef.nativeElement.focus();
                this.inputFocus('');
            }
        }
    }
    /**
     * @return {?}
     */
    setCls() {
        if (this.lableRef.nativeElement.children.length > 0 ||
            (this.lableRef.nativeElement && this.lableRef.nativeElement.innerText !== '')) {
            this.labelCls = {
                [`${this.prefixCls}-label`]: true,
                [`${this.prefixCls}-label-2`]: this._labelNumber === 2,
                [`${this.prefixCls}-label-3`]: this._labelNumber === 3,
                [`${this.prefixCls}-label-4`]: this._labelNumber === 4,
                [`${this.prefixCls}-label-5`]: this._labelNumber === 5,
                [`${this.prefixCls}-label-6`]: this._labelNumber === 6,
                [`${this.prefixCls}-label-7`]: this._labelNumber === 7
            };
        }
        this.controlCls = { [`${this.prefixCls}-control`]: true };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    inputChange(e) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this._inputLock && this.inputType === 'text') {
                return;
            }
            /** @type {?} */
            let value = e;
            switch (this.inputType) {
                case 'text':
                    break;
                case 'bankCard':
                    value = value.replace(/\D/g, '').replace(/(....)(?=.)/g, '$1 ');
                    break;
                case 'phone':
                    value = value.replace(/\D/g, '').substring(0, 11);
                    /** @type {?} */
                    const valueLen = value.length;
                    if (valueLen > 3 && valueLen < 8) {
                        value = `${value.substr(0, 3)} ${value.substr(3)}`;
                    }
                    else if (valueLen >= 8) {
                        value = `${value.substr(0, 3)} ${value.substr(3, 4)} ${value.substr(7)}`;
                    }
                    break;
                case 'number':
                    value = value.replace(/\D/g, '');
                    break;
                case 'password':
                    break;
                default:
                    this._value = value;
                    break;
            }
            this._value = value;
            if (this._type !== 'money') {
                this.inputElementRef.nativeElement.value = this._value;
            }
            this._onChange(this._value);
            this.onChange.emit(this._value);
        }), 0);
    }
    /**
     * @return {?}
     */
    compositionStart() {
        this._inputLock = true;
    }
    /**
     * @return {?}
     */
    compositionEnd() {
        this._inputLock = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    inputFocus(value) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this._focus = true;
            this.clsFocus = true;
            this.clsAndroid = true;
        }), 100);
        this.onFocus.emit(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    inputBlur(value) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (!this._isClear) {
                this._focus = false;
                this.clsFocus = false;
                this.clsAndroid = false;
                this.onBlur.emit(value);
            }
            this._isClear = false;
        }), 100);
    }
    /**
     * @return {?}
     */
    clearInput() {
        if (this._type !== 'password' && this._updatePlaceholder) {
            this._placeholder = this._value;
        }
        this._value = '';
        this.onChange.emit(this._value);
        this._onChange(this._value);
        this._isClear = true;
        if (this._type !== 'money') {
            this.inputElementRef.nativeElement.value = this._value;
        }
        this.inputFocus(this._value);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    errorClick(e) {
        if (this.onErrorClick) {
            this.onErrorClick.emit(e);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    extraClick(e) {
        if (this.onExtraClick) {
            this.onExtraClick.emit(e);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (typeof value === undefined || value === null) {
            this._value = '';
        }
        else {
            this._value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.inputElementRef && this._type !== 'money' && this._value !== undefined) {
            this.inputElementRef.nativeElement.value = this._value;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setCls();
        this.render.addClass(this._el, this._prefixListCls + '-item');
        this.render.addClass(this._el, this._prefixListCls + '-item-middle');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setCls();
        }), 0);
    }
}
InputItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'InputItem, nzm-input-item',
                template: "<div class=\"{{prefixListCls}}-line\">\n  <div #lableContent [ngClass]=\"labelCls\">\n    <ng-content></ng-content>\n  </div>\n  <div [ngClass]=\"controlCls\">\n    <CustomInput *ngIf=\"type==='money'\"\n                 [value]=\"value\"\n                 [defaultValue]=\"defaultValue\"\n                 [placeholder]=\"placeholder\"\n                 [disabled]=\"disabled\"\n                 [editable]=\"editable\"\n                 [fontColor]=\"fontColor\"\n                 [moneyKeyboardAlign]=\"moneyKeyboardAlign\"\n                 [setFocus]=\"setFocus\"\n                 [maxLength]=\"maxLength\"\n                 (onChange)=\"inputChange($event)\"\n                 (onBlur)=\"inputBlur(value)\"\n                 (onFocus)=\"inputFocus(value)\">\n    </CustomInput>\n    <div *ngIf=\"type!=='money'\">\n      <input #inputElement\n             [type]=\"type\"\n             [name]=\"name\"\n             [ngModel]=\"value\"\n             [defaultValue]=\"defaultValue\"\n             [placeholder]=\"placeholder\"\n             [disabled]=\"disabled\"\n             [readOnly]=\"!editable\"\n             [autofocus]=\"autoFocus\"\n             [maxlength]=\"maxLength\"\n             [pattern]=\"pattern\"\n             [style.color]='fontColor'\n             (ngModelChange)=\"inputChange($event)\"\n             (compositionstart)=\"compositionStart()\"\n             (compositionend)=\"compositionEnd()\"\n             (blur)=\"inputBlur(value)\"\n             (focus)=\"inputFocus(value)\"\n             style=\"outline:none\" />\n    </div>\n  </div>\n  <div  *ngIf=\"clear && editable && !disabled && (value && value.length >0 )\"\n        class=\"{{prefixCls}}-clear\"\n        (click)=\"clearInput()\"\n  ></div>\n  <div *ngIf=\"error\"\n       class=\"{{prefixCls}}-error-extra\"\n       (click)=\"errorClick($event)\"\n  ></div>\n  <div *ngIf=\"extra!==''\"\n       class=\"{{prefixCls}}-extra\"\n       (click)=\"extraClick($event)\">\n    <ng-container *ngIf=\"!ngTemplate\">{{extra}}</ng-container>\n    <ng-template *ngIf=\"ngTemplate\" [ngTemplateOutlet]=\"extra\"></ng-template>\n  </div>\n</div>",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => InputItemComponent)),
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
InputItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
InputItemComponent.propDecorators = {
    lableRef: [{ type: ViewChild, args: ['lableContent',] }],
    inputElementRef: [{ type: ViewChild, args: ['inputElement',] }],
    type: [{ type: Input }],
    value: [{ type: Input }],
    defaultValue: [{ type: Input }],
    placeholder: [{ type: Input }],
    editable: [{ type: Input }],
    disabled: [{ type: Input }],
    clear: [{ type: Input }],
    maxLength: [{ type: Input }],
    error: [{ type: Input }],
    extra: [{ type: Input }],
    labelNumber: [{ type: Input }],
    updatePlaceholder: [{ type: Input }],
    prefixListCls: [{ type: Input }],
    name: [{ type: Input }],
    moneyKeyboardAlign: [{ type: Input }],
    locale: [{ type: Input }],
    fontColor: [{ type: Input }],
    focus: [{ type: Input }],
    onChange: [{ type: Output }],
    onBlur: [{ type: Output }],
    onFocus: [{ type: Output }],
    onErrorClick: [{ type: Output }],
    onExtraClick: [{ type: Output }],
    clsItem: [{ type: HostBinding, args: ['class.am-input-item',] }],
    clsDisabled: [{ type: HostBinding, args: ['class.am-input-disabled',] }],
    clsError: [{ type: HostBinding, args: ['class.am-input-error',] }],
    clsFocus: [{ type: HostBinding, args: ['class.am-input-focus',] }],
    clsAndroid: [{ type: HostBinding, args: ['class.am-input-android,',] }]
};
if (false) {
    /** @type {?} */
    InputItemComponent.prototype.prefixCls;
    /** @type {?} */
    InputItemComponent.prototype.wrapCls;
    /** @type {?} */
    InputItemComponent.prototype.labelCls;
    /** @type {?} */
    InputItemComponent.prototype.controlCls;
    /** @type {?} */
    InputItemComponent.prototype.setFocus;
    /** @type {?} */
    InputItemComponent.prototype.pattern;
    /** @type {?} */
    InputItemComponent.prototype.autoFocus;
    /** @type {?} */
    InputItemComponent.prototype.inputType;
    /** @type {?} */
    InputItemComponent.prototype.ngTemplate;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._el;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._type;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._defaultValue;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._placeholder;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._editable;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._clear;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._maxLength;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._error;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._extra;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._labelNumber;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._updatePlaceholder;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._prefixListCls;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._name;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._moneyKeyboardAlign;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._focus;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._isClear;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._fontColor;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype._inputLock;
    /** @type {?} */
    InputItemComponent.prototype.lableRef;
    /** @type {?} */
    InputItemComponent.prototype.inputElementRef;
    /** @type {?} */
    InputItemComponent.prototype.onChange;
    /** @type {?} */
    InputItemComponent.prototype.onBlur;
    /** @type {?} */
    InputItemComponent.prototype.onFocus;
    /** @type {?} */
    InputItemComponent.prototype.onErrorClick;
    /** @type {?} */
    InputItemComponent.prototype.onExtraClick;
    /** @type {?} */
    InputItemComponent.prototype.clsItem;
    /** @type {?} */
    InputItemComponent.prototype.clsDisabled;
    /** @type {?} */
    InputItemComponent.prototype.clsError;
    /** @type {?} */
    InputItemComponent.prototype.clsFocus;
    /** @type {?} */
    InputItemComponent.prototype.clsAndroid;
    /** @type {?} */
    InputItemComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    InputItemComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,
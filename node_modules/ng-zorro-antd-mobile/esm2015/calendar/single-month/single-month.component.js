/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, HostBinding, Input, ElementRef } from '@angular/core';
import { DateModels } from '../date/DataTypes';
export class CalendarSingleMonthComponent {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.props = (/** @type {?} */ ({
            rowSize: 'normal'
        }));
        this.state = {
            weekComponents: []
        };
        this.singleMonth = true;
        this.genWeek = (/**
         * @param {?} weeksData
         * @param {?} index
         * @return {?}
         */
        (weeksData, index) => {
            const { getDateExtra, monthData, onCellClick, locale, rowSize } = this.props;
            /** @type {?} */
            let rowCls = 'row';
            /** @type {?} */
            let weeksDataList = [];
            if (rowSize === 'xl') {
                rowCls += ' row-xl';
            }
            weeksData.forEach((/**
             * @param {?} day
             * @param {?} dayOfWeek
             * @return {?}
             */
            (day, dayOfWeek) => {
                /** @type {?} */
                const extra = (getDateExtra && getDateExtra(new Date(day.tick))) || {};
                /** @type {?} */
                let info = extra.info;
                /** @type {?} */
                const disable = extra.disable || day.outOfDate;
                /** @type {?} */
                let cls = 'date';
                /** @type {?} */
                let lCls = 'left';
                /** @type {?} */
                let rCls = 'right';
                /** @type {?} */
                let infoCls = 'info';
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    cls += ' grey';
                }
                if (disable) {
                    cls += ' disable';
                }
                else if (info) {
                    cls += ' important';
                }
                if (day.selected) {
                    cls += ' date-selected';
                    /** @type {?} */
                    let styleType = day.selected;
                    switch (styleType) {
                        case DateModels.SelectType.Only:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            break;
                        case DateModels.SelectType.All:
                            info = locale.begin_over;
                            infoCls += ' date-selected';
                            break;
                        case DateModels.SelectType.Start:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = DateModels.SelectType.All;
                            }
                            break;
                        case DateModels.SelectType.Middle:
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                if (day.isLastOfMonth || dayOfWeek === 6) {
                                    styleType = DateModels.SelectType.All;
                                }
                                else {
                                    styleType = DateModels.SelectType.Start;
                                }
                            }
                            else if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = DateModels.SelectType.End;
                            }
                            break;
                        case DateModels.SelectType.End:
                            info = locale.over;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                styleType = DateModels.SelectType.All;
                            }
                            break;
                    }
                    switch (styleType) {
                        case DateModels.SelectType.Single:
                        case DateModels.SelectType.Only:
                        case DateModels.SelectType.All:
                            cls += ' selected-single';
                            break;
                        case DateModels.SelectType.Start:
                            cls += ' selected-start';
                            rCls += ' date-selected';
                            break;
                        case DateModels.SelectType.Middle:
                            cls += ' selected-middle';
                            lCls += ' date-selected';
                            rCls += ' date-selected';
                            break;
                        case DateModels.SelectType.End:
                            cls += ' selected-end';
                            lCls += ' date-selected';
                            break;
                    }
                }
                weeksDataList[dayOfWeek] = {
                    lCls,
                    cls,
                    day,
                    rCls,
                    infoCls,
                    info,
                    extra,
                    disable,
                    onCellClick: onCellClick,
                    monthData
                };
            }));
            this.state.weekComponents[index] = {
                index: index,
                rowCls,
                weeksDataList
            };
        });
        this.updateWeeks = (/**
         * @param {?=} monthData
         * @return {?}
         */
        (monthData) => {
            (monthData || this.props.monthData).weeks.forEach((/**
             * @param {?} week
             * @param {?} index
             * @return {?}
             */
            (week, index) => {
                this.genWeek(week, index);
            }));
        });
        this.setWarpper = (/**
         * @param {?} dom
         * @return {?}
         */
        (dom) => {
            this.wrapperDivDOM = dom;
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this.props = Object.assign({}, this.props, value);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onClickCell(item) {
        !item.disable && item.onCellClick && item.onCellClick(item.day, item.monthData);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setWarpper(this._elementRef.nativeElement);
        this.props.monthData.weeks.forEach((/**
         * @param {?} week
         * @param {?} index
         * @return {?}
         */
        (week, index) => {
            this.genWeek(week, index);
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ref = this.props.ref;
        this.ref(this);
    }
}
CalendarSingleMonthComponent.decorators = [
    { type: Component, args: [{
                selector: 'CalendarSingleMonth, nzm-single-month',
                template: "<div class=\"month-title\">\n  {{props.monthData.title}}\n</div>\n<div class=\"date\">\n  <div *ngFor=\"let row of state.weekComponents;let i = index;\" [ngClass]=\"row.rowCls\">\n    <div *ngFor=\"let cell of row.weeksDataList;let j = index;\"\n         class=\"{{'cell ' + (row.extra && row.extra.cellCls || '')}}\"\n         (click)=\"onClickCell(cell)\"\n    >\n      <div *ngIf=\"row.extra && row.extra.cellRender\">test</div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" class=\"date-wrapper\">\n        <span [ngClass]=\"cell.lCls\"></span>\n        <div [ngClass]=\"cell.cls\">\n          {{cell.day && cell.day.dayOfMonth || ''}}\n        </div>\n        <span [ngClass]=\"cell.rCls\"></span>\n      </div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" [ngClass]=\"cell.infoCls\">\n        {{cell.info}}\n      </div>\n    </div>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
CalendarSingleMonthComponent.ctorParameters = () => [
    { type: ElementRef }
];
CalendarSingleMonthComponent.propDecorators = {
    data: [{ type: Input }],
    singleMonth: [{ type: HostBinding, args: ['class.single-month',] }]
};
if (false) {
    /** @type {?} */
    CalendarSingleMonthComponent.prototype.props;
    /** @type {?} */
    CalendarSingleMonthComponent.prototype.state;
    /** @type {?} */
    CalendarSingleMonthComponent.prototype.ref;
    /** @type {?} */
    CalendarSingleMonthComponent.prototype.wrapperDivDOM;
    /** @type {?} */
    CalendarSingleMonthComponent.prototype.singleMonth;
    /** @type {?} */
    CalendarSingleMonthComponent.prototype.genWeek;
    /** @type {?} */
    CalendarSingleMonthComponent.prototype.updateWeeks;
    /** @type {?} */
    CalendarSingleMonthComponent.prototype.setWarpper;
    /**
     * @type {?}
     * @private
     */
    CalendarSingleMonthComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,
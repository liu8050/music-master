/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, HostBinding } from '@angular/core';
import { zh_CN, en_US } from '../../locale-provider/locale';
export class CalendarTimePickerComponent {
    constructor() {
        this.defaultProps = (/** @type {?} */ ({
            minDate: new Date(0, 0, 0, 0, 0),
            maxDate: new Date(9999, 11, 31, 23, 59, 59),
            defaultValue: new Date(2000, 1, 1, 8),
            mode: 'time',
            datePickerViewLocale: zh_CN
        }));
        this.props = (/** @type {?} */ ({
            minDate: new Date(0, 0, 0, 0, 0),
            maxDate: new Date(9999, 11, 31, 23, 59, 59),
            defaultValue: new Date(2000, 1, 1, 8),
            mode: 'time',
            datePickerViewLocale: zh_CN
        }));
        this.timePicker = true;
        this.onDateChange = (/**
         * @param {?} date
         * @return {?}
         */
        (date) => {
            const { onValueChange } = this.props;
            onValueChange && onValueChange(date.date);
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set propsData(value) {
        this.props = Object.assign({}, this.props, value);
        if (this.props.locale && this.props.locale.today === 'Today') {
            this.props.datePickerViewLocale = en_US;
        }
        else {
            this.props.datePickerViewLocale = zh_CN;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        this.props.title = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.props.value = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set prefixCls(value) {
        this.props.prefixCls = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultValue(value) {
        this.props.defaultValue = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pickerPrefixCls(value) {
        this.props.pickerPrefixCls = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set clientHeight(value) {
        this.props.clientHeight = value;
        /** @type {?} */
        const height = (value && (value * 3) / 8 - 52) || Number.POSITIVE_INFINITY;
        this.selfHeight = (height > 164 || height < 0 ? 164 : height) + 'px';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set onValueChange(value) {
        this.props.onValueChange = value;
    }
    /**
     * @param {?=} date
     * @return {?}
     */
    getMinTime(date) {
        /** @type {?} */
        const minDate = (/** @type {?} */ (this.props.minDate));
        if (!date ||
            date.getFullYear() > minDate.getFullYear() ||
            date.getMonth() > minDate.getMonth() ||
            date.getDate() > minDate.getDate()) {
            return this.defaultProps.minDate;
        }
        return minDate;
    }
    /**
     * @param {?=} date
     * @return {?}
     */
    getMaxTime(date) {
        /** @type {?} */
        const maxDate = (/** @type {?} */ (this.props.maxDate));
        if (!date ||
            date.getFullYear() < maxDate.getFullYear() ||
            date.getMonth() < maxDate.getMonth() ||
            date.getDate() < maxDate.getDate()) {
            return this.defaultProps.maxDate;
        }
        return maxDate;
    }
}
CalendarTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'CalendarTimePicker, nzm-calendar-time-picker',
                template: "<div class=\"title\">{{props.title}}</div>\n<DatePickerView [ngStyle]=\"{height: selfHeight, overflow: 'hidden'}\"\n                [mode]=\"props.mode\"\n                [value]=\"props.value\"\n                [locale]=\"props.datePickerViewLocale\"\n                [minDate]=\"getMinTime(props.value || props.defaultValue || undefined)\"\n                [maxDate]=\"getMaxTime(props.value || props.defaultValue || undefined)\"\n                (onValueChange)=\"onDateChange($event)\"\n></DatePickerView>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
CalendarTimePickerComponent.ctorParameters = () => [];
CalendarTimePickerComponent.propDecorators = {
    propsData: [{ type: Input }],
    title: [{ type: Input }],
    value: [{ type: Input }],
    prefixCls: [{ type: Input }],
    defaultValue: [{ type: Input }],
    pickerPrefixCls: [{ type: Input }],
    clientHeight: [{ type: Input }],
    onValueChange: [{ type: Input }],
    timePicker: [{ type: HostBinding, args: ['class.time-picker',] }]
};
if (false) {
    /** @type {?} */
    CalendarTimePickerComponent.prototype.defaultProps;
    /** @type {?} */
    CalendarTimePickerComponent.prototype.props;
    /** @type {?} */
    CalendarTimePickerComponent.prototype.selfHeight;
    /** @type {?} */
    CalendarTimePickerComponent.prototype.timePicker;
    /** @type {?} */
    CalendarTimePickerComponent.prototype.onDateChange;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, ViewEncapsulation, Input, ElementRef, ViewChild } from '@angular/core';
import { CalendarDatePickerBaseComponent } from './datepicker.base.component';
export class CalendarDatePickerComponent extends CalendarDatePickerBaseComponent {
    constructor() {
        super();
        this.transform = '';
        this._initDelta = 0;
        this._lastY = 0;
        this._delta = this._initDelta;
        this.amCalendar = true;
        this.datePicker = true;
        this.genMonthComponent = (/**
         * @param {?=} data
         * @return {?}
         */
        (data) => {
            if (!data)
                return;
            return {
                monthData: data,
                locale: this.props.locale,
                rowSize: this.props.rowSize,
                onCellClick: this.baseOnCellClick,
                getDateExtra: this.props.getDateExtra,
                ref: (/**
                 * @param {?} dom
                 * @return {?}
                 */
                dom => {
                    data.componentRef = dom || data.componentRef || undefined;
                    data.updateLayout = (/**
                     * @return {?}
                     */
                    () => {
                        this.computeHeight(data, dom);
                    });
                    data.updateLayout();
                })
            };
        });
        this.computeHeight = (/**
         * @param {?} data
         * @param {?} singleMonth
         * @return {?}
         */
        (data, singleMonth) => {
            if (singleMonth && singleMonth.wrapperDivDOM) {
                if (!data.height && !singleMonth.wrapperDivDOM.clientHeight) {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => this.computeHeight(data, singleMonth)), 500);
                    return;
                }
                data.height = singleMonth.wrapperDivDOM.clientHeight || data.height || 0;
                data.y = singleMonth.wrapperDivDOM.offsetTop || data.y || 0;
            }
        });
        this.setLayout = (/**
         * @param {?} dom
         * @return {?}
         */
        (dom) => {
            if (dom) {
                const { onLayout } = this.props;
                onLayout && onLayout(dom.clientHeight);
                /** @type {?} */
                const scrollHandler = this.createOnScroll();
                dom.onscroll = (/**
                 * @param {?} evt
                 * @return {?}
                 */
                evt => {
                    scrollHandler({
                        client: dom.clientHeight,
                        full: ((/** @type {?} */ (evt.currentTarget))).clientHeight,
                        top: ((/** @type {?} */ (evt.currentTarget))).scrollTop
                    });
                });
            }
        });
        this.setPanel = (/**
         * @param {?} dom
         * @return {?}
         */
        (dom) => {
            this._panel = dom;
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set onCellClick(value) {
        this.props.onCellClick = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set endDate(value) {
        /** @type {?} */
        const oldProps = Object.assign({}, this.props);
        this.props.endDate = value;
        this.receiveProps(oldProps, this.props);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startDate(value) {
        /** @type {?} */
        const oldProps = Object.assign({}, this.props);
        this.props.startDate = value;
        this.receiveProps(oldProps, this.props);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set propsData(value) {
        this.props = Object.assign({}, this.props, value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set onSelectHasDisableDate(value) {
        this.props.onSelectHasDisableDate = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set onLayout(value) {
        this.props.onLayout = value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchStart(event) {
        this._lastY = event.touches[0].screenY || event.touches[0].pageY;
        this._delta = this._initDelta;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchMove(event) {
        /** @type {?} */
        const ele = event.currentTarget;
        /** @type {?} */
        const isReachTop = ele.scrollTop === 0;
        if (isReachTop) {
            this._delta = (event.touches[0].screenY || event.touches[0].pageY) - this._lastY;
            if (this._delta > 0) {
                event.preventDefault();
                if (this._delta > 80) {
                    this._delta = 80;
                }
            }
            else {
                this._delta = 0;
            }
            this.setTransform(this._panel.style, `translate3d(0,${this._delta}px,0)`);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchEnd(event) {
        this.onFinish();
    }
    /**
     * @return {?}
     */
    onFinish() {
        if (this._delta > 40 && this.canLoadPrev()) {
            this.genMonthData(this.state.months[0].firstDate, -1);
            this.visibleMonth = this.state.months.slice(0, this.props.initalMonths);
            this.state.months.forEach((/**
             * @param {?} m
             * @return {?}
             */
            m => {
                m.updateLayout && m.updateLayout();
            }));
        }
        this.setTransform(this._panel.style, `translate3d(0,0,0)`);
        this.setTransition(this._panel.style, '.3s');
        setTimeout((/**
         * @return {?}
         */
        () => {
            this._panel && this.setTransition(this._panel.style, '');
        }), 300);
    }
    /**
     * @param {?} nodeStyle
     * @param {?} value
     * @return {?}
     */
    setTransform(nodeStyle, value) {
        this.transform = value;
        nodeStyle.transform = value;
        nodeStyle.webkitTransform = value;
    }
    /**
     * @param {?} nodeStyle
     * @param {?} value
     * @return {?}
     */
    setTransition(nodeStyle, value) {
        nodeStyle.transition = value;
        nodeStyle.webkitTransition = value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
        this.setLayout(this.layoutDom.nativeElement);
        this.setPanel(this.panelDom.nativeElement);
    }
}
CalendarDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'CalendarDatePicker, nzm-calendar-date-picker',
                template: "<CalendarWeekPanel [locale]=\"props.locale\"></CalendarWeekPanel>\n<div #layout\n     class=\"wrapper\"\n     style=\"overflow-x:hidden;overflow-y:visible;-webkit-overflow-scrolling:touch;\"\n     (touchstart)=\"onTouchStart($event)\"\n     (touchmove)=\"onTouchMove($event)\"\n     (touchend)=\"onTouchEnd($event)\"\n>\n  <div #panel [ngStyle]=\"{transform: transform}\">\n    <div *ngIf=\"canLoadPrev()\" class=\"load-tip\">{{props.locale.loadPrevMonth}}</div>\n    <div class=\"months\">\n      <CalendarSingleMonth *ngFor=\"let item of visibleMonth;let i = index;\"\n                   style=\"display: block;\"\n                   [data]=\"item.component\"\n      ></CalendarSingleMonth>\n    </div>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
CalendarDatePickerComponent.ctorParameters = () => [];
CalendarDatePickerComponent.propDecorators = {
    layoutDom: [{ type: ViewChild, args: ['layout',] }],
    panelDom: [{ type: ViewChild, args: ['panel',] }],
    onCellClick: [{ type: Input }],
    endDate: [{ type: Input }],
    startDate: [{ type: Input }],
    propsData: [{ type: Input }],
    onSelectHasDisableDate: [{ type: Input }],
    onLayout: [{ type: Input }],
    amCalendar: [{ type: HostBinding, args: ['class.am-calendar',] }],
    datePicker: [{ type: HostBinding, args: ['class.date-picker',] }]
};
if (false) {
    /** @type {?} */
    CalendarDatePickerComponent.prototype.transform;
    /**
     * @type {?}
     * @private
     */
    CalendarDatePickerComponent.prototype._panel;
    /**
     * @type {?}
     * @private
     */
    CalendarDatePickerComponent.prototype._initDelta;
    /**
     * @type {?}
     * @private
     */
    CalendarDatePickerComponent.prototype._lastY;
    /**
     * @type {?}
     * @private
     */
    CalendarDatePickerComponent.prototype._delta;
    /** @type {?} */
    CalendarDatePickerComponent.prototype.layoutDom;
    /** @type {?} */
    CalendarDatePickerComponent.prototype.panelDom;
    /** @type {?} */
    CalendarDatePickerComponent.prototype.amCalendar;
    /** @type {?} */
    CalendarDatePickerComponent.prototype.datePicker;
    /** @type {?} */
    CalendarDatePickerComponent.prototype.genMonthComponent;
    /** @type {?} */
    CalendarDatePickerComponent.prototype.computeHeight;
    /** @type {?} */
    CalendarDatePickerComponent.prototype.setLayout;
    /** @type {?} */
    CalendarDatePickerComponent.prototype.setPanel;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DateModels } from '../date/DataTypes';
import { formatDate } from '../util';
import defaultLocale from '../locale/zh_CN';
/**
 * @record
 */
export function DatepickerStateType() { }
if (false) {
    /** @type {?} */
    DatepickerStateType.prototype.months;
}
export class CalendarDatePickerBaseComponent {
    constructor() {
        this.props = (/** @type {?} */ ({
            prefixCls: 'rmc-calendar',
            infinite: false,
            infiniteOpt: false,
            defaultDate: new Date(),
            initalMonths: 6,
            locale: defaultLocale
        }));
        this.state = {
            months: []
        };
        this.visibleMonth = [];
        this.getDateWithoutTime = (/**
         * @param {?=} date
         * @return {?}
         */
        (date) => {
            if (!date)
                return 0;
            return +new Date(date.getFullYear(), date.getMonth(), date.getDate());
        });
        this.genWeekData = (/**
         * @param {?} firstDate
         * @return {?}
         */
        (firstDate) => {
            /** @type {?} */
            const minDateTime = this.getDateWithoutTime(this.props.minDate);
            /** @type {?} */
            const maxDateTime = this.getDateWithoutTime(this.props.maxDate) || Number.POSITIVE_INFINITY;
            /** @type {?} */
            const weeks = [];
            /** @type {?} */
            const nextMonth = this.getMonthDate(firstDate, 1).firstDate;
            /** @type {?} */
            let currentDay = firstDate;
            /** @type {?} */
            let currentWeek = [];
            weeks.push(currentWeek);
            /** @type {?} */
            let startWeekday = currentDay.getDay();
            if (startWeekday > 0) {
                for (let i = 0; i < startWeekday; i++) {
                    currentWeek.push((/** @type {?} */ ({})));
                }
            }
            while (currentDay < nextMonth) {
                if (currentWeek.length === 7) {
                    currentWeek = [];
                    weeks.push(currentWeek);
                }
                /** @type {?} */
                const dayOfMonth = currentDay.getDate();
                /** @type {?} */
                const tick = +currentDay;
                currentWeek.push({
                    tick,
                    dayOfMonth,
                    selected: DateModels.SelectType.None,
                    isFirstOfMonth: dayOfMonth === 1,
                    isLastOfMonth: false,
                    outOfDate: tick < minDateTime || tick > maxDateTime
                });
                currentDay = new Date(currentDay.getTime() + 3600 * 24 * 1000);
            }
            currentWeek[currentWeek.length - 1].isLastOfMonth = true;
            return weeks;
        });
        this.selectDateRange = (/**
         * @param {?} startDate
         * @param {?=} endDate
         * @param {?=} clear
         * @return {?}
         */
        (startDate, endDate, clear = false) => {
            const { getDateExtra, type, onSelectHasDisableDate } = this.props;
            if (type === 'one') {
                endDate = undefined;
            }
            /** @type {?} */
            const time1 = this.getDateWithoutTime(startDate);
            /** @type {?} */
            const time2 = this.getDateWithoutTime(endDate);
            /** @type {?} */
            const startDateTick = !time2 || time1 < time2 ? time1 : time2;
            /** @type {?} */
            const endDateTick = time2 && time1 > time2 ? time1 : time2;
            /** @type {?} */
            const startMonthDate = this.getMonthDate(new Date(startDateTick)).firstDate;
            /** @type {?} */
            const endMonthDate = endDateTick ? new Date(endDateTick) : this.getMonthDate(new Date(startDateTick)).lastDate;
            /** @type {?} */
            let unuseable = [];
            /** @type {?} */
            let needUpdate = false;
            this.state.months
                .filter((/**
             * @param {?} m
             * @return {?}
             */
            m => {
                return m.firstDate >= startMonthDate && m.firstDate <= endMonthDate;
            }))
                .forEach((/**
             * @param {?} m
             * @return {?}
             */
            m => {
                m.weeks.forEach((/**
                 * @param {?} w
                 * @return {?}
                 */
                w => w
                    .filter((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    if (!endDateTick) {
                        return d.tick && this.inDate(startDateTick, d.tick);
                    }
                    else {
                        return d.tick && d.tick >= startDateTick && d.tick <= endDateTick;
                    }
                }))
                    .forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    const oldValue = d.selected;
                    if (clear) {
                        d.selected = DateModels.SelectType.None;
                    }
                    else {
                        /** @type {?} */
                        const info = (getDateExtra && getDateExtra(new Date(d.tick))) || {};
                        if (d.outOfDate || info.disable) {
                            unuseable.push(d.tick);
                        }
                        if (this.inDate(startDateTick, d.tick)) {
                            if (type === 'one') {
                                d.selected = DateModels.SelectType.Single;
                            }
                            else if (!endDateTick) {
                                d.selected = DateModels.SelectType.Only;
                            }
                            else if (startDateTick !== endDateTick) {
                                d.selected = DateModels.SelectType.Start;
                            }
                            else {
                                d.selected = DateModels.SelectType.All;
                            }
                        }
                        else if (this.inDate(endDateTick, d.tick)) {
                            d.selected = DateModels.SelectType.End;
                        }
                        else {
                            d.selected = DateModels.SelectType.Middle;
                        }
                    }
                    needUpdate = needUpdate || d.selected !== oldValue;
                }))));
                if (needUpdate && m.componentRef) {
                    m.componentRef.updateWeeks();
                }
            }));
            if (unuseable.length > 0) {
                if (onSelectHasDisableDate) {
                    onSelectHasDisableDate(unuseable.map((/**
                     * @param {?} tick
                     * @return {?}
                     */
                    tick => new Date(tick))));
                }
                else {
                    console.warn('Unusable date. You can handle by onSelectHasDisableDate.', unuseable);
                }
            }
        });
        this.computeVisible = (/**
         * @param {?} clientHeight
         * @param {?} scrollTop
         * @return {?}
         */
        (clientHeight, scrollTop) => {
            /** @type {?} */
            let needUpdate = false;
            /** @type {?} */
            const MAX_VIEW_PORT = clientHeight * 2;
            /** @type {?} */
            const MIN_VIEW_PORT = clientHeight;
            // 大缓冲区外过滤规则
            /** @type {?} */
            const filterFunc = (/**
             * @param {?} vm
             * @return {?}
             */
            (vm) => vm.y &&
                vm.height &&
                (vm.y + vm.height > scrollTop - MAX_VIEW_PORT && vm.y < scrollTop + clientHeight + MAX_VIEW_PORT));
            if (this.props.infiniteOpt && this.visibleMonth.length > 12) {
                this.visibleMonth = this.visibleMonth.filter(filterFunc).sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => +a.firstDate - +b.firstDate));
            }
            // 当小缓冲区不满时填充
            if (this.visibleMonth.length > 0) {
                /** @type {?} */
                const last = this.visibleMonth[this.visibleMonth.length - 1];
                if (last.y !== undefined && last.height && last.y + last.height < scrollTop + clientHeight + MIN_VIEW_PORT) {
                    /** @type {?} */
                    const lastIndex = this.state.months.indexOf(last);
                    for (let i = 1; i <= 2; i++) {
                        /** @type {?} */
                        const index = lastIndex + i;
                        if (index < this.state.months.length && this.visibleMonth.indexOf(this.state.months[index]) < 0) {
                            this.visibleMonth.push(this.state.months[index]);
                        }
                        else {
                            this.canLoadNext() && this.genMonthData(undefined, 1);
                        }
                    }
                    needUpdate = true;
                }
                /** @type {?} */
                const first = this.visibleMonth[0];
                if (first.y !== undefined && first.height && first.y > scrollTop - MIN_VIEW_PORT) {
                    /** @type {?} */
                    const firstIndex = this.state.months.indexOf(first);
                    for (let i = 1; i <= 2; i++) {
                        /** @type {?} */
                        const index = firstIndex - i;
                        if (index >= 0 && this.visibleMonth.indexOf(this.state.months[index]) < 0) {
                            this.visibleMonth.unshift(this.state.months[index]);
                            needUpdate = true;
                        }
                    }
                }
            }
            else if (this.state.months.length > 0) {
                this.visibleMonth = this.state.months.filter(filterFunc);
                needUpdate = true;
            }
            return needUpdate;
        });
        this.createOnScroll = (/**
         * @return {?}
         */
        () => {
            // let timer: any;
            /** @type {?} */
            let clientHeight = 0;
            /** @type {?} */
            let scrollTop = 0;
            return (/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                const { client, top } = data;
                clientHeight = client;
                scrollTop = top;
                this.computeVisible(clientHeight, scrollTop);
                // 以上方法目前无问题，如果后续有性能问题，改用如下方法，但以下方法会导致刷新稍微延迟现象
                // if (timer) {
                //   return;
                // }
                //
                // timer = setTimeout(() => {
                //   timer = undefined;
                //
                //   if (this.computeVisible(clientHeight, scrollTop)) {
                //     console.log('update dom');
                //   }
                // }, 50);
            });
        });
        this.baseOnCellClick = (/**
         * @param {?} day
         * @return {?}
         */
        (day) => {
            if (!day.tick)
                return;
            this.props.onCellClick && this.props.onCellClick(new Date(day.tick));
        });
    }
    /**
     * @return {?}
     */
    init() {
        const { initalMonths = 6, defaultDate } = this.props;
        for (let i = 0; i < initalMonths; i++) {
            this.canLoadNext() && this.genMonthData(defaultDate, i);
        }
        this.visibleMonth = [...this.state.months];
    }
    /**
     * @param {?} oldValue
     * @param {?} newValue
     * @return {?}
     */
    receiveProps(oldValue, newValue) {
        if (oldValue && newValue) {
            if (oldValue.startDate !== newValue.startDate || oldValue.endDate !== newValue.endDate) {
                if (oldValue.startDate) {
                    this.selectDateRange(oldValue.startDate, oldValue.endDate, true);
                }
                if (newValue.startDate) {
                    this.selectDateRange(newValue.startDate, newValue.endDate);
                }
            }
        }
    }
    /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    getMonthDate(date = new Date(), addMonth = 0) {
        /** @type {?} */
        const y = date.getFullYear();
        /** @type {?} */
        const m = date.getMonth();
        return {
            firstDate: new Date(y, m + addMonth, 1),
            lastDate: new Date(y, m + 1 + addMonth, 0)
        };
    }
    /**
     * @return {?}
     */
    canLoadPrev() {
        const { minDate } = this.props;
        return (!minDate ||
            this.state.months.length <= 0 ||
            +this.getMonthDate(minDate).firstDate < +this.state.months[0].firstDate);
    }
    /**
     * @return {?}
     */
    canLoadNext() {
        const { maxDate } = this.props;
        return (!maxDate ||
            this.state.months.length <= 0 ||
            +this.getMonthDate(maxDate).firstDate > +this.state.months[this.state.months.length - 1].firstDate);
    }
    /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    genMonthData(date, addMonth = 0) {
        if (!date) {
            date = addMonth >= 0 ? this.state.months[this.state.months.length - 1].firstDate : this.state.months[0].firstDate;
        }
        if (!date) {
            date = new Date();
        }
        const { locale } = this.props;
        const { firstDate, lastDate } = this.getMonthDate(date, addMonth);
        /** @type {?} */
        const weeks = this.genWeekData(firstDate);
        /** @type {?} */
        const title = formatDate(firstDate, locale ? locale.monthTitle : 'yyyy/MM', this.props.locale);
        /** @type {?} */
        const data = (/** @type {?} */ ({
            title,
            firstDate,
            lastDate,
            weeks
        }));
        data.component = this.genMonthComponent(data);
        if (addMonth >= 0) {
            this.state.months.push(data);
        }
        else {
            this.state.months.unshift(data);
        }
        const { startDate, endDate } = this.props;
        if (startDate) {
            this.selectDateRange(startDate, endDate);
        }
        return data;
    }
    /**
     * @param {?} date
     * @param {?} tick
     * @return {?}
     */
    inDate(date, tick) {
        return date <= tick && tick < date + 24 * 3600000;
    }
}
if (false) {
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.props;
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.state;
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.visibleMonth;
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.genMonthComponent;
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.getDateWithoutTime;
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.genWeekData;
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.selectDateRange;
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.computeVisible;
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.createOnScroll;
    /** @type {?} */
    CalendarDatePickerBaseComponent.prototype.baseOnCellClick;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiY2FsZW5kYXIvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFL0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNyQyxPQUFPLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUU1Qyx5Q0FFQzs7O0lBREMscUNBQStCOztBQUdqQyxNQUFNLE9BQU8sK0JBQStCO0lBaUIxQztRQWhCQSxVQUFLLEdBQUcsbUJBQUE7WUFDTixTQUFTLEVBQUUsY0FBYztZQUN6QixRQUFRLEVBQUUsS0FBSztZQUNmLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLFdBQVcsRUFBRSxJQUFJLElBQUksRUFBRTtZQUN2QixZQUFZLEVBQUUsQ0FBQztZQUNmLE1BQU0sRUFBRSxhQUFhO1NBQ3RCLEVBQXVCLENBQUM7UUFFekIsVUFBSyxHQUFRO1lBQ1gsTUFBTSxFQUFFLEVBQUU7U0FDWCxDQUFDO1FBRUYsaUJBQVksR0FBMkIsRUFBRSxDQUFDO1FBcUQxQyx1QkFBa0I7Ozs7UUFBRyxDQUFDLElBQVcsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxJQUFJO2dCQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsRUFBQztRQUVGLGdCQUFXOzs7O1FBQUcsQ0FBQyxTQUFlLEVBQUUsRUFBRTs7a0JBQzFCLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxD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QUNSLEtBQUs7U0FDTixFQUF3QjtRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxJQUFJLFFBQVEsSUFBSSxDQUFDLEVBQUU7WUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7Y0FDSyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSztRQUN6QyxJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsSUFBWSxFQUFFLElBQVk7UUFDL0IsT0FBTyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUNwRCxDQUFDO0NBMkpGOzs7SUF2U0MsZ0RBT3lCOztJQUV6QixnREFFRTs7SUFFRix1REFBMEM7O0lBQzFDLDREQUFnQzs7SUFvRGhDLDZEQUdFOztJQUVGLHNEQW1DRTs7SUFvQ0YsMERBb0VFOztJQUVGLHlEQWdERTs7SUFFRix5REEwQkU7O0lBRUYsMERBR0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRlTW9kZWxzIH0gZnJvbSAnLi4vZGF0ZS9EYXRhVHlwZXMnO1xuaW1wb3J0IHsgRGF0ZXBpY2tlclByb3BzVHlwZSB9IGZyb20gJy4vZGF0ZXBpY2tlci5wcm9wcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSAnLi4vbG9jYWxlL3poX0NOJztcblxuZXhwb3J0IGludGVyZmFjZSBEYXRlcGlja2VyU3RhdGVUeXBlIHtcbiAgbW9udGhzOiBEYXRlTW9kZWxzLk1vbnRoRGF0YVtdO1xufVxuXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJEYXRlUGlja2VyQmFzZUNvbXBvbmVudCB7XG4gIHByb3BzID0ge1xuICAgIHByZWZpeENsczogJ3JtYy1jYWxlbmRhcicsXG4gICAgaW5maW5pdGU6IGZhbHNlLFxuICAgIGluZmluaXRlT3B0OiBmYWxzZSxcbiAgICBkZWZhdWx0RGF0ZTogbmV3IERhdGUoKSxcbiAgICBpbml0YWxNb250aHM6IDYsXG4gICAgbG9jYWxlOiBkZWZhdWx0TG9jYWxlXG4gIH0gYXMgRGF0ZXBpY2tlclByb3BzVHlwZTtcblxuICBzdGF0ZTogYW55ID0ge1xuICAgIG1vbnRoczogW11cbiAgfTtcblxuICB2aXNpYmxlTW9udGg6IERhdGVNb2RlbHMuTW9udGhEYXRhW10gPSBbXTtcbiAgZ2VuTW9udGhDb21wb25lbnQ6IChkYXRhKSA9PiB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgaW5pdCgpIHtcbiAgICBjb25zdCB7IGluaXRhbE1vbnRocyA9IDYsIGRlZmF1bHREYXRlIH0gPSB0aGlzLnByb3BzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5pdGFsTW9udGhzOyBpKyspIHtcbiAgICAgIHRoaXMuY2FuTG9hZE5leHQoKSAmJiB0aGlzLmdlbk1vbnRoRGF0YShkZWZhdWx0RGF0ZSwgaSk7XG4gICAgfVxuICAgIHRoaXMudmlzaWJsZU1vbnRoID0gWy4uLnRoaXMuc3RhdGUubW9udGhzXTtcbiAgfVxuXG4gIHJlY2VpdmVQcm9wcyhvbGRWYWx1ZTogRGF0ZXBpY2tlclByb3BzVHlwZSwgbmV3VmFsdWU6IERhdGVwaWNrZXJQcm9wc1R5cGUpIHtcbiAgICBpZiAob2xkVmFsdWUgJiYgbmV3VmFsdWUpIHtcbiAgICAgIGlmIChvbGRWYWx1ZS5zdGFydERhdGUgIT09IG5ld1ZhbHVlLnN0YXJ0RGF0ZSB8fCBvbGRWYWx1ZS5lbmREYXRlICE9PSBuZXdWYWx1ZS5lbmREYXRlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZS5zdGFydERhdGUpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdERhdGVSYW5nZShvbGRWYWx1ZS5zdGFydERhdGUsIG9sZFZhbHVlLmVuZERhdGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdWYWx1ZS5zdGFydERhdGUpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdERhdGVSYW5nZShuZXdWYWx1ZS5zdGFydERhdGUsIG5ld1ZhbHVlLmVuZERhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0TW9udGhEYXRlKGRhdGUgPSBuZXcgRGF0ZSgpLCBhZGRNb250aCA9IDApIHtcbiAgICBjb25zdCB5ID0gZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgbSA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgICByZXR1cm4ge1xuICAgICAgZmlyc3REYXRlOiBuZXcgRGF0ZSh5LCBtICsgYWRkTW9udGgsIDEpLFxuICAgICAgbGFzdERhdGU6IG5ldyBEYXRlKHksIG0gKyAxICsgYWRkTW9udGgsIDApXG4gICAgfTtcbiAgfVxuXG4gIGNhbkxvYWRQcmV2KCkge1xuICAgIGNvbnN0IHsgbWluRGF0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgIW1pbkRhdGUgfHxcbiAgICAgIHRoaXMuc3RhdGUubW9udGhzLmxlbmd0aCA8PSAwIHx8XG4gICAgICArdGhpcy5nZXRNb250aERhdGUobWluRGF0ZSkuZmlyc3REYXRlIDwgK3RoaXMuc3RhdGUubW9udGhzWzBdLmZpcnN0RGF0ZVxuICAgICk7XG4gIH1cblxuICBjYW5Mb2FkTmV4dCgpIHtcbiAgICBjb25zdCB7IG1heERhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgICFtYXhEYXRlIHx8XG4gICAgICB0aGlzLnN0YXRlLm1vbnRocy5sZW5ndGggPD0gMCB8fFxuICAgICAgK3RoaXMuZ2V0TW9udGhEYXRlKG1heERhdGUpLmZpcnN0RGF0ZSA+ICt0aGlzLnN0YXRlLm1vbnRoc1t0aGlzLnN0YXRlLm1vbnRocy5sZW5ndGggLSAxXS5maXJzdERhdGVcbiAgICApO1xuICB9XG5cbiAgZ2V0RGF0ZVdpdGhvdXRUaW1lID0gKGRhdGU/OiBEYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSByZXR1cm4gMDtcbiAgICByZXR1cm4gK25ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSk7XG4gIH07XG5cbiAgZ2VuV2Vla0RhdGEgPSAoZmlyc3REYXRlOiBEYXRlKSA9PiB7XG4gICAgY29uc3QgbWluRGF0ZVRpbWUgPSB0aGlzLmdldERhdGVXaXRob3V0VGltZSh0aGlzLnByb3BzLm1pbkRhdGUpO1xuICAgIGNvbnN0IG1heERhdGVUaW1lID0gdGhpcy5nZXREYXRlV2l0aG91dFRpbWUodGhpcy5wcm9wcy5tYXhEYXRlKSB8fCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cbiAgICBjb25zdCB3ZWVrczogRGF0ZU1vZGVscy5DZWxsRGF0YVtdW10gPSBbXTtcbiAgICBjb25zdCBuZXh0TW9udGggPSB0aGlzLmdldE1vbnRoRGF0ZShmaXJzdERhdGUsIDEpLmZpcnN0RGF0ZTtcbiAgICBsZXQgY3VycmVudERheSA9IGZpcnN0RGF0ZTtcbiAgICBsZXQgY3VycmVudFdlZWs6IERhdGVNb2RlbHMuQ2VsbERhdGFbXSA9IFtdO1xuICAgIHdlZWtzLnB1c2goY3VycmVudFdlZWspO1xuXG4gICAgbGV0IHN0YXJ0V2Vla2RheSA9IGN1cnJlbnREYXkuZ2V0RGF5KCk7XG4gICAgaWYgKHN0YXJ0V2Vla2RheSA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhcnRXZWVrZGF5OyBpKyspIHtcbiAgICAgICAgY3VycmVudFdlZWsucHVzaCh7fSBhcyBEYXRlTW9kZWxzLkNlbGxEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKGN1cnJlbnREYXkgPCBuZXh0TW9udGgpIHtcbiAgICAgIGlmIChjdXJyZW50V2Vlay5sZW5ndGggPT09IDcpIHtcbiAgICAgICAgY3VycmVudFdlZWsgPSBbXTtcbiAgICAgICAgd2Vla3MucHVzaChjdXJyZW50V2Vlayk7XG4gICAgICB9XG4gICAgICBjb25zdCBkYXlPZk1vbnRoID0gY3VycmVudERheS5nZXREYXRlKCk7XG4gICAgICBjb25zdCB0aWNrID0gK2N1cnJlbnREYXk7XG4gICAgICBjdXJyZW50V2Vlay5wdXNoKHtcbiAgICAgICAgdGljayxcbiAgICAgICAgZGF5T2ZNb250aCxcbiAgICAgICAgc2VsZWN0ZWQ6IERhdGVNb2RlbHMuU2VsZWN0VHlwZS5Ob25lLFxuICAgICAgICBpc0ZpcnN0T2ZNb250aDogZGF5T2ZNb250aCA9PT0gMSxcbiAgICAgICAgaXNMYXN0T2ZNb250aDogZmFsc2UsXG4gICAgICAgIG91dE9mRGF0ZTogdGljayA8IG1pbkRhdGVUaW1lIHx8IHRpY2sgPiBtYXhEYXRlVGltZVxuICAgICAgfSk7XG4gICAgICBjdXJyZW50RGF5ID0gbmV3IERhdGUoY3VycmVudERheS5nZXRUaW1lKCkgKyAzNjAwICogMjQgKiAxMDAwKTtcbiAgICB9XG4gICAgY3VycmVudFdlZWtbY3VycmVudFdlZWsubGVuZ3RoIC0gMV0uaXNMYXN0T2ZNb250aCA9IHRydWU7XG4gICAgcmV0dXJuIHdlZWtzO1xuICB9O1xuXG4gIGdlbk1vbnRoRGF0YShkYXRlPzogRGF0ZSwgYWRkTW9udGg6IG51bWJlciA9IDApIHtcbiAgICBpZiAoIWRhdGUpIHtcbiAgICAgIGRhdGUgPSBhZGRNb250aCA+PSAwID8gdGhpcy5zdGF0ZS5tb250aHNbdGhpcy5zdGF0ZS5tb250aHMubGVuZ3RoIC0gMV0uZmlyc3REYXRlIDogdGhpcy5zdGF0ZS5tb250aHNbMF0uZmlyc3REYXRlO1xuICAgIH1cbiAgICBpZiAoIWRhdGUpIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIH1cbiAgICBjb25zdCB7IGxvY2FsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGZpcnN0RGF0ZSwgbGFzdERhdGUgfSA9IHRoaXMuZ2V0TW9udGhEYXRlKGRhdGUsIGFkZE1vbnRoKTtcbiAgICBjb25zdCB3ZWVrcyA9IHRoaXMuZ2VuV2Vla0RhdGEoZmlyc3REYXRlKTtcbiAgICBjb25zdCB0aXRsZSA9IGZvcm1hdERhdGUoZmlyc3REYXRlLCBsb2NhbGUgPyBsb2NhbGUubW9udGhUaXRsZSA6ICd5eXl5L01NJywgdGhpcy5wcm9wcy5sb2NhbGUpO1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB0aXRsZSxcbiAgICAgIGZpcnN0RGF0ZSxcbiAgICAgIGxhc3REYXRlLFxuICAgICAgd2Vla3NcbiAgICB9IGFzIERhdGVNb2RlbHMuTW9udGhEYXRhO1xuICAgIGRhdGEuY29tcG9uZW50ID0gdGhpcy5nZW5Nb250aENvbXBvbmVudChkYXRhKTtcbiAgICBpZiAoYWRkTW9udGggPj0gMCkge1xuICAgICAgdGhpcy5zdGF0ZS5tb250aHMucHVzaChkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZS5tb250aHMudW5zaGlmdChkYXRhKTtcbiAgICB9XG4gICAgY29uc3QgeyBzdGFydERhdGUsIGVuZERhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKHN0YXJ0RGF0ZSkge1xuICAgICAgdGhpcy5zZWxlY3REYXRlUmFuZ2Uoc3RhcnREYXRlLCBlbmREYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpbkRhdGUoZGF0ZTogbnVtYmVyLCB0aWNrOiBudW1iZXIpIHtcbiAgICByZXR1cm4gZGF0ZSA8PSB0aWNrICYmIHRpY2sgPCBkYXRlICsgMjQgKiAzNjAwMDAwO1xuICB9XG5cbiAgc2VsZWN0RGF0ZVJhbmdlID0gKHN0YXJ0RGF0ZTogRGF0ZSwgZW5kRGF0ZT86IERhdGUsIGNsZWFyID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCB7IGdldERhdGVFeHRyYSwgdHlwZSwgb25TZWxlY3RIYXNEaXNhYmxlRGF0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAodHlwZSA9PT0gJ29uZScpIHtcbiAgICAgIGVuZERhdGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IHRpbWUxID0gdGhpcy5nZXREYXRlV2l0aG91dFRpbWUoc3RhcnREYXRlKSxcbiAgICAgIHRpbWUyID0gdGhpcy5nZXREYXRlV2l0aG91dFRpbWUoZW5kRGF0ZSk7XG4gICAgY29uc3Qgc3RhcnREYXRlVGljayA9ICF0aW1lMiB8fCB0aW1lMSA8IHRpbWUyID8gdGltZTEgOiB0aW1lMjtcbiAgICBjb25zdCBlbmREYXRlVGljayA9IHRpbWUyICYmIHRpbWUxID4gdGltZTIgPyB0aW1lMSA6IHRpbWUyO1xuXG4gICAgY29uc3Qgc3RhcnRNb250aERhdGUgPSB0aGlzLmdldE1vbnRoRGF0ZShuZXcgRGF0ZShzdGFydERhdGVUaWNrKSkuZmlyc3REYXRlO1xuICAgIGNvbnN0IGVuZE1vbnRoRGF0ZSA9IGVuZERhdGVUaWNrID8gbmV3IERhdGUoZW5kRGF0ZVRpY2spIDogdGhpcy5nZXRNb250aERhdGUobmV3IERhdGUoc3RhcnREYXRlVGljaykpLmxhc3REYXRlO1xuXG4gICAgbGV0IHVudXNlYWJsZTogbnVtYmVyW10gPSBbXSxcbiAgICAgIG5lZWRVcGRhdGUgPSBmYWxzZTtcbiAgICB0aGlzLnN0YXRlLm1vbnRoc1xuICAgICAgLmZpbHRlcihtID0+IHtcbiAgICAgICAgcmV0dXJuIG0uZmlyc3REYXRlID49IHN0YXJ0TW9udGhEYXRlICYmIG0uZmlyc3REYXRlIDw9IGVuZE1vbnRoRGF0ZTtcbiAgICAgIH0pXG4gICAgICAuZm9yRWFjaChtID0+IHtcbiAgICAgICAgbS53ZWVrcy5mb3JFYWNoKHcgPT5cbiAgICAgICAgICB3XG4gICAgICAgICAgICAuZmlsdGVyKGQgPT4ge1xuICAgICAgICAgICAgICBpZiAoIWVuZERhdGVUaWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQudGljayAmJiB0aGlzLmluRGF0ZShzdGFydERhdGVUaWNrLCBkLnRpY2spO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnRpY2sgJiYgZC50aWNrID49IHN0YXJ0RGF0ZVRpY2sgJiYgZC50aWNrIDw9IGVuZERhdGVUaWNrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gZC5zZWxlY3RlZDtcbiAgICAgICAgICAgICAgaWYgKGNsZWFyKSB7XG4gICAgICAgICAgICAgICAgZC5zZWxlY3RlZCA9IERhdGVNb2RlbHMuU2VsZWN0VHlwZS5Ob25lO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSAoZ2V0RGF0ZUV4dHJhICYmIGdldERhdGVFeHRyYShuZXcgRGF0ZShkLnRpY2spKSkgfHwge307XG4gICAgICAgICAgICAgICAgaWYgKGQub3V0T2ZEYXRlIHx8IGluZm8uZGlzYWJsZSkge1xuICAgICAgICAgICAgICAgICAgdW51c2VhYmxlLnB1c2goZC50aWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5EYXRlKHN0YXJ0RGF0ZVRpY2ssIGQudGljaykpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnb25lJykge1xuICAgICAgICAgICAgICAgICAgICBkLnNlbGVjdGVkID0gRGF0ZU1vZGVscy5TZWxlY3RUeXBlLlNpbmdsZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWVuZERhdGVUaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuc2VsZWN0ZWQgPSBEYXRlTW9kZWxzLlNlbGVjdFR5cGUuT25seTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnREYXRlVGljayAhPT0gZW5kRGF0ZVRpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgZC5zZWxlY3RlZCA9IERhdGVNb2RlbHMuU2VsZWN0VHlwZS5TdGFydDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGQuc2VsZWN0ZWQgPSBEYXRlTW9kZWxzLlNlbGVjdFR5cGUuQWxsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbkRhdGUoZW5kRGF0ZVRpY2ssIGQudGljaykpIHtcbiAgICAgICAgICAgICAgICAgIGQuc2VsZWN0ZWQgPSBEYXRlTW9kZWxzLlNlbGVjdFR5cGUuRW5kO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkLnNlbGVjdGVkID0gRGF0ZU1vZGVscy5TZWxlY3RUeXBlLk1pZGRsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmVlZFVwZGF0ZSA9IG5lZWRVcGRhdGUgfHwgZC5zZWxlY3RlZCAhPT0gb2xkVmFsdWU7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICBpZiAobmVlZFVwZGF0ZSAmJiBtLmNvbXBvbmVudFJlZikge1xuICAgICAgICAgIG0uY29tcG9uZW50UmVmLnVwZGF0ZVdlZWtzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIGlmICh1bnVzZWFibGUubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKG9uU2VsZWN0SGFzRGlzYWJsZURhdGUpIHtcbiAgICAgICAgb25TZWxlY3RIYXNEaXNhYmxlRGF0ZSh1bnVzZWFibGUubWFwKHRpY2sgPT4gbmV3IERhdGUodGljaykpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVW51c2FibGUgZGF0ZS4gWW91IGNhbiBoYW5kbGUgYnkgb25TZWxlY3RIYXNEaXNhYmxlRGF0ZS4nLCB1bnVzZWFibGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb21wdXRlVmlzaWJsZSA9IChjbGllbnRIZWlnaHQ6IG51bWJlciwgc2Nyb2xsVG9wOiBudW1iZXIpID0+IHtcbiAgICBsZXQgbmVlZFVwZGF0ZSA9IGZhbHNlO1xuICAgIGNvbnN0IE1BWF9WSUVXX1BPUlQgPSBjbGllbnRIZWlnaHQgKiAyO1xuICAgIGNvbnN0IE1JTl9WSUVXX1BPUlQgPSBjbGllbnRIZWlnaHQ7XG5cbiAgICAvLyDlpKfnvJPlhrLljLrlpJbov4fmu6Top4TliJlcbiAgICBjb25zdCBmaWx0ZXJGdW5jID0gKHZtOiBEYXRlTW9kZWxzLk1vbnRoRGF0YSkgPT5cbiAgICAgIHZtLnkgJiZcbiAgICAgIHZtLmhlaWdodCAmJlxuICAgICAgKHZtLnkgKyB2bS5oZWlnaHQgPiBzY3JvbGxUb3AgLSBNQVhfVklFV19QT1JUICYmIHZtLnkgPCBzY3JvbGxUb3AgKyBjbGllbnRIZWlnaHQgKyBNQVhfVklFV19QT1JUKTtcblxuICAgIGlmICh0aGlzLnByb3BzLmluZmluaXRlT3B0ICYmIHRoaXMudmlzaWJsZU1vbnRoLmxlbmd0aCA+IDEyKSB7XG4gICAgICB0aGlzLnZpc2libGVNb250aCA9IHRoaXMudmlzaWJsZU1vbnRoLmZpbHRlcihmaWx0ZXJGdW5jKS5zb3J0KChhLCBiKSA9PiArYS5maXJzdERhdGUgLSArYi5maXJzdERhdGUpO1xuICAgIH1cblxuICAgIC8vIOW9k+Wwj+e8k+WGsuWMuuS4jea7oeaXtuWhq+WFhVxuICAgIGlmICh0aGlzLnZpc2libGVNb250aC5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBsYXN0ID0gdGhpcy52aXNpYmxlTW9udGhbdGhpcy52aXNpYmxlTW9udGgubGVuZ3RoIC0gMV07XG4gICAgICBpZiAobGFzdC55ICE9PSB1bmRlZmluZWQgJiYgbGFzdC5oZWlnaHQgJiYgbGFzdC55ICsgbGFzdC5oZWlnaHQgPCBzY3JvbGxUb3AgKyBjbGllbnRIZWlnaHQgKyBNSU5fVklFV19QT1JUKSB7XG4gICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHRoaXMuc3RhdGUubW9udGhzLmluZGV4T2YobGFzdCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDI7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gbGFzdEluZGV4ICsgaTtcbiAgICAgICAgICBpZiAoaW5kZXggPCB0aGlzLnN0YXRlLm1vbnRocy5sZW5ndGggJiYgdGhpcy52aXNpYmxlTW9udGguaW5kZXhPZih0aGlzLnN0YXRlLm1vbnRoc1tpbmRleF0pIDwgMCkge1xuICAgICAgICAgICAgdGhpcy52aXNpYmxlTW9udGgucHVzaCh0aGlzLnN0YXRlLm1vbnRoc1tpbmRleF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhbkxvYWROZXh0KCkgJiYgdGhpcy5nZW5Nb250aERhdGEodW5kZWZpbmVkLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpcnN0ID0gdGhpcy52aXNpYmxlTW9udGhbMF07XG4gICAgICBpZiAoZmlyc3QueSAhPT0gdW5kZWZpbmVkICYmIGZpcnN0LmhlaWdodCAmJiBmaXJzdC55ID4gc2Nyb2xsVG9wIC0gTUlOX1ZJRVdfUE9SVCkge1xuICAgICAgICBjb25zdCBmaXJzdEluZGV4ID0gdGhpcy5zdGF0ZS5tb250aHMuaW5kZXhPZihmaXJzdCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDI7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gZmlyc3RJbmRleCAtIGk7XG4gICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgdGhpcy52aXNpYmxlTW9udGguaW5kZXhPZih0aGlzLnN0YXRlLm1vbnRoc1tpbmRleF0pIDwgMCkge1xuICAgICAgICAgICAgdGhpcy52aXNpYmxlTW9udGgudW5zaGlmdCh0aGlzLnN0YXRlLm1vbnRoc1tpbmRleF0pO1xuICAgICAgICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLm1vbnRocy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnZpc2libGVNb250aCA9IHRoaXMuc3RhdGUubW9udGhzLmZpbHRlcihmaWx0ZXJGdW5jKTtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBuZWVkVXBkYXRlO1xuICB9O1xuXG4gIGNyZWF0ZU9uU2Nyb2xsID0gKCkgPT4ge1xuICAgIC8vIGxldCB0aW1lcjogYW55O1xuICAgIGxldCBjbGllbnRIZWlnaHQgPSAwLFxuICAgICAgc2Nyb2xsVG9wID0gMDtcblxuICAgIHJldHVybiAoZGF0YTogeyBmdWxsOiBudW1iZXI7IGNsaWVudDogbnVtYmVyOyB0b3A6IG51bWJlciB9KSA9PiB7XG4gICAgICBjb25zdCB7IGNsaWVudCwgdG9wIH0gPSBkYXRhO1xuICAgICAgY2xpZW50SGVpZ2h0ID0gY2xpZW50O1xuICAgICAgc2Nyb2xsVG9wID0gdG9wO1xuXG4gICAgICB0aGlzLmNvbXB1dGVWaXNpYmxlKGNsaWVudEhlaWdodCwgc2Nyb2xsVG9wKTtcblxuICAgICAgLy8g5Lul5LiK5pa55rOV55uu5YmN5peg6Zeu6aKY77yM5aaC5p6c5ZCO57ut5pyJ5oCn6IO96Zeu6aKY77yM5pS555So5aaC5LiL5pa55rOV77yM5L2G5Lul5LiL5pa55rOV5Lya5a+86Ie05Yi35paw56iN5b6u5bu26L+f546w6LGhXG5cbiAgICAgIC8vIGlmICh0aW1lcikge1xuICAgICAgLy8gICByZXR1cm47XG4gICAgICAvLyB9XG4gICAgICAvL1xuICAgICAgLy8gdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vICAgdGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAvL1xuICAgICAgLy8gICBpZiAodGhpcy5jb21wdXRlVmlzaWJsZShjbGllbnRIZWlnaHQsIHNjcm9sbFRvcCkpIHtcbiAgICAgIC8vICAgICBjb25zb2xlLmxvZygndXBkYXRlIGRvbScpO1xuICAgICAgLy8gICB9XG4gICAgICAvLyB9LCA1MCk7XG4gICAgfTtcbiAgfTtcblxuICBiYXNlT25DZWxsQ2xpY2sgPSAoZGF5OiBEYXRlTW9kZWxzLkNlbGxEYXRhKSA9PiB7XG4gICAgaWYgKCFkYXkudGljaykgcmV0dXJuO1xuICAgIHRoaXMucHJvcHMub25DZWxsQ2xpY2sgJiYgdGhpcy5wcm9wcy5vbkNlbGxDbGljayhuZXcgRGF0ZShkYXkudGljaykpO1xuICB9O1xuXG59XG4iXX0=
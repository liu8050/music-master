/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, HostBinding } from '@angular/core';
import { formatDate } from '../util/index';
export class CalendarConfirmPanelComponent {
    constructor() {
        this.props = (/** @type {?} */ ({
            formatStr: 'yyyy-MM-dd hh:mm'
        }));
        this.confirmPane = true;
        this.triggerConfirm = (/**
         * @return {?}
         */
        () => {
            const { onConfirm, disableBtn } = this.props;
            !disableBtn && onConfirm();
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set propsData(value) {
        this.props = Object.assign({}, this.props, value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disableBtn(value) {
        this.props.disableBtn = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set formatStr(value) {
        this.props.formatStr = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startDateTime(value) {
        this.props.startDateTime = value;
        this.formatTime();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set endDateTime(value) {
        this.props.endDateTime = value;
        this.formatTime();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set onConfirm(value) {
        this.props.onConfirm = value;
    }
    /**
     * @return {?}
     */
    formatTime() {
        const { type, locale, disableBtn } = this.props;
        let { startDateTime, endDateTime } = this.props;
        if (startDateTime && endDateTime && +startDateTime > +endDateTime) {
            /** @type {?} */
            const tmp = startDateTime;
            startDateTime = endDateTime;
            endDateTime = tmp;
        }
        this.startTimeStr = startDateTime ? this.selfFormatDate(startDateTime) : locale.noChoose;
        this.endTimeStr = endDateTime ? this.selfFormatDate(endDateTime) : locale.noChoose;
        /** @type {?} */
        let btnCls = disableBtn ? 'button button-disable' : 'button';
        if (type === 'one') {
            btnCls += ' button-full';
        }
        this.btnCls = btnCls;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    selfFormatDate(date) {
        const { formatStr = '', locale } = this.props;
        return formatDate(date, formatStr, locale);
    }
}
CalendarConfirmPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'CalendarConfirmPanel, nzm-calendar-confirm-panel',
                template: "<div *ngIf=\"props.type === 'range'\" class=\"info\">\n  <p>{{props.locale.start}}: <span class=\"{{!props.startDateTime ? 'grey' : ''}}\">{{startTimeStr}}</span></p>\n  <p>{{props.locale.end}}: <span class=\"{{!props.endDateTime ? 'grey' : ''}}\">{{endTimeStr}}</span></p>\n</div>\n<div [ngClass]=\"btnCls\" (click)=\"triggerConfirm()\">\n  {{props.locale.confirm}}\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
CalendarConfirmPanelComponent.ctorParameters = () => [];
CalendarConfirmPanelComponent.propDecorators = {
    propsData: [{ type: Input }],
    disableBtn: [{ type: Input }],
    formatStr: [{ type: Input }],
    startDateTime: [{ type: Input }],
    endDateTime: [{ type: Input }],
    onConfirm: [{ type: Input }],
    confirmPane: [{ type: HostBinding, args: ['class.confirm-panel',] }]
};
if (false) {
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.props;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.startTimeStr;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.endTimeStr;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.btnCls;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.confirmPane;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.triggerConfirm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS1wYW5lbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbImNhbGVuZGFyL2NvbmZpcm0tcGFuZWwvY29uZmlybS1wYW5lbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUzNDLE1BQU0sT0FBTyw2QkFBNkI7SUF3Q3hDO1FBdkNBLFVBQUssR0FBRyxtQkFBQTtZQUNOLFNBQVMsRUFBRSxrQkFBa0I7U0FDOUIsRUFBaUMsQ0FBQztRQW1DQyxnQkFBVyxHQUFZLElBQUksQ0FBQztRQXNCaEUsbUJBQWM7OztRQUFHLEdBQUcsRUFBRTtrQkFDZCxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSztZQUM1QyxDQUFDLFVBQVUsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUM3QixDQUFDLEVBQUE7SUF2QmUsQ0FBQzs7Ozs7SUFoQ2pCLElBQ0ksU0FBUyxDQUFDLEtBQUs7UUFDakIsSUFBSSxDQUFDLEtBQUsscUJBQ0wsSUFBSSxDQUFDLEtBQUssRUFDVixLQUFLLENBQ1QsQ0FBQztJQUNKLENBQUM7Ozs7O0lBQ0QsSUFDSSxVQUFVLENBQUMsS0FBSztRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFDRCxJQUNJLFNBQVMsQ0FBQyxLQUFLO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDOzs7OztJQUNELElBQ0ksYUFBYSxDQUFDLEtBQUs7UUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDOzs7OztJQUNELElBQ0ksV0FBVyxDQUFDLEtBQUs7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDOzs7OztJQUNELElBQ0ksU0FBUyxDQUFDLEtBQUs7UUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQy9CLENBQUM7Ozs7SUFNRCxVQUFVO2NBQ0YsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLO1lBQzNDLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLO1FBQy9DLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLFdBQVcsRUFBRTs7a0JBQzNELEdBQUcsR0FBRyxhQUFhO1lBQ3pCLGFBQWEsR0FBRyxXQUFXLENBQUM7WUFDNUIsV0FBVyxHQUFHLEdBQUcsQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3pGLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOztZQUMvRSxNQUFNLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsUUFBUTtRQUM1RCxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDbEIsTUFBTSxJQUFJLGNBQWMsQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBT0QsY0FBYyxDQUFDLElBQVU7Y0FDakIsRUFBRSxTQUFTLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLO1FBQzdDLE9BQU8sVUFBVSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7O1lBMUVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0RBQWtEO2dCQUM1RCxvWUFBNkM7Z0JBQzdDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3RDOzs7Ozt3QkFVRSxLQUFLO3lCQU9MLEtBQUs7d0JBSUwsS0FBSzs0QkFJTCxLQUFLOzBCQUtMLEtBQUs7d0JBS0wsS0FBSzswQkFLTCxXQUFXLFNBQUMscUJBQXFCOzs7O0lBckNsQyw4Q0FFbUM7O0lBQ25DLHFEQUFxQjs7SUFDckIsbURBQW1COztJQUNuQiwrQ0FBZTs7SUFnQ2Ysb0RBQWdFOztJQXNCaEUsdURBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICcuLi91dGlsL2luZGV4JztcbmltcG9ydCB7IENhbGVuZGFyQ29uZmlybVBhbmVsUHJvcHNUeXBlIH0gZnJvbSAnLi9Qcm9wc1R5cGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdDYWxlbmRhckNvbmZpcm1QYW5lbCwgbnptLWNhbGVuZGFyLWNvbmZpcm0tcGFuZWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vY29uZmlybS1wYW5lbC5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBDYWxlbmRhckNvbmZpcm1QYW5lbENvbXBvbmVudCB7XG4gIHByb3BzID0ge1xuICAgIGZvcm1hdFN0cjogJ3l5eXktTU0tZGQgaGg6bW0nXG4gIH0gYXMgQ2FsZW5kYXJDb25maXJtUGFuZWxQcm9wc1R5cGU7XG4gIHN0YXJ0VGltZVN0cjogc3RyaW5nO1xuICBlbmRUaW1lU3RyOiBzdHJpbmc7XG4gIGJ0bkNsczogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBwcm9wc0RhdGEodmFsdWUpIHtcbiAgICB0aGlzLnByb3BzID0ge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIC4uLnZhbHVlXG4gICAgfTtcbiAgfVxuICBASW5wdXQoKVxuICBzZXQgZGlzYWJsZUJ0bih2YWx1ZSkge1xuICAgIHRoaXMucHJvcHMuZGlzYWJsZUJ0biA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBmb3JtYXRTdHIodmFsdWUpIHtcbiAgICB0aGlzLnByb3BzLmZvcm1hdFN0ciA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBzdGFydERhdGVUaW1lKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5zdGFydERhdGVUaW1lID0gdmFsdWU7XG4gICAgdGhpcy5mb3JtYXRUaW1lKCk7XG4gIH1cbiAgQElucHV0KClcbiAgc2V0IGVuZERhdGVUaW1lKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5lbmREYXRlVGltZSA9IHZhbHVlO1xuICAgIHRoaXMuZm9ybWF0VGltZSgpO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBvbkNvbmZpcm0odmFsdWUpIHtcbiAgICB0aGlzLnByb3BzLm9uQ29uZmlybSA9IHZhbHVlO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb25maXJtLXBhbmVsJykgY29uZmlybVBhbmU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgZm9ybWF0VGltZSgpIHtcbiAgICBjb25zdCB7IHR5cGUsIGxvY2FsZSwgZGlzYWJsZUJ0biB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgeyBzdGFydERhdGVUaW1lLCBlbmREYXRlVGltZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoc3RhcnREYXRlVGltZSAmJiBlbmREYXRlVGltZSAmJiArc3RhcnREYXRlVGltZSA+ICtlbmREYXRlVGltZSkge1xuICAgICAgY29uc3QgdG1wID0gc3RhcnREYXRlVGltZTtcbiAgICAgIHN0YXJ0RGF0ZVRpbWUgPSBlbmREYXRlVGltZTtcbiAgICAgIGVuZERhdGVUaW1lID0gdG1wO1xuICAgIH1cblxuICAgIHRoaXMuc3RhcnRUaW1lU3RyID0gc3RhcnREYXRlVGltZSA/IHRoaXMuc2VsZkZvcm1hdERhdGUoc3RhcnREYXRlVGltZSkgOiBsb2NhbGUubm9DaG9vc2U7XG4gICAgdGhpcy5lbmRUaW1lU3RyID0gZW5kRGF0ZVRpbWUgPyB0aGlzLnNlbGZGb3JtYXREYXRlKGVuZERhdGVUaW1lKSA6IGxvY2FsZS5ub0Nob29zZTtcbiAgICBsZXQgYnRuQ2xzID0gZGlzYWJsZUJ0biA/ICdidXR0b24gYnV0dG9uLWRpc2FibGUnIDogJ2J1dHRvbic7XG4gICAgaWYgKHR5cGUgPT09ICdvbmUnKSB7XG4gICAgICBidG5DbHMgKz0gJyBidXR0b24tZnVsbCc7XG4gICAgfVxuICAgIHRoaXMuYnRuQ2xzID0gYnRuQ2xzO1xuICB9XG5cbiAgdHJpZ2dlckNvbmZpcm0gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBvbkNvbmZpcm0sIGRpc2FibGVCdG4gfSA9IHRoaXMucHJvcHM7XG4gICAgIWRpc2FibGVCdG4gJiYgb25Db25maXJtKCk7XG4gIH1cblxuICBzZWxmRm9ybWF0RGF0ZShkYXRlOiBEYXRlKSB7XG4gICAgY29uc3QgeyBmb3JtYXRTdHIgPSAnJywgbG9jYWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsIGZvcm1hdFN0ciwgbG9jYWxlKTtcbiAgfVxufVxuIl19
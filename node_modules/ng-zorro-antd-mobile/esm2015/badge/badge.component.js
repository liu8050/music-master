/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, ElementRef, Renderer2 } from '@angular/core';
export class BadgeComponent {
    /**
     * @param {?} _ref
     * @param {?} render
     */
    constructor(_ref, render) {
        this._ref = _ref;
        this.render = render;
        this.prefixCls = 'am-badge';
        this.scrollNumberCls = {};
        this.style = {};
        this._size = 'small';
        this._dot = false;
        this._hot = false;
        this._corner = false;
        this._children = false;
        this._overflowCount = 99;
        this.clsBadge = true;
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set size(v) {
        this._size = v;
        this.setCls();
    }
    /**
     * @return {?}
     */
    get text() {
        return this._text;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set text(v) {
        this._text = v;
        this.setCls();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set corner(v) {
        this._corner = v;
        this.setCls();
    }
    /**
     * @return {?}
     */
    get dot() {
        return this._dot;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set dot(v) {
        this._dot = v;
        if (this._dot) {
            this._text = '';
        }
        this.setCls();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set overflowCount(v) {
        this._overflowCount = v;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set hot(v) {
        this._hot = v;
        this.setCls();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set setStyle(v) {
        this.style = v;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set className(v) {
        this._setClass = v;
        /** @type {?} */
        const clsArr = this._setClass.split(' ');
        clsArr.forEach((/**
         * @param {?} cls
         * @return {?}
         */
        cls => {
            this.render.addClass(this._ref.nativeElement, cls);
        }));
    }
    /**
     * @return {?}
     */
    setCls() {
        this.scrollNumberCls = {
            [`${this.prefixCls}-dot`]: this._dot,
            [`${this.prefixCls}-dot-large`]: this._dot && this._size === 'large',
            [`${this.prefixCls}-text`]: !this._dot && !this._corner,
            [`${this.prefixCls}-corner`]: this._corner,
            [`${this.prefixCls}-corner-large`]: this._corner && this._size === 'large'
        };
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (typeof this._text === 'number' && this._text > this._overflowCount) {
            this._text = this._overflowCount + '+';
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setCls();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this._ref.nativeElement.children.length > 1 || (this._ref.nativeElement.children.length === 1 && !this.dot && !this.text)) {
                this._children = true;
                this.setCls();
            }
        }), 10);
    }
}
BadgeComponent.decorators = [
    { type: Component, args: [{
                selector: 'Badge, nzm-badge',
                template: "<ng-content></ng-content>\n<sup *ngIf=\"dot || text\"\n    [ngClass]=\"scrollNumberCls\"\n    [ngStyle]=\"style\">\n    <span>{{text}}</span>\n</sup>\n"
            }] }
];
/** @nocollapse */
BadgeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
BadgeComponent.propDecorators = {
    size: [{ type: Input }],
    text: [{ type: Input }],
    corner: [{ type: Input }],
    dot: [{ type: Input }],
    overflowCount: [{ type: Input }],
    hot: [{ type: Input }],
    setStyle: [{ type: Input }],
    className: [{ type: Input }],
    clsBadge: [{ type: HostBinding, args: ['class.am-badge',] }],
    clsBadgeWrp: [{ type: HostBinding, args: ['class.am-badge-not-a-wrapper',] }],
    clsBadgeCornerWrp: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper',] }],
    clsBadgeHot: [{ type: HostBinding, args: ['class.am-badge-hot',] }],
    clsBadgeCornerWrpLg: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper-large',] }]
};
if (false) {
    /** @type {?} */
    BadgeComponent.prototype.prefixCls;
    /** @type {?} */
    BadgeComponent.prototype.scrollNumberCls;
    /** @type {?} */
    BadgeComponent.prototype.style;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._text;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._setClass;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._dot;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._hot;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._corner;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._children;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._overflowCount;
    /** @type {?} */
    BadgeComponent.prototype.clsBadge;
    /** @type {?} */
    BadgeComponent.prototype.clsBadgeWrp;
    /** @type {?} */
    BadgeComponent.prototype.clsBadgeCornerWrp;
    /** @type {?} */
    BadgeComponent.prototype.clsBadgeHot;
    /** @type {?} */
    BadgeComponent.prototype.clsBadgeCornerWrpLg;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._ref;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,
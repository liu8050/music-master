/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, } from '@angular/core';
import { ModalServiceComponent } from './modal.component';
import { ModalBaseOptions, ModalOptions, AlertOptions } from './modal-options.provider';
import { PopupService } from '../core/services/popup.service';
export class ModalService extends PopupService {
    /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    static _initConfig(config, options) {
        /** @type {?} */
        const props = new ModalBaseOptions();
        /** @type {?} */
        const optionalParams = [
            'visible',
            'focus',
            'prefixCls',
            'animated',
            'closable',
            'maskClosable',
            'onClose',
            'transparent',
            'popup',
            'animationType',
            'title',
            'footer',
            'platform',
            'className',
            'wrapClassName',
            'message',
            'actions',
            'callbackOrActions',
            'type',
            'defaultValue',
            'placeholders',
            'operation',
            'transitionName',
            'maskTransitionName',
            'close'
        ];
        config = Object.assign(options, config, {
            close: (/**
             * @return {?}
             */
            () => {
                if (config.maskClosable || config.closable) {
                    ModalService.closeWithAnimation();
                }
            })
        });
        optionalParams.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        }));
        return props;
    }
    /**
     * @param {?} props
     * @return {?}
     */
    static _open(props) {
        /** @type {?} */
        const childInjector = Injector.create([
            {
                provide: ModalOptions,
                useValue: props
            }
        ]);
        setTimeout((/**
         * @return {?}
         */
        () => {
            ModalService.modalRef = ModalService.showPopup('ModalServiceComponent', ModalServiceComponent, childInjector);
        }), 0);
    }
    /**
     * @return {?}
     */
    static closeWithAnimation() {
        /** @type {?} */
        const options = new ModalBaseOptions();
        ModalService.modalRef.instance.transitionName = `${options.transitionName}-leave ${options.transitionName}-leave-active`;
        ModalService.modalRef.instance.maskTransitionName = `${options.maskTransitionName}-leave ${options.maskTransitionName}-leave-active`;
        setTimeout((/**
         * @return {?}
         */
        () => {
            ModalService.close();
        }), 200);
    }
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    static alert(title, message, actions, platform) {
        /** @type {?} */
        const options = new AlertOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.platform = 'ios';
        /** @type {?} */
        const footer = getFooter(actions);
        /** @type {?} */
        const config = Object.assign({
            title: title,
            message: message,
            footer: footer,
            actions: footer,
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        const props = ModalService._initConfig(config, options);
        return ModalService._open(props);
    }
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} callbackOrActions
     * @param {?=} type
     * @param {?=} defaultValue
     * @param {?=} placeholders
     * @param {?=} platform
     * @return {?}
     */
    static prompt(title, message, callbackOrActions, type, defaultValue, placeholders, platform) {
        /** @type {?} */
        const options = new ModalOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.className = 'am-modal-alert-content';
        options.defaultValue = defaultValue || ['', ''];
        options.placeholders = placeholders;
        (options.type = type ? type : 'default'), (options.platform = platform ? platform : 'ios');
        /**
         * @param {?} self
         * @param {?} func
         * @return {?}
         */
        function getArgs(self, func) {
            /** @type {?} */
            const text = ModalService.modalRef.instance.data.text || options.defaultValue[0];
            /** @type {?} */
            const password = ModalService.modalRef.instance.data.password || options.defaultValue[1];
            if (type === 'login-password') {
                return func(text, password);
            }
            else if (type === 'secure-text') {
                return func(password);
            }
            return func(text);
        }
        /** @type {?} */
        let actions;
        if (typeof callbackOrActions === 'function') {
            actions = [
                { text: 'Cancel' },
                {
                    text: 'OK',
                    onPress: (/**
                     * @return {?}
                     */
                    () => {
                        getArgs(this, callbackOrActions);
                    })
                }
            ];
        }
        else {
            actions = callbackOrActions.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return {
                    text: item.text,
                    onPress: (/**
                     * @return {?}
                     */
                    () => {
                        if (item.onPress) {
                            return getArgs(this, item.onPress);
                        }
                    })
                };
            }));
        }
        /** @type {?} */
        const footer = getFooter(actions);
        /** @type {?} */
        const config = Object.assign({
            title: title,
            message: message,
            type: type ? type : 'default',
            footer: footer,
            actions: footer,
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        const props = ModalService._initConfig(config, options);
        return ModalService._open(props);
    }
    /**
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    static operation(actions, platform) {
        /** @type {?} */
        const options = new ModalOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.operation = true;
        options.className = 'am-modal-operation';
        /** @type {?} */
        const footer = getFooter(actions);
        /** @type {?} */
        const config = Object.assign({
            footer: footer,
            actions: footer,
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        const props = ModalService._initConfig(config, options);
        return ModalService._open(props);
    }
    /**
     * @return {?}
     */
    static close() {
        ModalService.hidePopup('ModalServiceComponent');
    }
}
ModalService.modalRef = null;
ModalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    ModalService.modalRef;
}
/**
 * @param {?} actions
 * @return {?}
 */
function getFooter(actions) {
    /** @type {?} */
    let action = actions ? actions : [{ text: 'OK', onPress: (/**
             * @return {?}
             */
            () => { }) }];
    return action.map((/**
     * @param {?} button
     * @return {?}
     */
    (button) => {
        /** @type {?} */
        const orginPress = button.onPress || (/**
         * @return {?}
         */
        function () { });
        button.onPress = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const res = orginPress();
            if (res && res.then) {
                res.then((/**
                 * @return {?}
                 */
                () => {
                    ModalService.closeWithAnimation();
                }));
            }
            else {
                ModalService.closeWithAnimation();
            }
        });
        return button;
    }));
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, Output, EventEmitter, HostBinding } from '@angular/core';
export class NavBarComponent {
    constructor() {
        this.defaultProps = {
            prefixCls: 'am-navbar',
            mode: 'dark',
            onLeftClick: (/**
             * @return {?}
             */
            () => { })
        };
        this.navbarCls = {};
        this.isIconString = true;
        this.isLeftContentString = true;
        this.isRightContentString = true;
        this.onLeftClick = new EventEmitter();
        this.amNavbar = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set mode(value) {
        this.defaultProps.mode = value;
        this.amNavbarLight = this.defaultProps.mode === 'light';
        this.amNavbardark = this.defaultProps.mode === 'dark';
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set icon(value) {
        if (value instanceof TemplateRef) {
            this.isIconString = false;
        }
        else {
            this.isIconString = true;
        }
        this._icon = value;
    }
    /**
     * @return {?}
     */
    get leftContent() {
        return this._leftContent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set leftContent(value) {
        if (value instanceof TemplateRef) {
            this.isLeftContentString = false;
        }
        else {
            this.isLeftContentString = true;
        }
        this._leftContent = value;
    }
    /**
     * @return {?}
     */
    get rightContent() {
        return this._rightContent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set rightContent(value) {
        if (value instanceof TemplateRef) {
            this.isRightContentString = false;
        }
        else {
            this.isRightContentString = true;
        }
        this._rightContent = value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    click(event) {
        this.onLeftClick.emit(event);
    }
}
NavBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'Navbar, nzm-nav-bar',
                template: "<div role=\"button\" class=\"{{defaultProps.prefixCls}}-left\" (click)=\"click($event)\">\n  <ng-template *ngIf=\"!isLeftContentString\" [ngTemplateOutlet]=\"leftContent\"></ng-template>\n  <span *ngIf=\"icon\" class=\"{{defaultProps.prefixCls}}-left-icon\" aria-hidden=\"true\">\n    <Icon *ngIf=\"isIconString\" [type]=\"icon\"></Icon>\n    <ng-template *ngIf=\"!isIconString\" [ngTemplateOutlet]=\"icon\"></ng-template>\n  </span>\n  {{isLeftContentString ? leftContent: null}}\n</div>\n<div class=\"{{defaultProps.prefixCls}}-title\">\n  <ng-content></ng-content>\n</div>\n<div class=\"{{defaultProps.prefixCls}}-right\">\n  {{isRightContentString ? rightContent: null}}\n  <ng-template *ngIf=\"!isRightContentString\" [ngTemplateOutlet]=\"rightContent\"></ng-template>\n</div>"
            }] }
];
/** @nocollapse */
NavBarComponent.ctorParameters = () => [];
NavBarComponent.propDecorators = {
    mode: [{ type: Input }],
    icon: [{ type: Input }],
    leftContent: [{ type: Input }],
    rightContent: [{ type: Input }],
    onLeftClick: [{ type: Output }],
    amNavbar: [{ type: HostBinding, args: ['class.am-navbar',] }],
    amNavbarLight: [{ type: HostBinding, args: ['class.am-navbar-light',] }],
    amNavbardark: [{ type: HostBinding, args: ['class.am-navbar-dark',] }]
};
if (false) {
    /** @type {?} */
    NavBarComponent.prototype.defaultProps;
    /** @type {?} */
    NavBarComponent.prototype.navbarCls;
    /** @type {?} */
    NavBarComponent.prototype.isIconString;
    /** @type {?} */
    NavBarComponent.prototype.isLeftContentString;
    /** @type {?} */
    NavBarComponent.prototype.isRightContentString;
    /**
     * @type {?}
     * @private
     */
    NavBarComponent.prototype._icon;
    /**
     * @type {?}
     * @private
     */
    NavBarComponent.prototype._leftContent;
    /**
     * @type {?}
     * @private
     */
    NavBarComponent.prototype._rightContent;
    /** @type {?} */
    NavBarComponent.prototype.onLeftClick;
    /** @type {?} */
    NavBarComponent.prototype.amNavbar;
    /** @type {?} */
    NavBarComponent.prototype.amNavbarLight;
    /** @type {?} */
    NavBarComponent.prototype.amNavbardark;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbIm5hdi1iYXIvbmF2LWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU1qRyxNQUFNLE9BQU8sZUFBZTtJQW1FMUI7UUFsRUEsaUJBQVksR0FBRztZQUNiLFNBQVMsRUFBRSxXQUFXO1lBQ3RCLElBQUksRUFBRSxNQUFNO1lBQ1osV0FBVzs7O1lBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBO1NBQ3RCLENBQUM7UUFDRixjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ2YsaUJBQVksR0FBWSxJQUFJLENBQUM7UUFDN0Isd0JBQW1CLEdBQVksSUFBSSxDQUFDO1FBQ3BDLHlCQUFvQixHQUFZLElBQUksQ0FBQztRQWlEckMsZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUc3QyxhQUFRLEdBQUcsSUFBSSxDQUFDO0lBTVIsQ0FBQzs7Ozs7SUFwRGhCLElBQ0ksSUFBSSxDQUFDLEtBQUs7UUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUM7UUFDeEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUM7SUFDeEQsQ0FBQzs7OztJQUNELElBQ0ksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDOzs7OztJQUNELElBQUksSUFBSSxDQUFDLEtBQWdDO1FBQ3ZDLElBQUksS0FBSyxZQUFZLFdBQVcsRUFBRTtZQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztTQUMzQjthQUFNO1lBQ0wsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDMUI7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDOzs7O0lBQ0QsSUFDSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBQ0QsSUFBSSxXQUFXLENBQUMsS0FBZ0M7UUFDOUMsSUFBSSxLQUFLLFlBQVksV0FBVyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7U0FDbEM7YUFBTTtZQUNMLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7U0FDakM7UUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM1QixDQUFDOzs7O0lBQ0QsSUFDSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBQ0QsSUFBSSxZQUFZLENBQUMsS0FBZ0M7UUFDL0MsSUFBSSxLQUFLLFlBQVksV0FBVyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7U0FDbkM7YUFBTTtZQUNMLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUM7U0FDbEM7UUFDRCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDOzs7OztJQWFELEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7O1lBM0VGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQix5eEJBQXVDO2FBQ3hDOzs7OzttQkFnQkUsS0FBSzttQkFNTCxLQUFLOzBCQVlMLEtBQUs7MkJBWUwsS0FBSzswQkFZTCxNQUFNO3VCQUdOLFdBQVcsU0FBQyxpQkFBaUI7NEJBRTdCLFdBQVcsU0FBQyx1QkFBdUI7MkJBRW5DLFdBQVcsU0FBQyxzQkFBc0I7Ozs7SUEvRG5DLHVDQUlFOztJQUNGLG9DQUFlOztJQUNmLHVDQUE2Qjs7SUFDN0IsOENBQW9DOztJQUNwQywrQ0FBcUM7Ozs7O0lBRXJDLGdDQUF5Qzs7Ozs7SUFDekMsdUNBQWdEOzs7OztJQUNoRCx3Q0FBaUQ7O0lBNENqRCxzQ0FDb0Q7O0lBRXBELG1DQUN1Qjs7SUFDdkIsd0NBQ3FCOztJQUNyQix1Q0FDb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ05hdmJhciwgbnptLW5hdi1iYXInLFxuICB0ZW1wbGF0ZVVybDogJy4vbmF2LWJhci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTmF2QmFyQ29tcG9uZW50IHtcbiAgZGVmYXVsdFByb3BzID0ge1xuICAgIHByZWZpeENsczogJ2FtLW5hdmJhcicsXG4gICAgbW9kZTogJ2RhcmsnLFxuICAgIG9uTGVmdENsaWNrOiAoKSA9PiB7fVxuICB9O1xuICBuYXZiYXJDbHMgPSB7fTtcbiAgaXNJY29uU3RyaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgaXNMZWZ0Q29udGVudFN0cmluZzogYm9vbGVhbiA9IHRydWU7XG4gIGlzUmlnaHRDb250ZW50U3RyaW5nOiBib29sZWFuID0gdHJ1ZTtcblxuICBwcml2YXRlIF9pY29uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICBwcml2YXRlIF9sZWZ0Q29udGVudDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgcHJpdmF0ZSBfcmlnaHRDb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBtb2RlKHZhbHVlKSB7XG4gICAgdGhpcy5kZWZhdWx0UHJvcHMubW9kZSA9IHZhbHVlO1xuICAgIHRoaXMuYW1OYXZiYXJMaWdodCA9IHRoaXMuZGVmYXVsdFByb3BzLm1vZGUgPT09ICdsaWdodCc7XG4gICAgdGhpcy5hbU5hdmJhcmRhcmsgPSB0aGlzLmRlZmF1bHRQcm9wcy5tb2RlID09PSAnZGFyayc7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IGljb24oKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2ljb247XG4gIH1cbiAgc2V0IGljb24odmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5pc0ljb25TdHJpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc0ljb25TdHJpbmcgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl9pY29uID0gdmFsdWU7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IGxlZnRDb250ZW50KCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9sZWZ0Q29udGVudDtcbiAgfVxuICBzZXQgbGVmdENvbnRlbnQodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5pc0xlZnRDb250ZW50U3RyaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNMZWZ0Q29udGVudFN0cmluZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX2xlZnRDb250ZW50ID0gdmFsdWU7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IHJpZ2h0Q29udGVudCgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fcmlnaHRDb250ZW50O1xuICB9XG4gIHNldCByaWdodENvbnRlbnQodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5pc1JpZ2h0Q29udGVudFN0cmluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzUmlnaHRDb250ZW50U3RyaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5fcmlnaHRDb250ZW50ID0gdmFsdWU7XG4gIH1cbiAgQE91dHB1dCgpXG4gIG9uTGVmdENsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFtLW5hdmJhcicpXG4gIHB1YmxpYyBhbU5hdmJhciA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0tbmF2YmFyLWxpZ2h0JylcbiAgcHVibGljIGFtTmF2YmFyTGlnaHQ7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0tbmF2YmFyLWRhcmsnKVxuICBwdWJsaWMgYW1OYXZiYXJkYXJrO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBjbGljayhldmVudCkge1xuICAgIHRoaXMub25MZWZ0Q2xpY2suZW1pdChldmVudCk7XG4gIH1cbn1cbiJdfQ==
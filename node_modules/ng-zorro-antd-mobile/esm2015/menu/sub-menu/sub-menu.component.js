/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, Output, EventEmitter } from '@angular/core';
export class SubMenuComponent {
    constructor() {
        this.prefixCls = 'am-sub-menu';
        this.onSel = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get subMenuPrefixCls() {
        return this._subMenuPrefixCls;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set subMenuPrefixCls(v) {
        this._subMenuPrefixCls = v;
    }
    /**
     * @return {?}
     */
    get subMenuData() {
        return this._subMenuData;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set subMenuData(v) {
        this._subMenuData = v;
    }
    /**
     * @return {?}
     */
    get multiSelect() {
        return this._multiSelect;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set multiSelect(v) {
        this._multiSelect = v;
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    onClick(dataItem) {
        this.onSel.emit(dataItem);
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    selected(dataItem) {
        return this.showSelect && (this.selItem.length > 0 && this.selItem.indexOf(dataItem.value) !== -1);
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    getClass(dataItem) {
        /** @type {?} */
        let name = this.radioPrefixCls + '-item ';
        name += this.selected(dataItem) ? this._subMenuPrefixCls + '-item-selected' : '';
        name += dataItem.disabled ? this._subMenuPrefixCls + '-item-disabled' : '';
        return name;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._subMenuData.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.checked = this.selected(item);
        }));
    }
}
SubMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'SubMenu, nzm-sub-menu',
                template: "<List class=\"{{subMenuPrefixCls}}\" style=\"padding: 0\">\n  <ListItem *ngFor=\"let dataItem of subMenuData; let i = index;\"\n            key=\"i\"\n            [className]=\"getClass(dataItem)\"\n            [extra]=\"extra\"\n  >\n    {{dataItem.label}}\n\n    <ng-template #extra>\n      <label Radio\n             *ngIf=\"!multiSelect\"\n             [checked]=\"dataItem.checked\"\n             [disabled]=\"dataItem.disabled\"\n             (onChange)=\"onClick(dataItem)\"\n      >\n      </label>\n      <label Checkbox\n             *ngIf=\"multiSelect\"\n             [checked]=\"dataItem.checked\"\n             [disabled]=\"dataItem.disabled\"\n             (onChange)=\"onClick(dataItem)\"\n      >\n      </label>\n    </ng-template>\n  </ListItem>\n</List>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SubMenuComponent.ctorParameters = () => [];
SubMenuComponent.propDecorators = {
    onSel: [{ type: Output }],
    radioPrefixCls: [{ type: Input }],
    showSelect: [{ type: Input }],
    selItem: [{ type: Input }],
    subMenuPrefixCls: [{ type: Input }],
    subMenuData: [{ type: Input }],
    multiSelect: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SubMenuComponent.prototype.prefixCls;
    /**
     * @type {?}
     * @private
     */
    SubMenuComponent.prototype._subMenuPrefixCls;
    /**
     * @type {?}
     * @private
     */
    SubMenuComponent.prototype._subMenuData;
    /**
     * @type {?}
     * @private
     */
    SubMenuComponent.prototype._multiSelect;
    /** @type {?} */
    SubMenuComponent.prototype.onSel;
    /** @type {?} */
    SubMenuComponent.prototype.radioPrefixCls;
    /** @type {?} */
    SubMenuComponent.prototype.showSelect;
    /** @type {?} */
    SubMenuComponent.prototype.selItem;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLW1lbnUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJtZW51L3N1Yi1tZW51L3N1Yi1tZW51LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxpQkFBaUIsRUFDakIsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFPdkIsTUFBTSxPQUFPLGdCQUFnQjtJQXNDM0I7UUFyQ0EsY0FBUyxHQUFHLGFBQWEsQ0FBQztRQU8xQixVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUE4QnBDLENBQUM7Ozs7SUF0QmhCLElBQ0ksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBQ0QsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFTO1FBQzVCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7OztJQUNELElBQ0ksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDOzs7OztJQUNELElBQUksV0FBVyxDQUFDLENBQU07UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQzs7OztJQUNELElBQ0ksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDOzs7OztJQUNELElBQUksV0FBVyxDQUFDLENBQVU7UUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFJRCxPQUFPLENBQUMsUUFBUTtRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLFFBQVE7UUFDZixPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckcsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsUUFBUTs7WUFDWCxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRO1FBQ3pDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNqRixJQUFJLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0UsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUc7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7WUFoRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLG14QkFBd0M7Z0JBQ3hDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3RDOzs7OztvQkFRRSxNQUFNOzZCQUdOLEtBQUs7eUJBRUwsS0FBSztzQkFFTCxLQUFLOytCQUVMLEtBQUs7MEJBT0wsS0FBSzswQkFPTCxLQUFLOzs7O0lBN0JOLHFDQUEwQjs7Ozs7SUFFMUIsNkNBQWtDOzs7OztJQUNsQyx3Q0FBcUI7Ozs7O0lBQ3JCLHdDQUErQjs7SUFFL0IsaUNBQ21EOztJQUVuRCwwQ0FDdUI7O0lBQ3ZCLHNDQUNvQjs7SUFDcEIsbUNBQ1EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnU3ViTWVudSwgbnptLXN1Yi1tZW51JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3N1Yi1tZW51LmNvbXBvbmVudC5odG1sJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgU3ViTWVudUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIHByZWZpeENscyA9ICdhbS1zdWItbWVudSc7XG5cbiAgcHJpdmF0ZSBfc3ViTWVudVByZWZpeENsczogc3RyaW5nO1xuICBwcml2YXRlIF9zdWJNZW51RGF0YTtcbiAgcHJpdmF0ZSBfbXVsdGlTZWxlY3Q/OiBib29sZWFuO1xuXG4gIEBPdXRwdXQoKVxuICBvblNlbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBASW5wdXQoKVxuICByYWRpb1ByZWZpeENsczogc3RyaW5nO1xuICBASW5wdXQoKVxuICBzaG93U2VsZWN0OiBib29sZWFuO1xuICBASW5wdXQoKVxuICBzZWxJdGVtO1xuICBASW5wdXQoKVxuICBnZXQgc3ViTWVudVByZWZpeENscygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9zdWJNZW51UHJlZml4Q2xzO1xuICB9XG4gIHNldCBzdWJNZW51UHJlZml4Q2xzKHY6IHN0cmluZykge1xuICAgIHRoaXMuX3N1Yk1lbnVQcmVmaXhDbHMgPSB2O1xuICB9XG4gIEBJbnB1dCgpXG4gIGdldCBzdWJNZW51RGF0YSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9zdWJNZW51RGF0YTtcbiAgfVxuICBzZXQgc3ViTWVudURhdGEodjogYW55KSB7XG4gICAgdGhpcy5fc3ViTWVudURhdGEgPSB2O1xuICB9XG4gIEBJbnB1dCgpXG4gIGdldCBtdWx0aVNlbGVjdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbXVsdGlTZWxlY3Q7XG4gIH1cbiAgc2V0IG11bHRpU2VsZWN0KHY6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9tdWx0aVNlbGVjdCA9IHY7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgb25DbGljayhkYXRhSXRlbSkge1xuICAgIHRoaXMub25TZWwuZW1pdChkYXRhSXRlbSk7XG4gIH1cblxuICBzZWxlY3RlZChkYXRhSXRlbSkge1xuICAgIHJldHVybiB0aGlzLnNob3dTZWxlY3QgJiYgKHRoaXMuc2VsSXRlbS5sZW5ndGggPiAwICYmIHRoaXMuc2VsSXRlbS5pbmRleE9mKGRhdGFJdGVtLnZhbHVlKSAhPT0gLTEpO1xuICB9XG5cbiAgZ2V0Q2xhc3MoZGF0YUl0ZW0pIHtcbiAgICBsZXQgbmFtZSA9IHRoaXMucmFkaW9QcmVmaXhDbHMgKyAnLWl0ZW0gJztcbiAgICBuYW1lICs9IHRoaXMuc2VsZWN0ZWQoZGF0YUl0ZW0pID8gdGhpcy5fc3ViTWVudVByZWZpeENscyArICctaXRlbS1zZWxlY3RlZCcgOiAnJztcbiAgICBuYW1lICs9IGRhdGFJdGVtLmRpc2FibGVkID8gdGhpcy5fc3ViTWVudVByZWZpeENscyArICctaXRlbS1kaXNhYmxlZCcgOiAnJztcbiAgICByZXR1cm4gbmFtZTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICB0aGlzLl9zdWJNZW51RGF0YS5tYXAoaXRlbSA9PiB7XG4gICAgICBpdGVtLmNoZWNrZWQgPSB0aGlzLnNlbGVjdGVkKGl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=
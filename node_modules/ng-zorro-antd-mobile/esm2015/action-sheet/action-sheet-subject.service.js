/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/** @enum {number} */
const actionSheetEvent = {
    onShow: 0,
    onShown: 1,
    onHide: 2,
    onHidden: 3,
    onOk: 4,
    onCancel: 5,
    onDestroy: 6,
};
export class ActionSheetSubjectService extends Subject {
    constructor() {
        super();
        this._eventsQueue = {};
        this.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            /** @type {?} */
            const eventQueue = this._eventsQueue[value] || [];
            eventQueue.forEach((/**
             * @param {?} cb
             * @return {?}
             */
            cb => {
                if (cb !== null && cb !== undefined) {
                    cb();
                }
            }));
        }));
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    destroy(type = 'onCancel') {
        if (!this.isStopped && !this.closed) {
            this.next(type);
        }
    }
    /**
     * @param {?} eventType
     * @param {?} cb
     * @return {?}
     */
    on(eventType, cb) {
        if (this._eventsQueue[eventType]) {
            this._eventsQueue[eventType].push(cb);
        }
        else {
            this._eventsQueue[eventType] = [cb];
        }
    }
}
ActionSheetSubjectService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ActionSheetSubjectService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    ActionSheetSubjectService.prototype.modalId;
    /**
     * @type {?}
     * @private
     */
    ActionSheetSubjectService.prototype._eventsQueue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXNoZWV0LXN1YmplY3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiYWN0aW9uLXNoZWV0L2FjdGlvbi1zaGVldC1zdWJqZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0lBSTdCLFNBQU07SUFDTixVQUFPO0lBQ1AsU0FBTTtJQUNOLFdBQVE7SUFDUixPQUFJO0lBQ0osV0FBUTtJQUNSLFlBQVM7O0FBSVgsTUFBTSxPQUFPLHlCQUEwQixTQUFRLE9BQVk7SUFJekQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUhGLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBSXhCLElBQUksQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxLQUFhLEVBQUUsRUFBRTs7a0JBQ3pCLFVBQVUsR0FBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1lBQ2xFLFVBQVUsQ0FBQyxPQUFPOzs7O1lBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxLQUFLLElBQUksSUFBSSxFQUFFLEtBQUssU0FBUyxFQUFFO29CQUNuQyxFQUFFLEVBQUUsQ0FBQztpQkFDTjtZQUNILENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxPQUFZLFVBQVU7UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7SUFDSCxDQUFDOzs7Ozs7SUFFRCxFQUFFLENBQUMsU0FBaUIsRUFBRSxFQUFZO1FBQ2hDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN2QzthQUFNO1lBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQzs7O1lBN0JGLFVBQVU7Ozs7OztJQUVULDRDQUFnQjs7Ozs7SUFDaEIsaURBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG4vKiDkuovku7bmnprkuL4gKi9cbmNvbnN0IGVudW0gYWN0aW9uU2hlZXRFdmVudCB7XG4gIG9uU2hvdyxcbiAgb25TaG93bixcbiAgb25IaWRlLFxuICBvbkhpZGRlbixcbiAgb25PayxcbiAgb25DYW5jZWwsXG4gIG9uRGVzdHJveVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWN0aW9uU2hlZXRTdWJqZWN0U2VydmljZSBleHRlbmRzIFN1YmplY3Q8YW55PiB7XG4gIG1vZGFsSWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBfZXZlbnRzUXVldWUgPSB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3Vic2NyaWJlKCh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBldmVudFF1ZXVlOiBBcnJheTxGdW5jdGlvbj4gPSB0aGlzLl9ldmVudHNRdWV1ZVt2YWx1ZV0gfHwgW107XG4gICAgICBldmVudFF1ZXVlLmZvckVhY2goY2IgPT4ge1xuICAgICAgICBpZiAoY2IgIT09IG51bGwgJiYgY2IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZGVzdHJveSh0eXBlOiBhbnkgPSAnb25DYW5jZWwnKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RvcHBlZCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgIHRoaXMubmV4dCh0eXBlKTtcbiAgICB9XG4gIH1cblxuICBvbihldmVudFR5cGU6IHN0cmluZywgY2I6IEZ1bmN0aW9uKSB7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1F1ZXVlW2V2ZW50VHlwZV0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1F1ZXVlW2V2ZW50VHlwZV0ucHVzaChjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2V2ZW50c1F1ZXVlW2V2ZW50VHlwZV0gPSBbY2JdO1xuICAgIH1cbiAgfVxufVxuIl19
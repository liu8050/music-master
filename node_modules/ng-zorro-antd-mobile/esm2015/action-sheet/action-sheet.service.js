/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ActionSheetComponent } from './action-sheet.component';
import { ActionSheetOptions, ShareActionSheetWithOptions } from './action-sheet-options.provider';
import { PopupService } from '../core/services/popup.service';
import * as i0 from "@angular/core";
import * as i1 from "./public-api";
import * as i2 from "@angular/cdk/overlay";
/** @type {?} */
const NORMAL = 'NORMAL';
/** @type {?} */
const SHARE = 'SHARE';
/**
 * @return {?}
 */
function noop() { }
export class ActionSheetService extends PopupService {
    /**
     * @param {?} config
     * @param {?=} options
     * @return {?}
     */
    static _initConfig(config, options = {}) {
        /** @type {?} */
        const props = new ActionSheetOptions();
        /** @type {?} */
        const optionalParams = [
            'prefixCls',
            'maskClosable',
            'cancelButtonText',
            'cancelButtonIndex',
            'destructiveButtonIndex',
            'title',
            'message',
            'className',
            'transitionName',
            'maskTransitionName',
            'options',
            'locale'
        ];
        config = Object.assign(options, config, {
            close: (/**
             * @return {?}
             */
            () => {
                if (config.maskClosable) {
                    ActionSheetService.closeWithAnimation(config.transitionName, config.maskTransitionName);
                }
            })
        });
        optionalParams.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        }));
        return props;
    }
    /**
     * @param {?} props
     * @return {?}
     */
    static _open(props) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            ActionSheetService.comRef = ActionSheetService.showPopup('ActionSheetComponent', ActionSheetComponent);
            ActionSheetService.comRef.instance.option = props;
        }), 0);
    }
    /**
     * @param {?} flag
     * @param {?} config
     * @param {?} callback
     * @return {?}
     */
    static createActionSheet(flag, config, callback) {
        /** @type {?} */
        const options = flag === NORMAL ? new ActionSheetOptions() : new ShareActionSheetWithOptions();
        /** @type {?} */
        const transitionName = config.transitionName ? config.transitionName : options.transitionName;
        options.transitionName = `${transitionName}-enter ${transitionName}-enter-active`;
        /** @type {?} */
        const maskTransitionName = config.maskTransitionName ? config.maskTransitionName : options.maskTransitionName;
        options.maskTransitionName = `${maskTransitionName}-enter ${maskTransitionName}-enter-active`;
        /** @type {?} */
        const props = ActionSheetService._initConfig(config, options);
        Object.assign(props, { onPress: cb }, { flag: flag }, { maskClose: props.maskClosable ? cb : (/**
             * @return {?}
             */
            () => { }) });
        /**
         * @param {?} index
         * @param {?=} rowIndex
         * @param {?=} event
         * @return {?}
         */
        function cb(index, rowIndex = 0, event) {
            event.stopPropagation();
            /** @type {?} */
            const res = callback(index, rowIndex);
            if (res && res.then) {
                res.then((/**
                 * @return {?}
                 */
                () => {
                    ActionSheetService.closeWithAnimation(transitionName, maskTransitionName);
                }));
            }
            else {
                ActionSheetService.closeWithAnimation(transitionName, maskTransitionName);
            }
        }
        return ActionSheetService._open(props);
    }
    /**
     * @param {?} transitionName
     * @param {?} maskTransitionName
     * @return {?}
     */
    static closeWithAnimation(transitionName, maskTransitionName) {
        ActionSheetService.comRef.instance.option.transitionName = `${transitionName}-leave ${transitionName}-leave-active`;
        ActionSheetService.comRef.instance.option.maskTransitionName = `${maskTransitionName}-leave ${maskTransitionName}-leave-active`;
        setTimeout((/**
         * @return {?}
         */
        () => {
            ActionSheetService.close();
        }), 200);
    }
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    static showActionSheetWithOptions(config, callback = noop) {
        ActionSheetService.createActionSheet(NORMAL, config, callback);
    }
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    static showShareActionSheetWithOptions(config, callback = noop) {
        ActionSheetService.createActionSheet(SHARE, config, callback);
    }
    /**
     * @return {?}
     */
    static close() {
        ActionSheetService.hidePopup('ActionSheetComponent');
    }
}
ActionSheetService.compRef = null;
ActionSheetService._actionSheetCompFactory = null;
ActionSheetService.appRef = null;
ActionSheetService.comRef = null;
ActionSheetService.instance = null;
ActionSheetService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ ActionSheetService.ngInjectableDef = i0.defineInjectable({ factory: function ActionSheetService_Factory() { return new i1.ActionSheet(i0.inject(i2.Overlay)); }, token: i1.ActionSheet, providedIn: "root" });
if (false) {
    /** @type {?} */
    ActionSheetService.compRef;
    /** @type {?} */
    ActionSheetService._actionSheetCompFactory;
    /** @type {?} */
    ActionSheetService.appRef;
    /** @type {?} */
    ActionSheetService.comRef;
    /** @type {?} */
    ActionSheetService.instance;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, TemplateRef, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
export class ActionSheetComponent {
    /**
     * @param {?} localeProviderService
     */
    constructor(localeProviderService) {
        this.localeProviderService = localeProviderService;
        this.unsubscribe$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.localeProvider();
    }
    /**
     * @return {?}
     */
    localeProvider() {
        /** @type {?} */
        const self = this;
        if (self.option.locale || self.option.locale !== undefined) {
            self.localeProviderService.setLocale(self.option.locale);
        }
        self.localeProviderService.localeChange.pipe(takeUntil(self.unsubscribe$)).subscribe((/**
         * @param {?} _
         * @return {?}
         */
        _ => {
            if (self.option.cancelButtonText) {
                self.option.cancelButtonText = self.localeProviderService.getLocaleSubObj('ActionSheet')['dismissText'];
            }
        }));
    }
    /**
     * @param {?} index
     * @param {?=} rowIndex
     * @param {?=} event
     * @return {?}
     */
    onPress(index, rowIndex = 0, event) { }
    /**
     * @param {?} option
     * @return {?}
     */
    showShare(option) {
        /** @type {?} */
        const cls = { [`${option.prefixCls}-share`]: option.flag === 'SHARE' };
        return cls;
    }
    /**
     * @param {?} option
     * @param {?} suffix
     * @return {?}
     */
    setActiveClassName(option, suffix) {
        return [`${option.prefixCls}-${suffix}-active`];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isNoTitle(value) {
        return value === '' || value === null || value === undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isTemplateRef(value) {
        if (value) {
            return value instanceof TemplateRef;
        }
        return false;
    }
    /**
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    isArray(options, value) {
        if (options.length > 0 && value) {
            return value instanceof Array;
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
ActionSheetComponent.decorators = [
    { type: Component, args: [{
                selector: 'ActionSheet',
                template: "<div class=\"{{option.prefixCls}}-mask {{option.maskTransitionName}}\"></div>\n<div role=\"dialog\" class=\"{{option.prefixCls}}-wrap {{option.transitionName}}\" (click)=\"option.maskClose(-1, 0, $event)\">\n  <div role=\"document\"\n       class=\"{{option.prefixCls}}\"\n       [ngClass]=\"showShare(option)\">\n    <div class=\"{{option.prefixCls}}-content\">\n      <button aria-label=\"Close\" class=\"{{option.prefixCls}}-close\">\n        <span class=\"{{option.prefixCls}}-close-x\"></span>\n      </button>\n      <div class=\"{{option.prefixCls}}-body\">\n        <div>\n          <ng-container *ngIf=\"!isNoTitle(option.title)\">\n            <ng-template *ngIf=\"isTemplateRef(option.title)\" [ngTemplateOutlet]=\"option.title\"></ng-template>\n            <h3 *ngIf=\"!isTemplateRef(option.title)\" class=\"{{option.prefixCls}}-title\">{{option.title}}</h3>\n          </ng-container>\n          <ng-container *ngIf=\"!isNoTitle(option.message)\">\n            <ng-template *ngIf=\"isTemplateRef(option.message)\" [ngTemplateOutlet]=\"option.message\"></ng-template>\n            <div *ngIf=\"!isTemplateRef(option.message)\" class=\"{{option.prefixCls}}-message\">{{option.message}}</div>\n          </ng-container>\n          <ng-container [ngSwitch]=\"option.flag\">\n            <div *ngSwitchCase=\"'NORMAL'\" class=\"{{option.prefixCls}}-button-list\" role=\"group\">\n              <ng-container *ngFor=\"let item of option.options; let i = index;\">\n                  <div TouchFeedbackDirective class=\"{{option.prefixCls}}-button-list-item\" [className]=\"setActiveClassName(option, 'button-list-item')\">\n                      <div *ngIf=\"option.destructiveButtonIndex !== i && option.cancelButtonIndex !== i\"\n                           class=\"{{option.prefixCls}}-button-list-item\"\n                           (click)=\"option.onPress(i, 0, $event)\"\n                      >\n                        {{item}}\n                      </div>\n                      <div *ngIf=\"option.destructiveButtonIndex === i\"\n                           class=\"{{option.prefixCls}}-button-list-item {{option.prefixCls}}-destructive-button\"\n                           (click)=\"option.onPress(i, 0, $event)\"\n                      >\n                        {{item}}\n                      </div>\n                      <div *ngIf=\"option.cancelButtonIndex === i\"\n                           class=\"{{option.prefixCls}}-button-list-item {{option.prefixCls}}-cancel-button\"\n                           (click)=\"option.onPress(i, 0, $event)\"\n                      >\n                        {{item}}\n                        <span class=\"{{option.prefixCls}}-cancel-button-mask\"></span>\n                      </div>\n                  </div>\n              </ng-container>\n            </div>\n            <div *ngSwitchCase=\"'SHARE'\" class=\"{{option.prefixCls}}-share {{option.prefixCls}}-share-content\">\n              <div *ngIf=\"!isArray(option.options, option.options[0])\" class=\"{{option.prefixCls}}-share-list\">\n                <ng-container *ngFor=\"let item of option.options; let i = index;\">\n                  <div class=\"{{option.prefixCls}}-share-list-item\" (click)=\"option.onPress(i, 0, $event)\">\n                    <div class=\"{{option.prefixCls}}-share-list-item-icon\">\n                      <ng-template *ngIf=\"isTemplateRef(item.icon)\" [ngTemplateOutlet]=\"item.icon\"></ng-template>\n                      <div *ngIf=\"!isTemplateRef(item.icon)\" [innerHTML]=\"item.icon | safeHTML\"></div>\n                    </div>\n                    <div class=\"{{option.prefixCls}}-share-list-item-title\">{{item.title}}</div>\n                  </div>\n                </ng-container>\n              </div>\n              <ng-container *ngIf=\"isArray(option.options, option.options[0])\">\n                <div *ngFor=\"let items of option.options; let rowIndex = index\" class=\"{{option.prefixCls}}-share-list\">\n                  <ng-container *ngFor=\"let item of items; let i = index;\">\n                    <div class=\"{{option.prefixCls}}-share-list-item\" (click)=\"option.onPress(i, rowIndex, $event)\">\n                      <div class=\"{{option.prefixCls}}-share-list-item-icon\">\n                        <ng-template *ngIf=\"isTemplateRef(item.icon)\" [ngTemplateOutlet]=\"item.icon\"></ng-template>\n                        <div *ngIf=\"!isTemplateRef(item.icon)\" [innerHTML]=\"item.icon | safeHTML\"></div>\n                      </div>\n                      <div class=\"{{option.prefixCls}}-share-list-item-title\">{{item.title}}</div>\n                    </div>\n                  </ng-container>\n                </div>\n              </ng-container>\n              <div TouchFeedbackDirective [className]=\"setActiveClassName(option, 'share-cancel-button')\" class=\"{{option.prefixCls}}-share-cancel-button\">{{option.cancelButtonText}}</div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ActionSheetComponent.ctorParameters = () => [
    { type: LocaleProviderService }
];
if (false) {
    /** @type {?} */
    ActionSheetComponent.prototype.unsubscribe$;
    /** @type {?} */
    ActionSheetComponent.prototype.option;
    /**
     * @type {?}
     * @private
     */
    ActionSheetComponent.prototype.localeProviderService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXNoZWV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiYWN0aW9uLXNoZWV0L2FjdGlvbi1zaGVldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUFtQyxNQUFNLGVBQWUsQ0FBQztBQUMzRyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQU1uRixNQUFNLE9BQU8sb0JBQW9COzs7O0lBRy9CLFlBQW9CLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBRmhFLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUVnQyxDQUFDOzs7O0lBRXBFLFFBQVE7UUFDTixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVELGNBQWM7O2NBQ04sSUFBSSxHQUFHLElBQUk7UUFDakIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDMUQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRTtZQUN2RixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUN6RztRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7OztJQUVELE9BQU8sQ0FBQyxLQUFVLEVBQUUsUUFBUSxHQUFHLENBQUMsRUFBRSxLQUFLLElBQUcsQ0FBQzs7Ozs7SUFDM0MsU0FBUyxDQUFDLE1BQU07O2NBQ1IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxTQUFTLFFBQVEsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO1FBQ3RFLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7Ozs7O0lBRUQsa0JBQWtCLENBQUMsTUFBTSxFQUFFLE1BQU07UUFDL0IsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLFNBQVMsSUFBSSxNQUFNLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7O0lBRUQsU0FBUyxDQUFDLEtBQWdDO1FBQ3hDLE9BQU8sS0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLENBQUM7SUFDL0QsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsS0FBSztRQUNqQixJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sS0FBSyxZQUFZLFdBQVcsQ0FBQztTQUNyQztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7O0lBRUQsT0FBTyxDQUFDLE9BQVksRUFBRSxLQUFVO1FBQzlCLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksS0FBSyxFQUFFO1lBQy9CLE9BQU8sS0FBSyxZQUFZLEtBQUssQ0FBQztTQUMvQjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7O1lBekRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsZzhKQUE0QztnQkFDNUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7YUFDdEM7Ozs7WUFMUSxxQkFBcUI7Ozs7SUFPNUIsNENBQW1DOztJQUNuQyxzQ0FBWTs7Ozs7SUFDQSxxREFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlUmVmLCBWaWV3RW5jYXBzdWxhdGlvbiwgSG9zdExpc3RlbmVyLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTG9jYWxlUHJvdmlkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbG9jYWxlLXByb3ZpZGVyL2xvY2FsZS1wcm92aWRlci5zZXJ2aWNlJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ0FjdGlvblNoZWV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FjdGlvbi1zaGVldC5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgQWN0aW9uU2hlZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHVuc3Vic2NyaWJlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIG9wdGlvbjogYW55O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsZVByb3ZpZGVyU2VydmljZTogTG9jYWxlUHJvdmlkZXJTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubG9jYWxlUHJvdmlkZXIoKTtcbiAgfVxuXG4gIGxvY2FsZVByb3ZpZGVyKCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmIChzZWxmLm9wdGlvbi5sb2NhbGUgfHwgc2VsZi5vcHRpb24ubG9jYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNlbGYubG9jYWxlUHJvdmlkZXJTZXJ2aWNlLnNldExvY2FsZShzZWxmLm9wdGlvbi5sb2NhbGUpO1xuICAgIH1cbiAgICBzZWxmLmxvY2FsZVByb3ZpZGVyU2VydmljZS5sb2NhbGVDaGFuZ2UucGlwZSh0YWtlVW50aWwoc2VsZi51bnN1YnNjcmliZSQpKS5zdWJzY3JpYmUoXyA9PiB7XG4gICAgICBpZiAoc2VsZi5vcHRpb24uY2FuY2VsQnV0dG9uVGV4dCkge1xuICAgICAgICBzZWxmLm9wdGlvbi5jYW5jZWxCdXR0b25UZXh0ID0gc2VsZi5sb2NhbGVQcm92aWRlclNlcnZpY2UuZ2V0TG9jYWxlU3ViT2JqKCdBY3Rpb25TaGVldCcpWydkaXNtaXNzVGV4dCddO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb25QcmVzcyhpbmRleDogYW55LCByb3dJbmRleCA9IDAsIGV2ZW50KSB7fVxuICBzaG93U2hhcmUob3B0aW9uKSB7XG4gICAgY29uc3QgY2xzID0geyBbYCR7b3B0aW9uLnByZWZpeENsc30tc2hhcmVgXTogb3B0aW9uLmZsYWcgPT09ICdTSEFSRScgfTtcbiAgICByZXR1cm4gY2xzO1xuICB9XG5cbiAgc2V0QWN0aXZlQ2xhc3NOYW1lKG9wdGlvbiwgc3VmZml4KSB7XG4gICAgcmV0dXJuIFtgJHtvcHRpb24ucHJlZml4Q2xzfS0ke3N1ZmZpeH0tYWN0aXZlYF07XG4gIH1cblxuICBpc05vVGl0bGUodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICByZXR1cm4gdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XG4gIH1cblxuICBpc1RlbXBsYXRlUmVmKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNBcnJheShvcHRpb25zOiBhbnksIHZhbHVlOiBhbnkpIHtcbiAgICBpZiAob3B0aW9ucy5sZW5ndGggPiAwICYmIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBBcnJheTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCgpO1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ContentChildren, QueryList, HostBinding, Renderer2, ElementRef } from '@angular/core';
import { StepStatusEnum, StepDirectionEnum } from './step/step.component';
import { StepComponent } from './step/step.component';
var StepsComponent = /** @class */ (function () {
    function StepsComponent(_elf, _render) {
        this._elf = _elf;
        this._render = _render;
        this.prefixCls = 'am-steps';
        this._current = 0;
        this._status = StepStatusEnum.PROCESS;
        this._direction = StepDirectionEnum.VERTICAL;
        this.clsSteps = true;
    }
    Object.defineProperty(StepsComponent.prototype, "current", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value >= 0) {
                this._current = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepsComponent.prototype, "size", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepsComponent.prototype, "status", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._status = value;
            if (this.stepItems) {
                this.setStepStyle();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepsComponent.prototype, "direction", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._direction = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StepsComponent.prototype.setStepStyle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var itemCount = this.stepItems.length;
        /** @type {?} */
        var itemArr = this.stepItems['_results'];
        for (var index = 0; index < itemCount; index++) {
            /** @type {?} */
            var step = itemArr[index];
            step.stepNumber = index + 1;
            if (index < itemCount - 1 && itemArr[index + 1].status === StepStatusEnum.ERROR) {
                step.stepItemCls = step.stepItemCls
                    ? Object.assign(step.stepItemCls, { 'error-tail': true })
                    : { 'error-tail': true };
            }
            /** @type {?} */
            var icon = step.icon;
            if (!step.status) {
                if (index === this._current) {
                    step.status = this._status;
                }
                else if (index < this._current) {
                    step.status = StepStatusEnum.FINISH;
                }
                else {
                    step.status = StepStatusEnum.WAIT;
                }
            }
            if (!icon) {
                if (index < this._current) {
                    icon = 'check-circle-o';
                }
                else if (index > this._current) {
                    icon = 'ellipsis';
                    step.stepItemCls = step.stepItemCls
                        ? Object.assign(step.stepItemCls, { 'ellipsis-item': true })
                        : { 'ellipsis-item': true };
                }
                if ((this._status === StepStatusEnum.ERROR && index === this._current) || step.status === StepStatusEnum.ERROR) {
                    icon = 'cross-circle-o';
                }
            }
            step.icon = icon;
            step.iconSize = this._size === 'small' ? (this._status === StepStatusEnum.WAIT ? 'xxs' : 'xs') : 'md';
            step.setClass();
        }
    };
    /**
     * @return {?}
     */
    StepsComponent.prototype.setCls = /**
     * @return {?}
     */
    function () {
        if (this._direction === StepDirectionEnum.HORIZONTAL) {
            this.clsStepsLabelVtl = true;
            this.clsStepsHztl = true;
            this.clsStepsVtl = false;
        }
        else if (this._direction === StepDirectionEnum.VERTICAL) {
            this.clsStepsVtl = true;
            this.clsStepsHztl = false;
        }
        if (this._size === 'small') {
            this.clsStepsSmall = true;
        }
        else {
            this.clsStepsSmall = false;
        }
    };
    /**
     * @return {?}
     */
    StepsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setCls();
    };
    /**
     * @return {?}
     */
    StepsComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.setStepStyle();
        }), 0);
    };
    StepsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Steps,nzm-steps',
                    template: "<ng-content></ng-content>"
                }] }
    ];
    /** @nocollapse */
    StepsComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    StepsComponent.propDecorators = {
        stepItems: [{ type: ContentChildren, args: [StepComponent,] }],
        current: [{ type: Input }],
        size: [{ type: Input }],
        status: [{ type: Input }],
        direction: [{ type: Input }],
        clsSteps: [{ type: HostBinding, args: ['class.am-steps',] }],
        clsStepsSmall: [{ type: HostBinding, args: ['class.am-steps-small',] }],
        clsStepsLabelVtl: [{ type: HostBinding, args: ['class.am-steps-label-vertical',] }],
        clsStepsVtl: [{ type: HostBinding, args: ['class.am-steps-vertical',] }],
        clsStepsHztl: [{ type: HostBinding, args: ['class.am-steps-horizontal',] }]
    };
    return StepsComponent;
}());
export { StepsComponent };
if (false) {
    /** @type {?} */
    StepsComponent.prototype.prefixCls;
    /**
     * @type {?}
     * @private
     */
    StepsComponent.prototype._current;
    /**
     * @type {?}
     * @private
     */
    StepsComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    StepsComponent.prototype._status;
    /**
     * @type {?}
     * @private
     */
    StepsComponent.prototype._direction;
    /**
     * @type {?}
     * @private
     */
    StepsComponent.prototype._stepsCls;
    /** @type {?} */
    StepsComponent.prototype.stepItems;
    /** @type {?} */
    StepsComponent.prototype.clsSteps;
    /** @type {?} */
    StepsComponent.prototype.clsStepsSmall;
    /** @type {?} */
    StepsComponent.prototype.clsStepsLabelVtl;
    /** @type {?} */
    StepsComponent.prototype.clsStepsVtl;
    /** @type {?} */
    StepsComponent.prototype.clsStepsHztl;
    /**
     * @type {?}
     * @private
     */
    StepsComponent.prototype._elf;
    /**
     * @type {?}
     * @private
     */
    StepsComponent.prototype._render;
}
//# sourceMappingURL=data:application/json;base64,
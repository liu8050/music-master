/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, QueryList, ViewChild, ElementRef, HostBinding, TemplateRef, EventEmitter, ContentChildren, ViewEncapsulation } from '@angular/core';
import { TabPaneComponent } from './tab-pane.component';
var TabsComponent = /** @class */ (function () {
    function TabsComponent() {
        this.prefixCls = 'am-tabs';
        this.selectedKey = 0;
        this.keyToSelect = 0;
        this.paneMoveStyle = 'translate3d(0, 0, 0)';
        this._startTime = 0;
        this._startPosition = 0;
        this._velocityThreshold = 0.3;
        this._tabDirection = 'horizontal';
        this._tabBarPosition = 'top';
        this.page = 5;
        this.swipeable = true;
        this.useOnPan = true;
        this.animated = true;
        this.distanceToChangeTab = 0.3;
        this.tabTitleSize = 0;
        this.tabBarActiveTextColor = '';
        this.tabBarInactiveTextColor = '';
        this.renderTabBar = null;
        this.tabBarBackgroundColor = '#FFF';
        this.prerenderingSiblingsNumber = -1;
        this.tabBarTextStyle = {};
        /**
         * should be removed when https://github.com/angular/angular/issues/20810 resolved *
         */
        this.tabPanesContent = null;
        this.onChange = new EventEmitter();
        this.onTabClick = new EventEmitter();
        this.amTabs = true;
        this.amTabsTop = true;
        this.amTabsLeft = false;
        this.amTabsRight = false;
        this.amTabsBottom = false;
        this.amTabsVertical = false;
        this.amTabsHorizontal = true;
    }
    Object.defineProperty(TabsComponent.prototype, "activeTab", {
        get: /**
         * @return {?}
         */
        function () {
            return this.selectedKey;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.keyToSelect = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabsComponent.prototype, "tabBarPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tabBarPosition;
        },
        set: /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this._tabBarPosition = position;
            switch (position) {
                case 'top':
                    this.amTabsTop = true;
                    this.amTabsLeft = false;
                    this.amTabsRight = false;
                    this.amTabsBottom = false;
                    break;
                case 'left':
                    this.amTabsTop = false;
                    this.amTabsLeft = true;
                    this.amTabsRight = false;
                    this.amTabsBottom = false;
                    break;
                case 'bottom':
                    this.amTabsTop = false;
                    this.amTabsLeft = false;
                    this.amTabsRight = false;
                    this.amTabsBottom = true;
                    break;
                case 'right':
                    this.amTabsTop = false;
                    this.amTabsLeft = false;
                    this.amTabsRight = true;
                    this.amTabsBottom = false;
                    break;
                default:
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabsComponent.prototype, "tabDirection", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tabDirection;
        },
        set: /**
         * @param {?} direction
         * @return {?}
         */
        function (direction) {
            this._tabDirection = direction;
            switch (direction) {
                case 'horizontal':
                    this.amTabsHorizontal = true;
                    this.amTabsVertical = false;
                    break;
                case 'vertical':
                    this.amTabsHorizontal = false;
                    this.amTabsVertical = true;
                    break;
                default:
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    TabsComponent.prototype.clickTab = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.selectedKey !== index) {
            this.keyToSelect = index;
            this.onTabClick.emit({ index: this.keyToSelect });
        }
    };
    /**
     * @return {?}
     */
    TabsComponent.prototype.getCurrentTabPanes = /**
     * @return {?}
     */
    function () {
        return this.tabPanesContent || this.tabPanes;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TabsComponent.prototype.onTouchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._startTime = event.timeStamp;
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            if ('horizontal' === this._tabDirection) {
                this._startPosition =
                    event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientX;
            }
            else if ('vertical' === this._tabDirection) {
                this._startPosition =
                    event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientY;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TabsComponent.prototype.onTouchMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            if ('horizontal' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientX - this._startPosition;
                if (distance < 0 && this.activeTab === this.getCurrentTabPanes().length - 1) {
                    return;
                }
                else if (distance > 0 && this.activeTab === 0) {
                    return;
                }
                // velocity 小于阈值才认为是pan操作
                if (this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    this.useOnPan &&
                    this.swipeable &&
                    this.animated) {
                    this.paneMoveStyle = 'translate3d(calc(-' + this.selectedKey * 100 + '% + ' + distance + 'px), 0, 0 )';
                }
            }
            else if ('vertical' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientY - this._startPosition;
                if (distance < 0 && this.activeTab === this.getCurrentTabPanes().length - 1) {
                    return;
                }
                else if (distance > 0 && this.activeTab === 0) {
                    return;
                }
                if (this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    this.useOnPan &&
                    this.swipeable &&
                    this.animated) {
                    this.paneMoveStyle = 'translate3d(0, calc(-' + this.selectedKey * 100 + '% + ' + distance + 'px, 0 )';
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TabsComponent.prototype.onTouchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            if ('horizontal' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientX - this._startPosition;
                /** @type {?} */
                var distanceToChangeTabPx = this.tabContent.nativeElement.offsetWidth * this.distanceToChangeTab;
                if ((this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    (this.useOnPan && this.swipeable && Math.abs(distance) > distanceToChangeTabPx)) ||
                    (this.getVelocity(distance, event.timeStamp - this._startTime) > this._velocityThreshold &&
                        (this.swipeable && Math.abs(distance) > distanceToChangeTabPx / 2))) {
                    if (distance < 0 && this.activeTab < this.getCurrentTabPanes().length - 1) {
                        this.keyToSelect++;
                    }
                    else if (distance > 0 && this.activeTab > 0) {
                        this.keyToSelect--;
                    }
                }
                this.paneMoveStyle = 'translate3d(-' + this.selectedKey * 100 + '%, 0, 0 )';
            }
            else if ('vertical' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientY - this._startPosition;
                /** @type {?} */
                var distanceToChangeTabPx = this.tabContent.nativeElement.offsetHeight * this.distanceToChangeTab;
                if ((this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    (this.useOnPan && this.swipeable && Math.abs(distance) > distanceToChangeTabPx)) ||
                    (this.getVelocity(distance, event.timeStamp - this._startTime) > this._velocityThreshold &&
                        (this.swipeable && Math.abs(distance) > distanceToChangeTabPx / 2))) {
                    if (distance < 0 && this.activeTab < this.getCurrentTabPanes().length - 1) {
                        this.keyToSelect++;
                    }
                    else if (distance > 0 && this.activeTab > 0) {
                        this.keyToSelect--;
                    }
                }
                this.paneMoveStyle = 'translate3d(0, -' + this.selectedKey * 100 + '%, 0 )';
            }
        }
    };
    /**
     * @return {?}
     */
    TabsComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.selectTabPane(this.keyToSelect);
        this.selectedKey = this.keyToSelect;
    };
    /**
     * @return {?}
     */
    TabsComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.keyToSelect !== this.selectedKey && this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            this.selectTabPane(this.keyToSelect);
            this.selectedKey = this.keyToSelect;
            this.onChange.emit({ index: this.selectedKey });
        }
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    TabsComponent.prototype.selectTabPane = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            /** @type {?} */
            var actualKeyToSelect = Math.min(this.getCurrentTabPanes().length - 1, Math.max(index || 0, 0));
            if ('horizontal' === this._tabDirection) {
                this.paneMoveStyle = 'translate3d(-' + actualKeyToSelect * 100 + '%, 0, 0 )';
            }
            else if ('vertical' === this._tabDirection) {
                this.paneMoveStyle = 'translate3d(0, -' + actualKeyToSelect * 100 + '%, 0 )';
            }
        }
    };
    /**
     * @private
     * @param {?} deltaDistance
     * @param {?} deltaTime
     * @return {?}
     */
    TabsComponent.prototype.getVelocity = /**
     * @private
     * @param {?} deltaDistance
     * @param {?} deltaTime
     * @return {?}
     */
    function (deltaDistance, deltaTime) {
        return Math.abs(deltaDistance / deltaTime);
    };
    TabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Tabs, nzm-tabs',
                    template: "<ng-container>\n  <ng-template *ngIf=\"'top' === tabBarPosition || 'left' === tabBarPosition\"\n               [ngTemplateOutlet]=\"renderTabBar || renderDefaultTabBar\">\n  </ng-template>\n  <div #TabContent\n       class=\"{{prefixCls}}-content-wrap\"\n       [ngClass]=\"{'am-tabs-content-wrap-animated': animated}\"\n       [ngStyle]=\"{'transform': paneMoveStyle, 'webkitTransform': paneMoveStyle}\"\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd($event)\"\n  >\n    <div tab-pane-body\n         *ngFor=\"let tabPane of getCurrentTabPanes(); let i = index\"\n         [active]=\"i === selectedKey\"\n         [prerender]=\"prerenderingSiblingsNumber < 0 || ((selectedKey - i <= prerenderingSiblingsNumber) && (selectedKey - i + prerenderingSiblingsNumber >= 0))\"\n         [content]=\"tabPane.content\"\n    ></div>\n  </div>\n  <ng-template *ngIf=\"'bottom' === tabBarPosition || 'right' === tabBarPosition\"\n               [ngTemplateOutlet]=\"renderTabBar || renderDefaultTabBar\"\n  ></ng-template>\n</ng-container>\n\n<ng-template #renderDefaultTabBar>\n  <DefaultTabBar #DefaultTabBar\n                 [page]=\"page\"\n                 [animated]=\"animated\"\n                 [activeTab]=\"selectedKey\"\n                 [tabTitleSize]=\"tabTitleSize\"\n                 [tabBarPosition]=\"tabBarPosition\"\n                 [tabBarBackgroundColor]=\"tabBarBackgroundColor\"\n                 [tabBarUnderlineStyle]=\"tabBarUnderlineStyle\"\n  >\n    <div #TabTitle\n         *ngFor=\"let tabPane of getCurrentTabPanes(); let i = index\"\n         class=\"{{prefixCls}}-default-bar-tab\"\n         [ngClass]=\"{'am-tabs-default-bar-tab-active': i === selectedKey, 'am-tabs-default-bar-tab-disabled': tabPane.disabled}\"\n         [ngStyle]=\"tabBarTextStyle\"\n         [style.color]=\"i === selectedKey ? tabBarActiveTextColor : tabBarInactiveTextColor\"\n         (click)=\"clickTab(i)\"\n    >\n      <ng-container *ngIf=\"tabPane.isTitleString; else titleTemplate\">\n        {{tabPane.title}}\n      </ng-container>\n      <ng-template #titleTemplate>\n        <ng-template [ngTemplateOutlet]=\"tabPane.title\"></ng-template>\n      </ng-template>\n    </div>\n  </DefaultTabBar>\n</ng-template>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    TabsComponent.ctorParameters = function () { return []; };
    TabsComponent.propDecorators = {
        tabPanes: [{ type: ContentChildren, args: [TabPaneComponent, { descendants: false },] }],
        tabContent: [{ type: ViewChild, args: ['TabContent',] }],
        tabsBarSwipe: [{ type: ViewChild, args: ['TabsBarSwipe',] }],
        defaultTabBar: [{ type: ViewChild, args: ['DefaultTabBar',] }],
        tabsBarContainer: [{ type: ViewChild, args: ['TabsBarContainer',] }],
        page: [{ type: Input }],
        swipeable: [{ type: Input }],
        useOnPan: [{ type: Input }],
        animated: [{ type: Input }],
        tabBarUnderlineStyle: [{ type: Input }],
        distanceToChangeTab: [{ type: Input }],
        tabTitleSize: [{ type: Input }],
        tabBarActiveTextColor: [{ type: Input }],
        tabBarInactiveTextColor: [{ type: Input }],
        renderTabBar: [{ type: Input }],
        tabBarBackgroundColor: [{ type: Input }],
        prerenderingSiblingsNumber: [{ type: Input }],
        tabBarTextStyle: [{ type: Input }],
        tabPanesContent: [{ type: Input }],
        activeTab: [{ type: Input }],
        tabBarPosition: [{ type: Input }],
        tabDirection: [{ type: Input }],
        onChange: [{ type: Output }],
        onTabClick: [{ type: Output }],
        amTabs: [{ type: HostBinding, args: ['class.am-tabs',] }],
        amTabsTop: [{ type: HostBinding, args: ['class.am-tabs-top',] }],
        amTabsLeft: [{ type: HostBinding, args: ['class.am-tabs-left',] }],
        amTabsRight: [{ type: HostBinding, args: ['class.am-tabs-right',] }],
        amTabsBottom: [{ type: HostBinding, args: ['class.am-tabs-bottom',] }],
        amTabsVertical: [{ type: HostBinding, args: ['class.am-tabs-vertical',] }],
        amTabsHorizontal: [{ type: HostBinding, args: ['class.am-tabs-horizontal',] }]
    };
    return TabsComponent;
}());
export { TabsComponent };
if (false) {
    /** @type {?} */
    TabsComponent.prototype.prefixCls;
    /** @type {?} */
    TabsComponent.prototype.selectedKey;
    /** @type {?} */
    TabsComponent.prototype.keyToSelect;
    /** @type {?} */
    TabsComponent.prototype.paneMoveStyle;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype._startTime;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype._startPosition;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype._velocityThreshold;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype._tabDirection;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype._tabBarPosition;
    /** @type {?} */
    TabsComponent.prototype.tabPanes;
    /** @type {?} */
    TabsComponent.prototype.tabContent;
    /** @type {?} */
    TabsComponent.prototype.tabsBarSwipe;
    /** @type {?} */
    TabsComponent.prototype.defaultTabBar;
    /** @type {?} */
    TabsComponent.prototype.tabsBarContainer;
    /** @type {?} */
    TabsComponent.prototype.page;
    /** @type {?} */
    TabsComponent.prototype.swipeable;
    /** @type {?} */
    TabsComponent.prototype.useOnPan;
    /** @type {?} */
    TabsComponent.prototype.animated;
    /** @type {?} */
    TabsComponent.prototype.tabBarUnderlineStyle;
    /** @type {?} */
    TabsComponent.prototype.distanceToChangeTab;
    /** @type {?} */
    TabsComponent.prototype.tabTitleSize;
    /** @type {?} */
    TabsComponent.prototype.tabBarActiveTextColor;
    /** @type {?} */
    TabsComponent.prototype.tabBarInactiveTextColor;
    /** @type {?} */
    TabsComponent.prototype.renderTabBar;
    /** @type {?} */
    TabsComponent.prototype.tabBarBackgroundColor;
    /** @type {?} */
    TabsComponent.prototype.prerenderingSiblingsNumber;
    /** @type {?} */
    TabsComponent.prototype.tabBarTextStyle;
    /**
     * should be removed when https://github.com/angular/angular/issues/20810 resolved *
     * @type {?}
     */
    TabsComponent.prototype.tabPanesContent;
    /** @type {?} */
    TabsComponent.prototype.onChange;
    /** @type {?} */
    TabsComponent.prototype.onTabClick;
    /** @type {?} */
    TabsComponent.prototype.amTabs;
    /** @type {?} */
    TabsComponent.prototype.amTabsTop;
    /** @type {?} */
    TabsComponent.prototype.amTabsLeft;
    /** @type {?} */
    TabsComponent.prototype.amTabsRight;
    /** @type {?} */
    TabsComponent.prototype.amTabsBottom;
    /** @type {?} */
    TabsComponent.prototype.amTabsVertical;
    /** @type {?} */
    TabsComponent.prototype.amTabsHorizontal;
}
//# sourceMappingURL=data:application/json;base64,
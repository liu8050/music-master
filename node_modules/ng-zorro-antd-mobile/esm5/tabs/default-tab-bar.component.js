/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, QueryList, Renderer2, ViewChild, ElementRef, HostBinding, ContentChildren, ChangeDetectorRef } from '@angular/core';
var DefaultTabBarComponent = /** @class */ (function () {
    function DefaultTabBarComponent(_renderer, _ref) {
        this._renderer = _renderer;
        this._ref = _ref;
        this.prefixCls = 'am-tabs-default-bar';
        this.inkBarStyle = {};
        this.tabsBarStyle = {};
        this.showPrev = false;
        this.showNext = false;
        this.selectedKey = 0;
        this.inkBarOffSet = 0;
        this.inkBarLength = 0;
        this.tabBarNavSwipedPosition = 0;
        this.tabBarNavSwipingPosition = 0;
        this._startPosition = 0;
        this.page = 5;
        this.animated = true;
        this.tabBarBackgroundColor = '#FFF';
        this.tabTitleSize = 0;
        this.tabBarPosition = 'top';
        this.tabBarWrap = true;
        this.getTabSize = (/**
         * @param {?} page
         * @param {?} tabLength
         * @return {?}
         */
        function (page, tabLength) { return 100 / Math.min(page, tabLength); });
    }
    Object.defineProperty(DefaultTabBarComponent.prototype, "activeTab", {
        get: /**
         * @return {?}
         */
        function () {
            return this.selectedKey;
        },
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            if (index !== this.selectedKey) {
                this.selectedKey = index;
                if (this.tabTitles && this.tabTitles.length > 0) {
                    this.setTabBarStyleCenter();
                    this.setInkBarStatus(this.selectedKey);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    DefaultTabBarComponent.prototype.onTouchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if ((this.tabTitleSize > 0 &&
            (this.tabTitleSize * this.tabTitles.length >
                (('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) ?
                    this.tabsBarSwipe.nativeElement.offsetWidth :
                    this.tabsBarSwipe.nativeElement.offsetHeight))) || (this.tabTitleSize <= 0 && this.page < this.tabTitles.length)) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this._startPosition = event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientX;
            }
            else {
                this._startPosition = event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientY;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DefaultTabBarComponent.prototype.onTouchMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        if ((this.tabTitleSize > 0 &&
            (this.tabTitleSize * this.tabTitles.length >
                (('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) ?
                    this.tabsBarSwipe.nativeElement.offsetWidth :
                    this.tabsBarSwipe.nativeElement.offsetHeight))) || (this.tabTitleSize <= 0 && this.page < this.tabTitles.length)) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this.setTabBarNavSwipingPosition(event.changedTouches[0].clientX - this._startPosition, this.tabTitles.first.nativeElement.offsetWidth, this.tabsBarSwipe.nativeElement.offsetWidth);
                this.tabsBarStyle = {
                    transition: '0ms',
                    transform: 'translate3d(' + this.tabBarNavSwipingPosition + 'px, 0px, 0px)',
                    webkitTransform: 'translate3d(' + this.tabBarNavSwipingPosition + 'px, 0px, 0px)'
                };
            }
            else {
                this.setTabBarNavSwipingPosition(event.changedTouches[0].clientY - this._startPosition, this.tabTitles.first.nativeElement.offsetHeight, this.tabsBarSwipe.nativeElement.offsetHeight);
                this.tabsBarStyle = {
                    transition: '0ms',
                    transform: 'translate3d(0, ' + this.tabBarNavSwipingPosition + 'px, 0px)',
                    webkitTransform: 'translate3d(0, ' + this.tabBarNavSwipingPosition + 'px, 0px)'
                };
            }
        }
    };
    /**
     * @return {?}
     */
    DefaultTabBarComponent.prototype.onTouchEnd = /**
     * @return {?}
     */
    function () {
        if ((this.tabTitleSize > 0 &&
            (this.tabTitleSize * this.tabTitles.length >
                (('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) ?
                    this.tabsBarSwipe.nativeElement.offsetWidth :
                    this.tabsBarSwipe.nativeElement.offsetHeight))) || (this.tabTitleSize <= 0 && this.page < this.tabTitles.length)) {
            this.tabBarNavSwipedPosition = this.tabBarNavSwipingPosition;
        }
    };
    /**
     * @return {?}
     */
    DefaultTabBarComponent.prototype.onContentChange = /**
     * @return {?}
     */
    function () {
        this.setTabsStyle();
        this.setInkBarStatus(this.selectedKey);
    };
    /**
     * @return {?}
     */
    DefaultTabBarComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setTabsStyle();
        this.setTabBarStyleCenter();
        this.setInkBarStatus(this.selectedKey);
    };
    /**
     * @private
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setTabsStyle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tabTitles && this.tabTitles.length > 0) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this.tabTitles.forEach((/**
                 * @param {?} tabTitle
                 * @return {?}
                 */
                function (tabTitle) {
                    _this._renderer.setStyle(tabTitle.nativeElement, 'width', _this.tabTitleSize > 0 ? (_this.tabTitleSize + 'px') : (_this.getTabSize(_this.page, _this.tabTitles.length) + '%'));
                }));
            }
            else {
                this.tabTitles.forEach((/**
                 * @param {?} tabTitle
                 * @return {?}
                 */
                function (tabTitle) {
                    _this._renderer.setStyle(tabTitle.nativeElement, 'height', _this.tabTitleSize > 0 ? (_this.tabTitleSize + 'px') : _this.getTabSize(_this.page, _this.tabTitles.length) + '%');
                }));
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setTabBarStyleCenter = /**
     * @private
     * @return {?}
     */
    function () {
        if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
            this.setTabBarNavSwipedPosition(this.tabTitleSize > 0 ? this.tabTitleSize :
                (this.tabsBarSwipe.nativeElement.offsetWidth / Math.min(this.tabTitles.length, this.page)), this.tabsBarSwipe.nativeElement.offsetWidth);
            this.tabsBarStyle = {
                transform: 'translate3d(' + this.tabBarNavSwipedPosition + 'px, 0px, 0px)',
                webkitTransform: 'translate3d(' + this.tabBarNavSwipedPosition + ', 0px, 0px)'
            };
        }
        else {
            this.setTabBarNavSwipedPosition(this.tabTitleSize > 0 ? this.tabTitleSize :
                (this.tabsBarSwipe.nativeElement.offsetHeight / Math.min(this.tabTitles.length, this.page)), this.tabsBarSwipe.nativeElement.offsetHeight);
            this.tabsBarStyle = {
                transform: 'translate3d(0, ' + this.tabBarNavSwipedPosition + 'px, 0px)',
                webkitTransform: 'translate3d(0, ' + this.tabBarNavSwipedPosition + 'px, 0px)'
            };
        }
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setInkBarStatus = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.tabTitles && this.tabTitles.length > 0) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this.inkBarOffSet = this.tabTitles.toArray()[key].nativeElement.offsetLeft;
                this.inkBarLength = this.tabTitles.toArray()[key].nativeElement.style.width;
                this.inkBarStyle = {
                    width: this.inkBarLength,
                    left: this.tabTitleSize > 0 ?
                        (this.selectedKey * this.tabTitleSize + 'px') :
                        ((this.selectedKey * 100) / Math.min(this.tabTitles.length, this.page) + '%')
                };
                Object.assign(this.inkBarStyle, this.tabBarUnderlineStyle);
            }
            else {
                this.inkBarOffSet = this.tabTitles.toArray()[key].nativeElement.offsetTop;
                this.inkBarLength = this.tabTitles.toArray()[key].nativeElement.style.height;
                this.inkBarStyle = {
                    height: this.inkBarLength,
                    top: this.tabTitleSize > 0 ?
                        (this.selectedKey * this.tabTitleSize + 'px') :
                        ((this.selectedKey * 100) / Math.min(this.tabTitles.length, this.page) + '%')
                };
                Object.assign(this.inkBarStyle, this.tabBarUnderlineStyle);
            }
            this._ref.detectChanges();
        }
    };
    /**
     * @private
     * @param {?} swipingDistance
     * @param {?} swipingItemLength
     * @param {?} viewportLength
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setTabBarNavSwipingPosition = /**
     * @private
     * @param {?} swipingDistance
     * @param {?} swipingItemLength
     * @param {?} viewportLength
     * @return {?}
     */
    function (swipingDistance, swipingItemLength, viewportLength) {
        if (this.tabBarNavSwipedPosition + swipingDistance > 0) {
            this.tabBarNavSwipingPosition = 0;
        }
        else if ((this.tabBarNavSwipedPosition + swipingDistance) <
            (viewportLength - swipingItemLength * this.tabTitles.length)) {
            this.tabBarNavSwipingPosition = viewportLength - swipingItemLength * this.tabTitles.length;
            this.showNext = false;
        }
        else {
            this.tabBarNavSwipingPosition = this.tabBarNavSwipedPosition + swipingDistance;
            this.showNext = true;
        }
        if (this.tabBarNavSwipingPosition < 0) {
            this.showPrev = true;
        }
        else {
            this.showPrev = false;
        }
    };
    /**
     * @private
     * @param {?} swipingItemLength
     * @param {?} viewportLength
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setTabBarNavSwipedPosition = /**
     * @private
     * @param {?} swipingItemLength
     * @param {?} viewportLength
     * @return {?}
     */
    function (swipingItemLength, viewportLength) {
        if (this.selectedKey * swipingItemLength + this.tabBarNavSwipedPosition <= 0) {
            if (0 === this.selectedKey) {
                this.tabBarNavSwipedPosition = 0;
            }
            else {
                this.tabBarNavSwipedPosition = (1 - this.selectedKey) * swipingItemLength;
            }
        }
        else if ((this.selectedKey + 1) * swipingItemLength >=
            (viewportLength - this.tabBarNavSwipedPosition)) {
            if (this.tabTitles.length - 1 === this.selectedKey) {
                this.tabBarNavSwipedPosition = viewportLength - (this.selectedKey + 1) * swipingItemLength;
            }
            else {
                this.tabBarNavSwipedPosition = viewportLength - (this.selectedKey + 2) * swipingItemLength;
            }
        }
        if (this.tabBarNavSwipedPosition < 0) {
            this.showPrev = true;
        }
        else {
            this.showPrev = false;
        }
        if ((this.tabBarNavSwipedPosition + swipingItemLength * this.tabTitles.length - viewportLength) > 0) {
            this.showNext = true;
        }
        else {
            this.showNext = false;
        }
    };
    DefaultTabBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'DefaultTabBar, nzm-default-tab-bar',
                    template: "<div class=\"{{prefixCls}} {{prefixCls}}-{{tabBarPosition}}\"\n     [ngClass]=\"{'am-tabs-default-bar-animated' : animated}\"\n     [ngStyle]=\"{backgroundColor: tabBarBackgroundColor || '#FFF'}\"\n>\n  <div *ngIf=\"showPrev\" class=\"{{prefixCls}}-prevpage\"></div>\n  <div #TabsBarSwipe\n       class=\"{{prefixCls}}-content\"\n       [ngStyle]=\"tabsBarStyle\"\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd()\"\n       (cdkObserveContent)=\"onContentChange()\"\n  >\n    <ng-content></ng-content>\n    <div class=\"{{prefixCls}}-underline\" [ngStyle]=\"inkBarStyle\">\n    </div>\n  </div>\n  <div *ngIf=\"showNext\" class=\"{{prefixCls}}-nextpage\"></div>\n</div>"
                }] }
    ];
    /** @nocollapse */
    DefaultTabBarComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    DefaultTabBarComponent.propDecorators = {
        tabTitles: [{ type: ContentChildren, args: ['TabTitle',] }],
        tabsBarSwipe: [{ type: ViewChild, args: ['TabsBarSwipe',] }],
        page: [{ type: Input }],
        animated: [{ type: Input }],
        tabBarUnderlineStyle: [{ type: Input }],
        tabBarBackgroundColor: [{ type: Input }],
        tabTitleSize: [{ type: Input }],
        tabBarPosition: [{ type: Input }],
        activeTab: [{ type: Input }],
        tabBarWrap: [{ type: HostBinding, args: ['class.am-tabs-tab-bar-wrap',] }]
    };
    return DefaultTabBarComponent;
}());
export { DefaultTabBarComponent };
if (false) {
    /** @type {?} */
    DefaultTabBarComponent.prototype.prefixCls;
    /** @type {?} */
    DefaultTabBarComponent.prototype.inkBarStyle;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabsBarStyle;
    /** @type {?} */
    DefaultTabBarComponent.prototype.showPrev;
    /** @type {?} */
    DefaultTabBarComponent.prototype.showNext;
    /** @type {?} */
    DefaultTabBarComponent.prototype.selectedKey;
    /** @type {?} */
    DefaultTabBarComponent.prototype.inkBarOffSet;
    /** @type {?} */
    DefaultTabBarComponent.prototype.inkBarLength;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabBarNavSwipedPosition;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabBarNavSwipingPosition;
    /**
     * @type {?}
     * @private
     */
    DefaultTabBarComponent.prototype._startPosition;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabTitles;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabsBarSwipe;
    /** @type {?} */
    DefaultTabBarComponent.prototype.page;
    /** @type {?} */
    DefaultTabBarComponent.prototype.animated;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabBarUnderlineStyle;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabBarBackgroundColor;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabTitleSize;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabBarPosition;
    /** @type {?} */
    DefaultTabBarComponent.prototype.tabBarWrap;
    /**
     * @type {?}
     * @private
     */
    DefaultTabBarComponent.prototype.getTabSize;
    /**
     * @type {?}
     * @private
     */
    DefaultTabBarComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    DefaultTabBarComponent.prototype._ref;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, ComponentFactoryResolver } from '@angular/core';
import { CustomKeyboardComponent } from '../custom-keyboard/custom-keyboard.component';
var CustomInputService = /** @class */ (function () {
    function CustomInputService(_appRef, _cfr) {
        this._appRef = _appRef;
        this._cfr = _cfr;
        CustomInputService.appRef = this._appRef;
        CustomInputService._inputCompFactory = this._cfr.resolveComponentFactory(CustomKeyboardComponent);
    }
    /**
     * @return {?}
     */
    CustomInputService.getShowStatus = /**
     * @return {?}
     */
    function () {
        return CustomInputService.isShow;
    };
    /**
     * @return {?}
     */
    CustomInputService.showKeyboard = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a;
        if (!this.isShow) {
            if (this.compRef) {
                this.compRef.instance.wrapperCls = (_a = {},
                    _a["am-number-keyboard-wrapper"] = true,
                    _a);
            }
            else {
                /** @type {?} */
                var container = document.querySelector("#" + this._keyboardPrefixCls + "-container");
                if (!container) {
                    container = document.createElement('div');
                    container.setAttribute('id', this._keyboardPrefixCls + "-container");
                    document.body.appendChild(container);
                    container.appendChild(document.createElement(CustomInputService._inputCompFactory.selector));
                    this.compRef = this.appRef.bootstrap(CustomInputService._inputCompFactory);
                    this.compRef.instance.onClick.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this.clickValue = e;
                    }));
                }
            }
            this.isShow = true;
        }
    };
    /**
     * @return {?}
     */
    CustomInputService.hideKeyboard = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.compRef && this.isShow) {
            this.isShow = false;
            this.compRef.instance.wrapperCls = (_a = {},
                _a["am-number-keyboard-wrapper"] = true,
                _a["am-number-keyboard-wrapper-hide"] = true,
                _a);
        }
    };
    CustomInputService.compRef = null;
    CustomInputService.appRef = null;
    CustomInputService.isShow = false;
    CustomInputService.clickValue = null;
    CustomInputService._inputCompFactory = null;
    CustomInputService._keyboardPrefixCls = 'am-number-keyboard';
    CustomInputService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CustomInputService.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver }
    ]; };
    return CustomInputService;
}());
export { CustomInputService };
if (false) {
    /** @type {?} */
    CustomInputService.compRef;
    /** @type {?} */
    CustomInputService.appRef;
    /** @type {?} */
    CustomInputService.isShow;
    /** @type {?} */
    CustomInputService.clickValue;
    /** @type {?} */
    CustomInputService._inputCompFactory;
    /** @type {?} */
    CustomInputService._keyboardPrefixCls;
    /**
     * @type {?}
     * @private
     */
    CustomInputService.prototype._appRef;
    /**
     * @type {?}
     * @private
     */
    CustomInputService.prototype._cfr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWlucHV0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbImlucHV0LWl0ZW0vY3VzdG9tLWlucHV0L2N1c3RvbS1pbnB1dC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUdWLGNBQWMsRUFDZCx3QkFBd0IsRUFDekIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFdkY7SUFTRSw0QkFBb0IsT0FBdUIsRUFBVSxJQUE4QjtRQUEvRCxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQTBCO1FBQ2pGLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3pDLGtCQUFrQixDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNwRyxDQUFDOzs7O0lBRU0sZ0NBQWE7OztJQUFwQjtRQUNFLE9BQU8sa0JBQWtCLENBQUMsTUFBTSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFTSwrQkFBWTs7O0lBQW5CO1FBQUEsaUJBcUJDOztRQXBCQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVU7b0JBQzlCLEdBQUMsNEJBQTRCLElBQUcsSUFBSTt1QkFDckMsQ0FBQzthQUNIO2lCQUFNOztvQkFDRCxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFJLElBQUksQ0FBQyxrQkFBa0IsZUFBWSxDQUFDO2dCQUMvRSxJQUFJLENBQUMsU0FBUyxFQUFFO29CQUNkLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUMxQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksRUFBSyxJQUFJLENBQUMsa0JBQWtCLGVBQVksQ0FBQyxDQUFDO29CQUNyRSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDckMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQzdGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDM0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVM7Ozs7b0JBQUMsVUFBQSxDQUFDO3dCQUN2QyxLQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztvQkFDdEIsQ0FBQyxFQUFDLENBQUM7aUJBQ0o7YUFDRjtZQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQzs7OztJQUVNLCtCQUFZOzs7SUFBbkI7O1FBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVTtnQkFDOUIsR0FBQyw0QkFBNEIsSUFBRyxJQUFJO2dCQUNwQyxHQUFDLGlDQUFpQyxJQUFHLElBQUk7bUJBQzFDLENBQUM7U0FDSDtJQUNILENBQUM7SUEvQ00sMEJBQU8sR0FBc0IsSUFBSSxDQUFDO0lBQ2xDLHlCQUFNLEdBQW1CLElBQUksQ0FBQztJQUM5Qix5QkFBTSxHQUFHLEtBQUssQ0FBQztJQUNmLDZCQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLG9DQUFpQixHQUE4QyxJQUFJLENBQUM7SUFDcEUscUNBQWtCLEdBQUcsb0JBQW9CLENBQUM7O2dCQVBsRCxVQUFVOzs7O2dCQUxULGNBQWM7Z0JBQ2Qsd0JBQXdCOztJQXNEMUIseUJBQUM7Q0FBQSxBQWxERCxJQWtEQztTQWpEWSxrQkFBa0I7OztJQUM3QiwyQkFBeUM7O0lBQ3pDLDBCQUFxQzs7SUFDckMsMEJBQXNCOztJQUN0Qiw4QkFBeUI7O0lBQ3pCLHFDQUEyRTs7SUFDM0Usc0NBQWlEOzs7OztJQUVyQyxxQ0FBK0I7Ozs7O0lBQUUsa0NBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5qZWN0YWJsZSxcbiAgQ29tcG9uZW50UmVmLFxuICBDb21wb25lbnRGYWN0b3J5LFxuICBBcHBsaWNhdGlvblJlZixcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ3VzdG9tS2V5Ym9hcmRDb21wb25lbnQgfSBmcm9tICcuLi9jdXN0b20ta2V5Ym9hcmQvY3VzdG9tLWtleWJvYXJkLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDdXN0b21JbnB1dFNlcnZpY2Uge1xuICBzdGF0aWMgY29tcFJlZjogQ29tcG9uZW50UmVmPGFueT4gPSBudWxsO1xuICBzdGF0aWMgYXBwUmVmOiBBcHBsaWNhdGlvblJlZiA9IG51bGw7XG4gIHN0YXRpYyBpc1Nob3cgPSBmYWxzZTtcbiAgc3RhdGljIGNsaWNrVmFsdWUgPSBudWxsO1xuICBzdGF0aWMgX2lucHV0Q29tcEZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8Q3VzdG9tS2V5Ym9hcmRDb21wb25lbnQ+ID0gbnVsbDtcbiAgc3RhdGljIF9rZXlib2FyZFByZWZpeENscyA9ICdhbS1udW1iZXIta2V5Ym9hcmQnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2FwcFJlZjogQXBwbGljYXRpb25SZWYsIHByaXZhdGUgX2NmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKSB7XG4gICAgQ3VzdG9tSW5wdXRTZXJ2aWNlLmFwcFJlZiA9IHRoaXMuX2FwcFJlZjtcbiAgICBDdXN0b21JbnB1dFNlcnZpY2UuX2lucHV0Q29tcEZhY3RvcnkgPSB0aGlzLl9jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoQ3VzdG9tS2V5Ym9hcmRDb21wb25lbnQpO1xuICB9XG5cbiAgc3RhdGljIGdldFNob3dTdGF0dXMoKSB7XG4gICAgcmV0dXJuIEN1c3RvbUlucHV0U2VydmljZS5pc1Nob3c7XG4gIH1cblxuICBzdGF0aWMgc2hvd0tleWJvYXJkKCkge1xuICAgIGlmICghdGhpcy5pc1Nob3cpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBSZWYpIHtcbiAgICAgICAgdGhpcy5jb21wUmVmLmluc3RhbmNlLndyYXBwZXJDbHMgPSB7XG4gICAgICAgICAgW2BhbS1udW1iZXIta2V5Ym9hcmQtd3JhcHBlcmBdOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dGhpcy5fa2V5Ym9hcmRQcmVmaXhDbHN9LWNvbnRhaW5lcmApO1xuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7dGhpcy5fa2V5Ym9hcmRQcmVmaXhDbHN9LWNvbnRhaW5lcmApO1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChDdXN0b21JbnB1dFNlcnZpY2UuX2lucHV0Q29tcEZhY3Rvcnkuc2VsZWN0b3IpKTtcbiAgICAgICAgICB0aGlzLmNvbXBSZWYgPSB0aGlzLmFwcFJlZi5ib290c3RyYXAoQ3VzdG9tSW5wdXRTZXJ2aWNlLl9pbnB1dENvbXBGYWN0b3J5KTtcbiAgICAgICAgICB0aGlzLmNvbXBSZWYuaW5zdGFuY2Uub25DbGljay5zdWJzY3JpYmUoZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrVmFsdWUgPSBlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmlzU2hvdyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGhpZGVLZXlib2FyZCgpIHtcbiAgICBpZiAodGhpcy5jb21wUmVmICYmIHRoaXMuaXNTaG93KSB7XG4gICAgICB0aGlzLmlzU2hvdyA9IGZhbHNlO1xuICAgICAgdGhpcy5jb21wUmVmLmluc3RhbmNlLndyYXBwZXJDbHMgPSB7XG4gICAgICAgIFtgYW0tbnVtYmVyLWtleWJvYXJkLXdyYXBwZXJgXTogdHJ1ZSxcbiAgICAgICAgW2BhbS1udW1iZXIta2V5Ym9hcmQtd3JhcHBlci1oaWRlYF06IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG4iXX0=
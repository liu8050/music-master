/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectorRef, Output, EventEmitter, ViewEncapsulation, HostBinding } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { AccordionService } from '../accordion.service';
import { isTemplateRef } from '../../core/util/check';
var AccordionGroupComponent = /** @class */ (function () {
    function AccordionGroupComponent(_accordionService, _cdr) {
        this._accordionService = _accordionService;
        this._cdr = _cdr;
        this.isShowChild = true;
        this.isOpened = false;
        this.disabled = false;
        this.onOpen = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onChange = new EventEmitter();
        this.isTemplateRef = isTemplateRef;
        this.amItem = true;
        this.isActive = this.isOpened;
        this.addon = true;
    }
    /**
     * @return {?}
     */
    AccordionGroupComponent.prototype.checkAndToggle = /**
     * @return {?}
     */
    function () {
        this.toggle();
    };
    Object.defineProperty(AccordionGroupComponent.prototype, "slide", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isOpened ? 'down' : 'up';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AccordionGroupComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        this.isShowChild = true;
        /** @type {?} */
        var isOpenedBeforeWeChange = this.isOpened;
        if (this._accordionService.accordion) {
            this._accordionService.component.closeAll();
        }
        this.isOpened = !isOpenedBeforeWeChange;
        if (this.isOpened) {
            this.onOpen.emit();
        }
        else {
            this.onClose.emit();
        }
        this.onChange.emit(this.isOpened);
    };
    /**
     * @return {?}
     */
    AccordionGroupComponent.prototype.openOnInitialization = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.isOpened = true;
            _this._cdr.detectChanges();
        }), 0);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AccordionGroupComponent.prototype.slideAnimationDoen = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.fromState === 'down' && event.toState === 'up') {
            this.isShowChild = false;
        }
    };
    AccordionGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'AccordionPanel',
                    template: "<div role=\"tab\"\n     class=\"am-accordion-header\"\n     data-scale=\"true\"\n     [attr.aria-expanded]=\"isOpened\"\n     (click)=\"checkAndToggle()\"\n>\n  <i class=\"arrow\"></i>\n  <div *ngIf=\"!isTemplateRef(header)\" [innerHTML]=\"header | safeHTML\"></div>\n  <ng-template *ngIf=\"isTemplateRef(header)\" [ngTemplateOutlet]=\"header\"></ng-template>\n</div>\n<div role=\"tabpanel\"\n     class=\"am-accordion-content\"\n     [ngClass]=\"{'am-accordion-content-active':isOpened}\"\n     [@slide]=\"slide\"\n     (@slide.done)=\"slideAnimationDoen($event)\"\n>\n  <div *ngIf=\"isShowChild\" class=\"am-accordion-content-box\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    animations: [
                        trigger('slide', [
                            state('up', style({ height: 0 })),
                            state('down', style({ height: '*' })),
                            transition('down => up', [animate(200, style({ height: 0 }))]),
                            transition('up => down', [
                                animate(200, style({
                                    height: '*'
                                }))
                            ])
                        ])
                    ]
                }] }
    ];
    /** @nocollapse */
    AccordionGroupComponent.ctorParameters = function () { return [
        { type: AccordionService },
        { type: ChangeDetectorRef }
    ]; };
    AccordionGroupComponent.propDecorators = {
        key: [{ type: Input }],
        header: [{ type: Input }],
        isOpened: [{ type: Input }],
        disabled: [{ type: Input }],
        onOpen: [{ type: Output }],
        onClose: [{ type: Output }],
        onChange: [{ type: Output }],
        amItem: [{ type: HostBinding, args: ['class.am-accordion-item',] }],
        isActive: [{ type: HostBinding, args: ['class.am-accordion-item-active',] }],
        addon: [{ type: HostBinding, args: ['class.addon',] }]
    };
    return AccordionGroupComponent;
}());
export { AccordionGroupComponent };
if (false) {
    /** @type {?} */
    AccordionGroupComponent.prototype.isShowChild;
    /** @type {?} */
    AccordionGroupComponent.prototype.key;
    /** @type {?} */
    AccordionGroupComponent.prototype.header;
    /** @type {?} */
    AccordionGroupComponent.prototype.isOpened;
    /** @type {?} */
    AccordionGroupComponent.prototype.disabled;
    /** @type {?} */
    AccordionGroupComponent.prototype.onOpen;
    /** @type {?} */
    AccordionGroupComponent.prototype.onClose;
    /** @type {?} */
    AccordionGroupComponent.prototype.onChange;
    /** @type {?} */
    AccordionGroupComponent.prototype.isTemplateRef;
    /** @type {?} */
    AccordionGroupComponent.prototype.amItem;
    /** @type {?} */
    AccordionGroupComponent.prototype.isActive;
    /** @type {?} */
    AccordionGroupComponent.prototype.addon;
    /**
     * @type {?}
     * @private
     */
    AccordionGroupComponent.prototype._accordionService;
    /**
     * @type {?}
     * @private
     */
    AccordionGroupComponent.prototype._cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiYWNjb3JkaW9uL2FjY29yZGlvbi1ncm91cC9hY2NvcmRpb24tZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxSCxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RDtJQTJDRSxpQ0FBb0IsaUJBQW1DLEVBQVUsSUFBdUI7UUFBcEUsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFrQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQW1CO1FBdEJ4RixnQkFBVyxHQUFZLElBQUksQ0FBQztRQU81QixhQUFRLEdBQVksS0FBSyxDQUFDO1FBRTFCLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFFMUIsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFNUIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFN0IsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDOUIsa0JBQWEsR0FBRyxhQUFhLENBQUM7UUFFaUIsV0FBTSxHQUFHLElBQUksQ0FBQztRQUNQLGFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzVDLFVBQUssR0FBRyxJQUFJLENBQUM7SUFFMkMsQ0FBQzs7OztJQUU1RixnREFBYzs7O0lBQWQ7UUFDRSxJ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LDJDQUM4Qjs7SUFDOUIsZ0RBQThCOztJQUU5Qix5Q0FBNkQ7O0lBQzdELDJDQUErRTs7SUFDL0Usd0NBQWdEOzs7OztJQUVwQyxvREFBMkM7Ozs7O0lBQUUsdUNBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBWaWV3RW5jYXBzdWxhdGlvbiwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFuaW1hdGUsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQWNjb3JkaW9uU2VydmljZSB9IGZyb20gJy4uL2FjY29yZGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IGlzVGVtcGxhdGVSZWYgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvY2hlY2snO1xuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICdAYW5ndWxhci9jb21waWxlci9zcmMvcmVuZGVyMy9yM19hc3QnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnQWNjb3JkaW9uUGFuZWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vYWNjb3JkaW9uLWdyb3VwLmNvbXBvbmVudC5odG1sJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ3NsaWRlJywgW1xuICAgICAgc3RhdGUoJ3VwJywgc3R5bGUoeyBoZWlnaHQ6IDAgfSkpLFxuICAgICAgc3RhdGUoJ2Rvd24nLCBzdHlsZSh7IGhlaWdodDogJyonIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJ2Rvd24gPT4gdXAnLCBbYW5pbWF0ZSgyMDAsIHN0eWxlKHsgaGVpZ2h0OiAwIH0pKV0pLFxuICAgICAgdHJhbnNpdGlvbigndXAgPT4gZG93bicsIFtcbiAgICAgICAgYW5pbWF0ZShcbiAgICAgICAgICAyMDAsXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgaGVpZ2h0OiAnKidcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICBdKVxuICAgIF0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uR3JvdXBDb21wb25lbnQge1xuICBpc1Nob3dDaGlsZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgQElucHV0KClcbiAga2V5OiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIGhlYWRlcjogc3RyaW5nIHwgVGVtcGxhdGU7XG4gIEBJbnB1dCgpXG4gIGlzT3BlbmVkOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIEBPdXRwdXQoKVxuICBvbk9wZW4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKVxuICBvbkNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KClcbiAgb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIGlzVGVtcGxhdGVSZWYgPSBpc1RlbXBsYXRlUmVmO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0tYWNjb3JkaW9uLWl0ZW0nKSBwdWJsaWMgYW1JdGVtID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1hY2NvcmRpb24taXRlbS1hY3RpdmUnKSBwdWJsaWMgaXNBY3RpdmUgPSB0aGlzLmlzT3BlbmVkO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFkZG9uJykgcHVibGljIGFkZG9uID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9hY2NvcmRpb25TZXJ2aWNlOiBBY2NvcmRpb25TZXJ2aWNlLCBwcml2YXRlIF9jZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIGNoZWNrQW5kVG9nZ2xlKCkge1xuICAgIHRoaXMudG9nZ2xlKCk7XG4gIH1cblxuICBnZXQgc2xpZGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pc09wZW5lZCA/ICdkb3duJyA6ICd1cCc7XG4gIH1cblxuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc1Nob3dDaGlsZCA9IHRydWU7XG4gICAgY29uc3QgaXNPcGVuZWRCZWZvcmVXZUNoYW5nZSA9IHRoaXMuaXNPcGVuZWQ7XG4gICAgaWYgKHRoaXMuX2FjY29yZGlvblNlcnZpY2UuYWNjb3JkaW9uKSB7XG4gICAgICB0aGlzLl9hY2NvcmRpb25TZXJ2aWNlLmNvbXBvbmVudC5jbG9zZUFsbCgpO1xuICAgIH1cbiAgICB0aGlzLmlzT3BlbmVkID0gIWlzT3BlbmVkQmVmb3JlV2VDaGFuZ2U7XG4gICAgaWYgKHRoaXMuaXNPcGVuZWQpIHtcbiAgICAgIHRoaXMub25PcGVuLmVtaXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbkNsb3NlLmVtaXQoKTtcbiAgICB9XG4gICAgdGhpcy5vbkNoYW5nZS5lbWl0KHRoaXMuaXNPcGVuZWQpO1xuICB9XG5cbiAgb3Blbk9uSW5pdGlhbGl6YXRpb24oKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmlzT3BlbmVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2Nkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBzbGlkZUFuaW1hdGlvbkRvZW4oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZnJvbVN0YXRlID09PSAnZG93bicgJiYgZXZlbnQudG9TdGF0ZSA9PT0gJ3VwJykge1xuICAgICAgdGhpcy5pc1Nob3dDaGlsZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19
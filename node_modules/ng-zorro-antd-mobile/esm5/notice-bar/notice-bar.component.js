/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { IconHandler } from '../core/util/icon';
import * as util from './util';
var NoticeBarComponent = /** @class */ (function () {
    function NoticeBarComponent(_iconHandler) {
        this._iconHandler = _iconHandler;
        this.visiable = false;
        this.marqueeScroll = 'scrolling';
        this.style = {};
        this._option = {
            mode: '',
            icon: '',
            action: '',
            content: '',
            fontSize: '14px',
            scrolling: true,
            marqueeProps: { loop: true, leading: 500, trailing: 8000, fps: 200, style: {} }
        };
        this.onClick = new EventEmitter();
        this._iconHandler.load();
    }
    Object.defineProperty(NoticeBarComponent.prototype, "option", {
        get: /**
         * @return {?}
         */
        function () {
            return this._option;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            Object.assign(this._option, value);
            this.dataProcess();
            if (this._option.scrolling) {
                this.marqueeScroll = 'scrolling';
            }
            else {
                this.marqueeScroll = 'scrolling-stop';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NoticeBarComponent.prototype.click = /**
     * @return {?}
     */
    function () {
        this.onClick.emit(this._option.mode);
        if (this._option.mode === 'closable') {
            this.visiable = false;
        }
    };
    /**
     * @return {?}
     */
    NoticeBarComponent.prototype.dataProcess = /**
     * @return {?}
     */
    function () {
        this.visiable = true;
        this.style = {
            width: '200%'
        };
        this._width = util.getTextWidth(this._option.content, this._option.fontSize);
        if (util.getWidthHeight().width < this._width) {
            /** @type {?} */
            var count = this._option.marqueeProps.loop ? 'infinite' : 1;
            /** @type {?} */
            var animationName = "noticebarmarquee_" + this._width;
            this.style = {
                width: this._width * 2 + 'px',
                'animation-name': animationName,
                'animation-delay': this._option.marqueeProps.leading + "ms",
                'animation-duration': (1 / this._option.marqueeProps.fps) * this._width / util.getWidthHeight().width * 1000 + "s",
                'animation-iteration-count': "" + count
            };
            this.marqueeScroll = 'scrolling';
            this.insetKeyframe(animationName);
        }
        else {
            this.marqueeScroll = 'scrolling-stop';
        }
    };
    /**
     * @param {?} animationName
     * @return {?}
     */
    NoticeBarComponent.prototype.insetKeyframe = /**
     * @param {?} animationName
     * @return {?}
     */
    function (animationName) {
        util.insertKeyFrame("@keyframes " + animationName + " {\n      0% { left: 0px; }\n      100% { left: -" + this._width + "px }\n    }", 'notice_bar_animation_cls');
        util.insertKeyFrame("@-webkit-keyframes " + animationName + " {\n      0% { left: 0px; }\n      100% { left: -" + this._width + "px }\n    }", 'notice_bar_animation_cls');
        util.insertKeyFrame("@-moz-keyframes " + animationName + " {\n      0% { left: 0px; }\n      100% { left: -" + this._width + "px }\n    }", 'notice_bar_animation_cls');
        util.insertKeyFrame("@-o-keyframes " + animationName + " {\n      0% { left: 0px; }\n      100% { left: -" + this._width + "px }\n    }", 'notice_bar_animation_cls');
    };
    /**
     * @return {?}
     */
    NoticeBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        document.addEventListener('touchstart', (/**
         * @return {?}
         */
        function () {
            _this.marqueeScroll = 'scrolling-stop';
        }));
        document.addEventListener('touchend', (/**
         * @return {?}
         */
        function () {
            _this.marqueeScroll = 'scrolling';
        }));
    };
    /**
     * @return {?}
     */
    NoticeBarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        util.deleteKeyFrame('notice_bar_animation_cls');
    };
    NoticeBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'NoticeBar, nzm-notice-bar',
                    template: "<div role=\"alert\" *ngIf=\"visiable\" class=\"am-notice-bar\" (click)=\"click()\">\n  <div *ngIf=\"option.icon !== null\" class=\"am-notice-bar-icon\">\n    <ng-template [ngTemplateOutlet]=\"option.icon || voice\"></ng-template>\n  </div>\n  <div class=\"am-notice-bar-content\">\n    <div class=\"marquee\">\n      <div [ngClass]=\"marqueeScroll\" [ngStyle]=\"style\">\n        <span>{{option.content}}</span>\n        <span>{{option.content}}</span>\n      </div>\n    </div>\n  </div>\n  <div role=\"button\" *ngIf=\"option.mode && option.action !== null\" class=\"am-notice-bar-operation\">\n    <ng-template *ngIf=\"option.mode === 'closable'\" [ngTemplateOutlet]=\"option.action || cross\"></ng-template>\n    <ng-template *ngIf=\"option.mode === 'link'\" [ngTemplateOutlet]=\"option.action || right\"></ng-template>\n  </div>\n</div>\n\n<ng-template #voice>\n  <Icon [type]=\"'voice'\" [size]=\"'xxs'\"></Icon>\n</ng-template>\n<ng-template #cross>\n  <Icon [type]=\"'cross'\" [size]=\"'md'\"></Icon>\n</ng-template>\n<ng-template #right>\n  <Icon [type]=\"'right'\" [size]=\"'md'\"></Icon>\n</ng-template>",
                    providers: [IconHandler]
                }] }
    ];
    /** @nocollapse */
    NoticeBarComponent.ctorParameters = function () { return [
        { type: IconHandler }
    ]; };
    NoticeBarComponent.propDecorators = {
        option: [{ type: Input }],
        onClick: [{ type: Output }]
    };
    return NoticeBarComponent;
}());
export { NoticeBarComponent };
if (false) {
    /** @type {?} */
    NoticeBarComponent.prototype.visiable;
    /** @type {?} */
    NoticeBarComponent.prototype.marqueeScroll;
    /** @type {?} */
    NoticeBarComponent.prototype.style;
    /**
     * @type {?}
     * @private
     */
    NoticeBarComponent.prototype._width;
    /**
     * @type {?}
     * @private
     */
    NoticeBarComponent.prototype._option;
    /** @type {?} */
    NoticeBarComponent.prototype.onClick;
    /**
     * @type {?}
     * @private
     */
    NoticeBarComponent.prototype._iconHandler;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, Output, EventEmitter, HostBinding } from '@angular/core';
var NavBarComponent = /** @class */ (function () {
    function NavBarComponent() {
        this.defaultProps = {
            prefixCls: 'am-navbar',
            mode: 'dark',
            onLeftClick: (/**
             * @return {?}
             */
            function () { })
        };
        this.navbarCls = {};
        this.isIconString = true;
        this.isLeftContentString = true;
        this.isRightContentString = true;
        this.onLeftClick = new EventEmitter();
        this.amNavbar = true;
    }
    Object.defineProperty(NavBarComponent.prototype, "mode", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.mode = value;
            this.amNavbarLight = this.defaultProps.mode === 'light';
            this.amNavbardark = this.defaultProps.mode === 'dark';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavBarComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isIconString = false;
            }
            else {
                this.isIconString = true;
            }
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavBarComponent.prototype, "leftContent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._leftContent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isLeftContentString = false;
            }
            else {
                this.isLeftContentString = true;
            }
            this._leftContent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavBarComponent.prototype, "rightContent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rightContent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isRightContentString = false;
            }
            else {
                this.isRightContentString = true;
            }
            this._rightContent = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NavBarComponent.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onLeftClick.emit(event);
    };
    NavBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Navbar, nzm-nav-bar',
                    template: "<div role=\"button\" class=\"{{defaultProps.prefixCls}}-left\" (click)=\"click($event)\">\n  <ng-template *ngIf=\"!isLeftContentString\" [ngTemplateOutlet]=\"leftContent\"></ng-template>\n  <span *ngIf=\"icon\" class=\"{{defaultProps.prefixCls}}-left-icon\" aria-hidden=\"true\">\n    <Icon *ngIf=\"isIconString\" [type]=\"icon\"></Icon>\n    <ng-template *ngIf=\"!isIconString\" [ngTemplateOutlet]=\"icon\"></ng-template>\n  </span>\n  {{isLeftContentString ? leftContent: null}}\n</div>\n<div class=\"{{defaultProps.prefixCls}}-title\">\n  <ng-content></ng-content>\n</div>\n<div class=\"{{defaultProps.prefixCls}}-right\">\n  {{isRightContentString ? rightContent: null}}\n  <ng-template *ngIf=\"!isRightContentString\" [ngTemplateOutlet]=\"rightContent\"></ng-template>\n</div>"
                }] }
    ];
    /** @nocollapse */
    NavBarComponent.ctorParameters = function () { return []; };
    NavBarComponent.propDecorators = {
        mode: [{ type: Input }],
        icon: [{ type: Input }],
        leftContent: [{ type: Input }],
        rightContent: [{ type: Input }],
        onLeftClick: [{ type: Output }],
        amNavbar: [{ type: HostBinding, args: ['class.am-navbar',] }],
        amNavbarLight: [{ type: HostBinding, args: ['class.am-navbar-light',] }],
        amNavbardark: [{ type: HostBinding, args: ['class.am-navbar-dark',] }]
    };
    return NavBarComponent;
}());
export { NavBarComponent };
if (false) {
    /** @type {?} */
    NavBarComponent.prototype.defaultProps;
    /** @type {?} */
    NavBarComponent.prototype.navbarCls;
    /** @type {?} */
    NavBarComponent.prototype.isIconString;
    /** @type {?} */
    NavBarComponent.prototype.isLeftContentString;
    /** @type {?} */
    NavBarComponent.prototype.isRightContentString;
    /**
     * @type {?}
     * @private
     */
    NavBarComponent.prototype._icon;
    /**
     * @type {?}
     * @private
     */
    NavBarComponent.prototype._leftContent;
    /**
     * @type {?}
     * @private
     */
    NavBarComponent.prototype._rightContent;
    /** @type {?} */
    NavBarComponent.prototype.onLeftClick;
    /** @type {?} */
    NavBarComponent.prototype.amNavbar;
    /** @type {?} */
    NavBarComponent.prototype.amNavbarLight;
    /** @type {?} */
    NavBarComponent.prototype.amNavbardark;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbIm5hdi1iYXIvbmF2LWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRztJQXVFRTtRQWxFQSxpQkFBWSxHQUFHO1lBQ2IsU0FBUyxFQUFFLFdBQVc7WUFDdEIsSUFBSSxFQUFFLE1BQU07WUFDWixXQUFXOzs7WUFBRSxjQUFPLENBQUMsQ0FBQTtTQUN0QixDQUFDO1FBQ0YsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNmLGlCQUFZLEdBQVksSUFBSSxDQUFDO1FBQzdCLHdCQUFtQixHQUFZLElBQUksQ0FBQztRQUNwQyx5QkFBb0IsR0FBWSxJQUFJLENBQUM7UUFpRHJDLGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFHN0MsYUFBUSxHQUFHLElBQUksQ0FBQztJQU1SLENBQUM7SUFwRGhCLHNCQUNJLGlDQUFJOzs7OztRQURSLFVBQ1MsS0FBSztZQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztZQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQztZQUN4RCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQztRQUN4RCxDQUFDOzs7T0FBQTtJQUNELHNCQUNJLGlDQUFJOzs7O1FBRFI7WUFFRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQzs7Ozs7UUFDRCxVQUFTLEtBQWdDO1lBQ3ZDLElBQUksS0FBSyxZQUFZLFdBQVcsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7YUFDM0I7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7YUFDMUI7WUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNyQixDQUFDOzs7T0FSQTtJQVNELHNCQUNJLHdDQUFXOzs7O1FBRGY7WUFFRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDM0IsQ0FBQzs7Ozs7UUFDRCxVQUFnQixLQUFnQztZQUM5QyxJQUFJLEtBQUssWUFBWSxXQUFXLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7YUFDbEM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQzthQUNqQztZQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzVCLENBQUM7OztPQVJBO0lBU0Qsc0JBQ0kseUNBQVk7Ozs7UUFEaEI7WUFFRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDNUIsQ0FBQzs7Ozs7UUFDRCxVQUFpQixLQUFnQztZQUMvQyxJQUFJLEtBQUssWUFBWSxXQUFXLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQzthQUNsQztZQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzdCLENBQUM7OztPQVJBOzs7OztJQXFCRCwrQkFBSzs7OztJQUFMLFVBQU0sS0FBSztRQUNULElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7O2dCQTNFRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IseXhCQUF1QztpQkFDeEM7Ozs7O3VCQWdCRSxLQUFLO3VCQU1MLEtBQUs7OEJBWUwsS0FBSzsrQkFZTCxLQUFLOzhCQVlMLE1BQU07MkJBR04sV0FBVyxTQUFDLGlCQUFpQjtnQ0FFN0IsV0FBVyxTQUFDLHVCQUF1QjsrQkFFbkMsV0FBVyxTQUFDLHNCQUFzQjs7SUFRckMsc0JBQUM7Q0FBQSxBQTVFRCxJQTRFQztTQXhFWSxlQUFlOzs7SUFDMUIsdUNBSUU7O0lBQ0Ysb0NBQWU7O0lBQ2YsdUNBQTZCOztJQUM3Qiw4Q0FBb0M7O0lBQ3BDLCtDQUFxQzs7Ozs7SUFFckMsZ0NBQXlDOzs7OztJQUN6Qyx1Q0FBZ0Q7Ozs7O0lBQ2hELHdDQUFpRDs7SUE0Q2pELHNDQUNvRDs7SUFFcEQsbUNBQ3VCOztJQUN2Qix3Q0FDcUI7O0lBQ3JCLHVDQUNvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnTmF2YmFyLCBuem0tbmF2LWJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uYXYtYmFyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOYXZCYXJDb21wb25lbnQge1xuICBkZWZhdWx0UHJvcHMgPSB7XG4gICAgcHJlZml4Q2xzOiAnYW0tbmF2YmFyJyxcbiAgICBtb2RlOiAnZGFyaycsXG4gICAgb25MZWZ0Q2xpY2s6ICgpID0+IHt9XG4gIH07XG4gIG5hdmJhckNscyA9IHt9O1xuICBpc0ljb25TdHJpbmc6IGJvb2xlYW4gPSB0cnVlO1xuICBpc0xlZnRDb250ZW50U3RyaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgaXNSaWdodENvbnRlbnRTdHJpbmc6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIHByaXZhdGUgX2ljb246IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gIHByaXZhdGUgX2xlZnRDb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICBwcml2YXRlIF9yaWdodENvbnRlbnQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgQElucHV0KClcbiAgc2V0IG1vZGUodmFsdWUpIHtcbiAgICB0aGlzLmRlZmF1bHRQcm9wcy5tb2RlID0gdmFsdWU7XG4gICAgdGhpcy5hbU5hdmJhckxpZ2h0ID0gdGhpcy5kZWZhdWx0UHJvcHMubW9kZSA9PT0gJ2xpZ2h0JztcbiAgICB0aGlzLmFtTmF2YmFyZGFyayA9IHRoaXMuZGVmYXVsdFByb3BzLm1vZGUgPT09ICdkYXJrJztcbiAgfVxuICBASW5wdXQoKVxuICBnZXQgaWNvbigpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5faWNvbjtcbiAgfVxuICBzZXQgaWNvbih2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLmlzSWNvblN0cmluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzSWNvblN0cmluZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX2ljb24gPSB2YWx1ZTtcbiAgfVxuICBASW5wdXQoKVxuICBnZXQgbGVmdENvbnRlbnQoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2xlZnRDb250ZW50O1xuICB9XG4gIHNldCBsZWZ0Q29udGVudCh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLmlzTGVmdENvbnRlbnRTdHJpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc0xlZnRDb250ZW50U3RyaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5fbGVmdENvbnRlbnQgPSB2YWx1ZTtcbiAgfVxuICBASW5wdXQoKVxuICBnZXQgcmlnaHRDb250ZW50KCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9yaWdodENvbnRlbnQ7XG4gIH1cbiAgc2V0IHJpZ2h0Q29udGVudCh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLmlzUmlnaHRDb250ZW50U3RyaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNSaWdodENvbnRlbnRTdHJpbmcgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl9yaWdodENvbnRlbnQgPSB2YWx1ZTtcbiAgfVxuICBAT3V0cHV0KClcbiAgb25MZWZ0Q2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0tbmF2YmFyJylcbiAgcHVibGljIGFtTmF2YmFyID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1uYXZiYXItbGlnaHQnKVxuICBwdWJsaWMgYW1OYXZiYXJMaWdodDtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1uYXZiYXItZGFyaycpXG4gIHB1YmxpYyBhbU5hdmJhcmRhcms7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGNsaWNrKGV2ZW50KSB7XG4gICAgdGhpcy5vbkxlZnRDbGljay5lbWl0KGV2ZW50KTtcbiAgfVxufVxuIl19
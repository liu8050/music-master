/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, Output, ElementRef, HostListener, EventEmitter, Renderer2, TemplateRef } from '@angular/core';
var ButtonComponent = /** @class */ (function () {
    function ButtonComponent(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this.prefixCls = 'am-button';
        this.ngTemplate = false;
        this._className = '';
        this._classList = [];
        this._size = 'large';
        this._loading = false;
        this._active = false;
        this._inline = false;
        this._disabled = false;
        this._icon = '';
        this._userAgent = ((/** @type {?} */ (navigator))).userAgent || ((/** @type {?} */ (navigator))).vendor || ((/** @type {?} */ (window))).opera;
        this.onClick = new EventEmitter();
        this._el = this._elementRef.nativeElement;
        this._render.addClass(this._el, this.prefixCls);
        this._className = this._el.className;
    }
    Object.defineProperty(ButtonComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = value;
            if (this._el.querySelector('icon')) {
                /** @type {?} */
                var icon = (/** @type {?} */ (this._el.querySelector('icon')));
                icon.style.display = value ? '' : 'none';
            }
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "inline", {
        get: /**
         * @return {?}
         */
        function () {
            return this._inline;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._inline = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.ngTemplate = true;
                this._icon = value;
            }
            else {
                this.ngTemplate = false;
                this._icon = (/** @type {?} */ (value));
                this.setClassMap();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "className", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._className = this._className + ' ' + v;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ButtonComponent.prototype.touchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._disabled) {
            return;
        }
        this._active = true;
        this.setClassMap();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ButtonComponent.prototype.touchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._disabled) {
            return;
        }
        this._active = false;
        this.setClassMap();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ButtonComponent.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._disabled) {
            return;
        }
        this.onClick.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ButtonComponent.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            return value instanceof TemplateRef;
        }
        return false;
    };
    /**
     * @return {?}
     */
    ButtonComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this._el.querySelector('img')) {
            /** @type {?} */
            var amSize = this._size === 'small' ? 'am-icon-xxs' : 'am-icon-md';
            this._el.querySelector('img').setAttribute('class', "am-icon " + this.prefixCls + "-icon " + amSize);
            this._render.addClass(this._el, this.prefixCls + "-icon");
        }
    };
    /**
     * @private
     * @return {?}
     */
    ButtonComponent.prototype.setClassMap = /**
     * @private
     * @return {?}
     */
    function () {
        this.iconType = this._loading ? 'loading' : this._icon;
        this._classList = [
            this._type && this.prefixCls + "-" + this._type,
            this._size === 'small' && this.prefixCls + "-" + this._size,
            this._disabled && this.prefixCls + "-disabled",
            this._loading && this.prefixCls + "-loading",
            this.iconType && this.prefixCls + "-icon",
            this._active && this.prefixCls + "-active",
            this._inline && this.prefixCls + "-inline"
        ].filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return !!item;
        }));
        this._el.className = this._className + ' ' + this._classList.join(' ');
    };
    ButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: '[Button], nzm-button',
                    encapsulation: ViewEncapsulation.None,
                    template: "<Icon *ngIf=\"!ngTemplate\"\n      class=\"{{prefixCls}}-icon\"\n      [type]=\"iconType\"\n      [size]=\"size ==='small' ? 'xxs' : 'md'\"\n></Icon>\n<ng-template *ngIf=\"ngTemplate\" [ngTemplateOutlet]=\"icon\"></ng-template>\n<ng-content select=\"img\"></ng-content>\n<div class=\"{{prefixCls}}-content\">\n  <span>\n    <ng-content></ng-content>\n  </span>\n</div>"
                }] }
    ];
    /** @nocollapse */
    ButtonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ButtonComponent.propDecorators = {
        type: [{ type: Input }],
        size: [{ type: Input }],
        disabled: [{ type: Input }],
        loading: [{ type: Input }],
        inline: [{ type: Input }],
        icon: [{ type: Input }],
        className: [{ type: Input }],
        onClick: [{ type: Output }],
        touchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
        touchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }, { type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchcancel', ['$event'],] }],
        click: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return ButtonComponent;
}());
export { ButtonComponent };
if (false) {
    /** @type {?} */
    ButtonComponent.prototype.prefixCls;
    /** @type {?} */
    ButtonComponent.prototype.ngTemplate;
    /** @type {?} */
    ButtonComponent.prototype.iconType;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._el;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._className;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._classList;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._type;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._loading;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._inline;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._icon;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._userAgent;
    /** @type {?} */
    ButtonComponent.prototype.onClick;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    ButtonComponent.prototype._render;
}
//# sourceMappingURL=data:application/json;base64,
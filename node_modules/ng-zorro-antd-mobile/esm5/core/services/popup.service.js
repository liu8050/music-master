/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
var PopupService = /** @class */ (function () {
    function PopupService(_overlay) {
        this._overlay = _overlay;
        PopupService.overlay = this._overlay;
    }
    /**
     * @param {?} componentName
     * @param {?} component
     * @param {?=} childInjector
     * @param {?=} hasBackdrop
     * @param {?=} positionStrategy
     * @return {?}
     */
    PopupService.showPopup = /**
     * @param {?} componentName
     * @param {?} component
     * @param {?=} childInjector
     * @param {?=} hasBackdrop
     * @param {?=} positionStrategy
     * @return {?}
     */
    function (componentName, component, childInjector, hasBackdrop, positionStrategy) {
        if (positionStrategy === void 0) { positionStrategy = PopupService.overlay.position().global().centerVertically().centerHorizontally(); }
        /** @type {?} */
        var overlayConfig = new OverlayConfig();
        overlayConfig.hasBackdrop = hasBackdrop;
        overlayConfig.positionStrategy = positionStrategy;
        PopupService.overlayRef = PopupService.overlay.create(overlayConfig);
        PopupService.overlayRef.backdropClick().subscribe((/**
         * @return {?}
         */
        function () {
            PopupService.hidePopup();
        }));
        PopupService.currentServiceName = componentName;
        /** @type {?} */
        var comRef = PopupService.overlayRef.attach(new ComponentPortal(component, undefined, childInjector));
        PopupService.serviceArray.push({ key: componentName, value: PopupService.overlayRef });
        return comRef;
    };
    /**
     * @param {?=} componentName
     * @return {?}
     */
    PopupService.hidePopup = /**
     * @param {?=} componentName
     * @return {?}
     */
    function (componentName) {
        if (PopupService.serviceArray && PopupService.currentServiceName) {
            if (componentName) {
                PopupService.serviceArray.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                function (element, index) {
                    if (element.key === componentName) {
                        PopupService.serviceArray[index].value.dispose();
                        PopupService.serviceArray.splice(index, 1);
                    }
                }));
            }
            else {
                PopupService.serviceArray.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                function (element, index) {
                    PopupService.serviceArray[index].value.dispose();
                }));
                PopupService.serviceArray = [];
            }
        }
    };
    PopupService.overlay = null;
    PopupService.overlayRef = null;
    PopupService.currentServiceName = null;
    PopupService.serviceArray = [];
    PopupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
        { type: Injectable }
    ];
    /** @nocollapse */
    PopupService.ctorParameters = function () { return [
        { type: Overlay }
    ]; };
    return PopupService;
}());
export { PopupService };
if (false) {
    /** @type {?} */
    PopupService.overlay;
    /** @type {?} */
    PopupService.overlayRef;
    /** @type {?} */
    PopupService.currentServiceName;
    /** @type {?} */
    PopupService.serviceArray;
    /** @type {?} */
    PopupService.prototype._overlay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiY29yZS9zZXJ2aWNlcy9wb3B1cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUEwQixNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBc0MsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQ7SUFVRSxzQkFDUyxRQUFpQjtRQUFqQixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBRXhCLFlBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QyxDQUFDOzs7Ozs7Ozs7SUFFTSxzQkFBUzs7Ozs7Ozs7SUFBaEIsVUFDRSxhQUFhLEVBQ2IsU0FBUyxFQUNULGFBQXdCLEVBQ3hCLFdBQXFCLEVBQ3JCLGdCQUNnRjtRQURoRixpQ0FBQSxFQUFBLG1CQUNBLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRTs7WUFDNUUsYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFO1FBQ3ZDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQ3hDLGFBQWEsQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUNsRCxZQUFZLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JFLFlBQVksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsU0FBUzs7O1FBQUM7WUFDaEQsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNCLENBQUMsRUFBQyxDQUFDO1FBQ0gsWUFBWSxDQUFDLGtCQUFrQixHQUFHLGFBQWEsQ0FBQzs7WUFDMUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksZUFBZSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDdkcsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQztRQUNyRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7OztJQUVNLHNCQUFTOzs7O0lBQWhCLFVBQWlCLGFBQXNCO1FBQ3JDLElBQUksWUFBWSxDQUFDLFlBQVksSUFBSSxZQUFZLENBQUMsa0JBQWtCLEVBQUU7WUFDaEUsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFlBQVksQ0FBQyxZQUFZLENBQUMsT0FBTzs7Ozs7Z0JBQUMsVUFBQyxPQUFZLEVBQUUsS0FBYTtvQkFDNUQsSUFBSSxPQUFPLENBQUMsR0FBRyxLQUFLLGFBQWEsRUFBRTt3QkFDakMsWUFBWSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7d0JBQ2pELFlBQVksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDNUM7Z0JBQ0gsQ0FBQyxFQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxZQUFZLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7O2dCQUFDLFVBQUMsT0FBWSxFQUFFLEtBQWE7b0JBQzVELFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNuRCxDQUFDLEVBQUMsQ0FBQztnQkFDSCxZQUFZLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQzthQUNoQztTQUNGO0lBQ0gsQ0FBQztJQS9DTSxvQkFBTyxHQUFZLElBQUksQ0FBQztJQUN4Qix1QkFBVSxHQUFlLElBQUksQ0FBQztJQUM5QiwrQkFBa0IsR0FBRyxJQUFJLENBQUM7SUFDMUIseUJBQVksR0FBUSxFQUFFLENBQUM7O2dCQVIvQixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CO2dCQUNBLFVBQVU7Ozs7Z0JBTEYsT0FBTzs7SUF1RGhCLG1CQUFDO0NBQUEsQUFyREQsSUFxREM7U0FqRFksWUFBWTs7O0lBQ3ZCLHFCQUErQjs7SUFDL0Isd0JBQXFDOztJQUNyQyxnQ0FBaUM7O0lBQ2pDLDBCQUE4Qjs7SUFHNUIsZ0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3ZlcmxheSwgT3ZlcmxheUNvbmZpZywgT3ZlcmxheVJlZiwgR2xvYmFsUG9zaXRpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENvbXBvbmVudFBvcnRhbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9wdXBTZXJ2aWNlIHtcbiAgc3RhdGljIG92ZXJsYXk6IE92ZXJsYXkgPSBudWxsO1xuICBzdGF0aWMgb3ZlcmxheVJlZjogT3ZlcmxheVJlZiA9IG51bGw7XG4gIHN0YXRpYyBjdXJyZW50U2VydmljZU5hbWUgPSBudWxsO1xuICBzdGF0aWMgc2VydmljZUFycmF5OiBhbnkgPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgX292ZXJsYXk6IE92ZXJsYXksXG4gICkge1xuICAgIFBvcHVwU2VydmljZS5vdmVybGF5ID0gdGhpcy5fb3ZlcmxheTtcbiAgfVxuXG4gIHN0YXRpYyBzaG93UG9wdXAoXG4gICAgY29tcG9uZW50TmFtZSxcbiAgICBjb21wb25lbnQsXG4gICAgY2hpbGRJbmplY3Rvcj86IEluamVjdG9yLFxuICAgIGhhc0JhY2tkcm9wPzogYm9vbGVhbixcbiAgICBwb3NpdGlvblN0cmF0ZWd5OiBHbG9iYWxQb3NpdGlvblN0cmF0ZWd5ID1cbiAgICBQb3B1cFNlcnZpY2Uub3ZlcmxheS5wb3NpdGlvbigpLmdsb2JhbCgpLmNlbnRlclZlcnRpY2FsbHkoKS5jZW50ZXJIb3Jpem9udGFsbHkoKSk6IENvbXBvbmVudFJlZjxhbnk+IHtcbiAgICBsZXQgb3ZlcmxheUNvbmZpZyA9IG5ldyBPdmVybGF5Q29uZmlnKCk7XG4gICAgb3ZlcmxheUNvbmZpZy5oYXNCYWNrZHJvcCA9IGhhc0JhY2tkcm9wO1xuICAgIG92ZXJsYXlDb25maWcucG9zaXRpb25TdHJhdGVneSA9IHBvc2l0aW9uU3RyYXRlZ3k7XG4gICAgUG9wdXBTZXJ2aWNlLm92ZXJsYXlSZWYgPSBQb3B1cFNlcnZpY2Uub3ZlcmxheS5jcmVhdGUob3ZlcmxheUNvbmZpZyk7XG4gICAgUG9wdXBTZXJ2aWNlLm92ZXJsYXlSZWYuYmFja2Ryb3BDbGljaygpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBQb3B1cFNlcnZpY2UuaGlkZVBvcHVwKCk7XG4gICAgfSk7XG4gICAgUG9wdXBTZXJ2aWNlLmN1cnJlbnRTZXJ2aWNlTmFtZSA9IGNvbXBvbmVudE5hbWU7XG4gICAgY29uc3QgY29tUmVmID0gUG9wdXBTZXJ2aWNlLm92ZXJsYXlSZWYuYXR0YWNoKG5ldyBDb21wb25lbnRQb3J0YWwoY29tcG9uZW50LCB1bmRlZmluZWQsIGNoaWxkSW5qZWN0b3IpKTtcbiAgICBQb3B1cFNlcnZpY2Uuc2VydmljZUFycmF5LnB1c2goe2tleTogY29tcG9uZW50TmFtZSwgdmFsdWU6IFBvcHVwU2VydmljZS5vdmVybGF5UmVmfSk7XG4gICAgcmV0dXJuIGNvbVJlZjtcbiAgfVxuXG4gIHN0YXRpYyBoaWRlUG9wdXAoY29tcG9uZW50TmFtZT86IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChQb3B1cFNlcnZpY2Uuc2VydmljZUFycmF5ICYmIFBvcHVwU2VydmljZS5jdXJyZW50U2VydmljZU5hbWUpIHtcbiAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgIFBvcHVwU2VydmljZS5zZXJ2aWNlQXJyYXkuZm9yRWFjaCgoZWxlbWVudDogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQua2V5ID09PSBjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgICBQb3B1cFNlcnZpY2Uuc2VydmljZUFycmF5W2luZGV4XS52YWx1ZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICBQb3B1cFNlcnZpY2Uuc2VydmljZUFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFBvcHVwU2VydmljZS5zZXJ2aWNlQXJyYXkuZm9yRWFjaCgoZWxlbWVudDogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgUG9wdXBTZXJ2aWNlLnNlcnZpY2VBcnJheVtpbmRleF0udmFsdWUuZGlzcG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgUG9wdXBTZXJ2aWNlLnNlcnZpY2VBcnJheSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19
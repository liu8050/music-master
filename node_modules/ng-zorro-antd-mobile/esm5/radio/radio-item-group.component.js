/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, Output, QueryList, forwardRef, EventEmitter, ContentChildren, ChangeDetectorRef, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';
import { RadioItemComponent } from './radio-item.component';
import { merge, Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
/** @type {?} */
export var RADIO_ITEM_GROUP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return RadioItemGroupComponent; })),
    multi: true
};
var RadioItemGroupComponent = /** @class */ (function () {
    function RadioItemGroupComponent(cdr) {
        this.cdr = cdr;
        this.destroy$ = new Subject();
        this.onChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    RadioItemGroupComponent.prototype.updateChildrenStatus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.radioItems && typeof (this.selectedValue) !== 'undefined' && null !== this.selectedValue) {
            Promise.resolve().then((/**
             * @return {?}
             */
            function () {
                _this.radioItems.forEach((/**
                 * @param {?} radioItem
                 * @return {?}
                 */
                function (radioItem) {
                    radioItem.checked = radioItem.value === _this.selectedValue;
                    radioItem.markForCheck();
                }));
            }));
        }
    };
    /**
     * @return {?}
     */
    RadioItemGroupComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.radioItems.changes
            .pipe(startWith(null), takeUntil(this.destroy$))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.updateChildrenStatus();
            if (_this.selectSubscription) {
                _this.selectSubscription.unsubscribe();
            }
            _this.selectSubscription = merge.apply(void 0, tslib_1.__spread(_this.radioItems.map((/**
             * @param {?} radioItem
             * @return {?}
             */
            function (radioItem) { return radioItem.select$; })))).pipe(takeUntil(_this.destroy$))
                .subscribe((/**
             * @param {?} radioItem
             * @return {?}
             */
            function (radioItem) {
                if (typeof (_this.selectedValue) !== 'undefined' && null !== _this.selectedValue) {
                    _this.selectedValue = radioItem.value;
                    _this._ngModelOnChange(radioItem.value);
                    _this.updateChildrenStatus();
                    if (_this.onChange) {
                        _this.onChange.emit({ name: radioItem.name, value: radioItem.value });
                    }
                }
            }));
        }));
    };
    /**
     * @return {?}
     */
    RadioItemGroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RadioItemGroupComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (typeof (value) !== 'undefined' && null !== value) {
            this.selectedValue = value;
            this.updateChildrenStatus();
            this.cdr.markForCheck();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioItemGroupComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._ngModelOnChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioItemGroupComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._ngModelOnTouched = fn;
    };
    RadioItemGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'RadioItemGroup, nzm-radio-item-group',
                    template: "<ng-content></ng-content>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [RADIO_ITEM_GROUP_VALUE_ACCESSOR]
                }] }
    ];
    /** @nocollapse */
    RadioItemGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    RadioItemGroupComponent.propDecorators = {
        radioItems: [{ type: ContentChildren, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return RadioItemComponent; })),] }],
        onChange: [{ type: Output }]
    };
    return RadioItemGroupComponent;
}());
export { RadioItemGroupComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype.selectedValue;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype.selectSubscription;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype._ngModelOnChange;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype._ngModelOnTouched;
    /** @type {?} */
    RadioItemGroupComponent.prototype.radioItems;
    /** @type {?} */
    RadioItemGroupComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    RadioItemGroupComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,
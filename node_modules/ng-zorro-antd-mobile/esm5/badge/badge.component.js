/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, ElementRef, Renderer2 } from '@angular/core';
var BadgeComponent = /** @class */ (function () {
    function BadgeComponent(_ref, render) {
        this._ref = _ref;
        this.render = render;
        this.prefixCls = 'am-badge';
        this.scrollNumberCls = {};
        this.style = {};
        this._size = 'small';
        this._dot = false;
        this._hot = false;
        this._corner = false;
        this._children = false;
        this._overflowCount = 99;
        this.clsBadge = true;
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    }
    Object.defineProperty(BadgeComponent.prototype, "size", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._size = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BadgeComponent.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._text = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BadgeComponent.prototype, "corner", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._corner = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BadgeComponent.prototype, "dot", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dot;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._dot = v;
            if (this._dot) {
                this._text = '';
            }
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BadgeComponent.prototype, "overflowCount", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._overflowCount = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BadgeComponent.prototype, "hot", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._hot = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BadgeComponent.prototype, "setStyle", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.style = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BadgeComponent.prototype, "className", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var _this = this;
            this._setClass = v;
            /** @type {?} */
            var clsArr = this._setClass.split(' ');
            clsArr.forEach((/**
             * @param {?} cls
             * @return {?}
             */
            function (cls) {
                _this.render.addClass(_this._ref.nativeElement, cls);
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BadgeComponent.prototype.setCls = /**
     * @return {?}
     */
    function () {
        var _a;
        this.scrollNumberCls = (_a = {},
            _a[this.prefixCls + "-dot"] = this._dot,
            _a[this.prefixCls + "-dot-large"] = this._dot && this._size === 'large',
            _a[this.prefixCls + "-text"] = !this._dot && !this._corner,
            _a[this.prefixCls + "-corner"] = this._corner,
            _a[this.prefixCls + "-corner-large"] = this._corner && this._size === 'large',
            _a);
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    };
    /**
     * @return {?}
     */
    BadgeComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (typeof this._text === 'number' && this._text > this._overflowCount) {
            this._text = this._overflowCount + '+';
        }
    };
    /**
     * @return {?}
     */
    BadgeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setCls();
    };
    /**
     * @return {?}
     */
    BadgeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this._ref.nativeElement.children.length > 1 || (_this._ref.nativeElement.children.length === 1 && !_this.dot && !_this.text)) {
                _this._children = true;
                _this.setCls();
            }
        }), 10);
    };
    BadgeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Badge, nzm-badge',
                    template: "<ng-content></ng-content>\n<sup *ngIf=\"dot || text\"\n    [ngClass]=\"scrollNumberCls\"\n    [ngStyle]=\"style\">\n    <span>{{text}}</span>\n</sup>\n"
                }] }
    ];
    /** @nocollapse */
    BadgeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    BadgeComponent.propDecorators = {
        size: [{ type: Input }],
        text: [{ type: Input }],
        corner: [{ type: Input }],
        dot: [{ type: Input }],
        overflowCount: [{ type: Input }],
        hot: [{ type: Input }],
        setStyle: [{ type: Input }],
        className: [{ type: Input }],
        clsBadge: [{ type: HostBinding, args: ['class.am-badge',] }],
        clsBadgeWrp: [{ type: HostBinding, args: ['class.am-badge-not-a-wrapper',] }],
        clsBadgeCornerWrp: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper',] }],
        clsBadgeHot: [{ type: HostBinding, args: ['class.am-badge-hot',] }],
        clsBadgeCornerWrpLg: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper-large',] }]
    };
    return BadgeComponent;
}());
export { BadgeComponent };
if (false) {
    /** @type {?} */
    BadgeComponent.prototype.prefixCls;
    /** @type {?} */
    BadgeComponent.prototype.scrollNumberCls;
    /** @type {?} */
    BadgeComponent.prototype.style;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._text;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._setClass;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._dot;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._hot;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._corner;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._children;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._overflowCount;
    /** @type {?} */
    BadgeComponent.prototype.clsBadge;
    /** @type {?} */
    BadgeComponent.prototype.clsBadgeWrp;
    /** @type {?} */
    BadgeComponent.prototype.clsBadgeCornerWrp;
    /** @type {?} */
    BadgeComponent.prototype.clsBadgeHot;
    /** @type {?} */
    BadgeComponent.prototype.clsBadgeCornerWrpLg;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype._ref;
    /**
     * @type {?}
     * @private
     */
    BadgeComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,
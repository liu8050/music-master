/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, } from '@angular/core';
import { ModalServiceComponent } from './modal.component';
import { ModalBaseOptions, ModalOptions, AlertOptions } from './modal-options.provider';
import { PopupService } from '../core/services/popup.service';
var ModalService = /** @class */ (function (_super) {
    tslib_1.__extends(ModalService, _super);
    function ModalService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    ModalService._initConfig = /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    function (config, options) {
        /** @type {?} */
        var props = new ModalBaseOptions();
        /** @type {?} */
        var optionalParams = [
            'visible',
            'focus',
            'prefixCls',
            'animated',
            'closable',
            'maskClosable',
            'onClose',
            'transparent',
            'popup',
            'animationType',
            'title',
            'footer',
            'platform',
            'className',
            'wrapClassName',
            'message',
            'actions',
            'callbackOrActions',
            'type',
            'defaultValue',
            'placeholders',
            'operation',
            'transitionName',
            'maskTransitionName',
            'close'
        ];
        config = Object.assign(options, config, {
            close: (/**
             * @return {?}
             */
            function () {
                if (config.maskClosable || config.closable) {
                    ModalService.closeWithAnimation();
                }
            })
        });
        optionalParams.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        }));
        return props;
    };
    /**
     * @param {?} props
     * @return {?}
     */
    ModalService._open = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        /** @type {?} */
        var childInjector = Injector.create([
            {
                provide: ModalOptions,
                useValue: props
            }
        ]);
        setTimeout((/**
         * @return {?}
         */
        function () {
            ModalService.modalRef = ModalService.showPopup('ModalServiceComponent', ModalServiceComponent, childInjector);
        }), 0);
    };
    /**
     * @return {?}
     */
    ModalService.closeWithAnimation = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var options = new ModalBaseOptions();
        ModalService.modalRef.instance.transitionName = options.transitionName + "-leave " + options.transitionName + "-leave-active";
        ModalService.modalRef.instance.maskTransitionName = options.maskTransitionName + "-leave " + options.maskTransitionName + "-leave-active";
        setTimeout((/**
         * @return {?}
         */
        function () {
            ModalService.close();
        }), 200);
    };
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    ModalService.alert = /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    function (title, message, actions, platform) {
        /** @type {?} */
        var options = new AlertOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.platform = 'ios';
        /** @type {?} */
        var footer = getFooter(actions);
        /** @type {?} */
        var config = Object.assign({
            title: title,
            message: message,
            footer: footer,
            actions: footer,
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        var props = ModalService._initConfig(config, options);
        return ModalService._open(props);
    };
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} callbackOrActions
     * @param {?=} type
     * @param {?=} defaultValue
     * @param {?=} placeholders
     * @param {?=} platform
     * @return {?}
     */
    ModalService.prompt = /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} callbackOrActions
     * @param {?=} type
     * @param {?=} defaultValue
     * @param {?=} placeholders
     * @param {?=} platform
     * @return {?}
     */
    function (title, message, callbackOrActions, type, defaultValue, placeholders, platform) {
        var _this = this;
        /** @type {?} */
        var options = new ModalOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.className = 'am-modal-alert-content';
        options.defaultValue = defaultValue || ['', ''];
        options.placeholders = placeholders;
        (options.type = type ? type : 'default'), (options.platform = platform ? platform : 'ios');
        /**
         * @param {?} self
         * @param {?} func
         * @return {?}
         */
        function getArgs(self, func) {
            /** @type {?} */
            var text = ModalService.modalRef.instance.data.text || options.defaultValue[0];
            /** @type {?} */
            var password = ModalService.modalRef.instance.data.password || options.defaultValue[1];
            if (type === 'login-password') {
                return func(text, password);
            }
            else if (type === 'secure-text') {
                return func(password);
            }
            return func(text);
        }
        /** @type {?} */
        var actions;
        if (typeof callbackOrActions === 'function') {
            actions = [
                { text: 'Cancel' },
                {
                    text: 'OK',
                    onPress: (/**
                     * @return {?}
                     */
                    function () {
                        getArgs(_this, callbackOrActions);
                    })
                }
            ];
        }
        else {
            actions = callbackOrActions.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return {
                    text: item.text,
                    onPress: (/**
                     * @return {?}
                     */
                    function () {
                        if (item.onPress) {
                            return getArgs(_this, item.onPress);
                        }
                    })
                };
            }));
        }
        /** @type {?} */
        var footer = getFooter(actions);
        /** @type {?} */
        var config = Object.assign({
            title: title,
            message: message,
            type: type ? type : 'default',
            footer: footer,
            actions: footer,
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        var props = ModalService._initConfig(config, options);
        return ModalService._open(props);
    };
    /**
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    ModalService.operation = /**
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    function (actions, platform) {
        /** @type {?} */
        var options = new ModalOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.operation = true;
        options.className = 'am-modal-operation';
        /** @type {?} */
        var footer = getFooter(actions);
        /** @type {?} */
        var config = Object.assign({
            footer: footer,
            actions: footer,
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        var props = ModalService._initConfig(config, options);
        return ModalService._open(props);
    };
    /**
     * @return {?}
     */
    ModalService.close = /**
     * @return {?}
     */
    function () {
        ModalService.hidePopup('ModalServiceComponent');
    };
    ModalService.modalRef = null;
    ModalService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
        { type: Injectable }
    ];
    return ModalService;
}(PopupService));
export { ModalService };
if (false) {
    /** @type {?} */
    ModalService.modalRef;
}
/**
 * @param {?} actions
 * @return {?}
 */
function getFooter(actions) {
    /** @type {?} */
    var action = actions ? actions : [{ text: 'OK', onPress: (/**
             * @return {?}
             */
            function () { }) }];
    return action.map((/**
     * @param {?} button
     * @return {?}
     */
    function (button) {
        /** @type {?} */
        var orginPress = button.onPress || (/**
         * @return {?}
         */
        function () { });
        button.onPress = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var res = orginPress();
            if (res && res.then) {
                res.then((/**
                 * @return {?}
                 */
                function () {
                    ModalService.closeWithAnimation();
                }));
            }
            else {
                ModalService.closeWithAnimation();
            }
        });
        return button;
    }));
}
//# sourceMappingURL=data:application/json;base64,
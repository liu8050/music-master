/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var CheckboxItemComponent = /** @class */ (function () {
    function CheckboxItemComponent(cdr) {
        this.cdr = cdr;
        this.prefixCls = 'am-checkbox';
        this.checked = false;
        this._disabled = false;
        this.wrap = false;
        this.error = false;
        this.multipleLine = false;
        this.platform = 'ios';
        this.align = 'middle';
        this.onChange = new EventEmitter();
    }
    Object.defineProperty(CheckboxItemComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    CheckboxItemComponent.prototype.onCheckboxClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) { };
    /**
     * @param {?} event
     * @return {?}
     */
    CheckboxItemComponent.prototype.change = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.checked = event.checked;
        this._ngModelOnChange(event.checked);
        this.onChange.emit(event);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CheckboxItemComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.checked = value;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CheckboxItemComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._ngModelOnChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CheckboxItemComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._ngModelOnTouched = fn;
    };
    CheckboxItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CheckboxItem, nzm-checkbox-item',
                    template: "<ListItem [className]=\"'am-checkbox-item ' + (disabled ? 'am-checkbox-item-disabled' : '')\"\n          [wrap]=\"wrap\"\n          [align]=\"align\"\n          [arrow]=\"arrow\"\n          [error]=\"error\"\n          [extra]=\"extra\"\n          [thumb]=\"checkbox\"\n          [disabled]=\"disabled\"\n          [platform]=\"platform\"\n          [multipleLine]=\"multipleLine\"\n          (onClick)=\"onCheckboxClick($event)\"\n>\n  <ng-content></ng-content>\n</ListItem>\n<ng-template #checkbox>\n  <label Checkbox\n         [name]=\"name\"\n         [value]=\"value\"\n         [checked]=\"checked\"\n         [disabled]=\"disabled\"\n         (onChange)=\"change($event)\"\n  >\n  </label>\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return CheckboxItemComponent; })),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    CheckboxItemComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    CheckboxItemComponent.propDecorators = {
        name: [{ type: Input }],
        value: [{ type: Input }],
        arrow: [{ type: Input }],
        extra: [{ type: Input }],
        wrap: [{ type: Input }],
        error: [{ type: Input }],
        multipleLine: [{ type: Input }],
        platform: [{ type: Input }],
        align: [{ type: Input }],
        disabled: [{ type: Input }],
        onChange: [{ type: Output }]
    };
    return CheckboxItemComponent;
}());
export { CheckboxItemComponent };
if (false) {
    /** @type {?} */
    CheckboxItemComponent.prototype.prefixCls;
    /** @type {?} */
    CheckboxItemComponent.prototype.checked;
    /**
     * @type {?}
     * @private
     */
    CheckboxItemComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    CheckboxItemComponent.prototype._ngModelOnChange;
    /**
     * @type {?}
     * @private
     */
    CheckboxItemComponent.prototype._ngModelOnTouched;
    /** @type {?} */
    CheckboxItemComponent.prototype.name;
    /** @type {?} */
    CheckboxItemComponent.prototype.value;
    /** @type {?} */
    CheckboxItemComponent.prototype.arrow;
    /** @type {?} */
    CheckboxItemComponent.prototype.extra;
    /** @type {?} */
    CheckboxItemComponent.prototype.wrap;
    /** @type {?} */
    CheckboxItemComponent.prototype.error;
    /** @type {?} */
    CheckboxItemComponent.prototype.multipleLine;
    /** @type {?} */
    CheckboxItemComponent.prototype.platform;
    /** @type {?} */
    CheckboxItemComponent.prototype.align;
    /** @type {?} */
    CheckboxItemComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    CheckboxItemComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbImNoZWNrYm94L2NoZWNrYm94LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSx1QkFBdUIsRUFBZSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvSixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHekU7SUFnREUsK0JBQW9CLEdBQXNCO1FBQXRCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBbEMxQyxjQUFTLEdBQUcsYUFBYSxDQUFDO1FBQzFCLFlBQU8sR0FBWSxLQUFLLENBQUM7UUFDakIsY0FBUyxHQUFZLEtBQUssQ0FBQztRQWFuQyxTQUFJLEdBQVksS0FBSyxDQUFDO1FBRXRCLFVBQUssR0FBWSxLQUFLLENBQUM7UUFFdkIsaUJBQVksR0FBWSxLQUFLLENBQUM7UUFFOUIsYUFBUSxHQUFXLEtBQUssQ0FBQztRQUV6QixVQUFLLEdBQVcsUUFBUSxDQUFDO1FBU3pCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBa0IsQ0FBQztJQUVBLENBQUM7SUFWL0Msc0JBQ0ksMkNBQVE7Ozs7UUFEWjtZQUVFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDOzs7OztRQUNELFVBQWEsS0FBYztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN6QixDQUFDOzs7T0FIQTs7Ozs7SUFTRCwrQ0FBZTs7OztJQUFmLFVBQWdCLEtBQUssSUFBSSxDQUFDOzs7OztJQUUxQixzQ0FBTTs7OztJQUFOLFVBQU8sS0FBSztRQUNWLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsMENBQVU7Ozs7SUFBVixVQUFXLEtBQWM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7OztJQUVELGdEQUFnQjs7OztJQUFoQixVQUFpQixFQUFzQjtRQUNyQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRUQsaURBQWlCOzs7O0lBQWpCLFVBQWtCLEVBQVk7UUFDNUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztJQUM5QixDQUFDOztnQkFyRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQ0FBaUM7b0JBQzNDLHN0QkFBNkM7b0JBQzdDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLHFCQUFxQixFQUFyQixDQUFxQixFQUFDOzRCQUNwRCxLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjtpQkFDRjs7OztnQkFoQmtHLGlCQUFpQjs7O3VCQXdCakgsS0FBSzt3QkFFTCxLQUFLO3dCQUVMLEtBQUs7d0JBRUwsS0FBSzt1QkFFTCxLQUFLO3dCQUVMLEtBQUs7K0JBRUwsS0FBSzsyQkFFTCxLQUFLO3dCQUVMLEtBQUs7MkJBRUwsS0FBSzsyQkFPTCxNQUFNOztJQXlCVCw0QkFBQztDQUFBLEFBdEVELElBc0VDO1NBekRZLHFCQUFxQjs7O0lBQ2hDLDBDQUEwQjs7SUFDMUIsd0NBQXlCOzs7OztJQUN6QiwwQ0FBbUM7Ozs7O0lBQ25DLGlEQUFpRDs7Ozs7SUFDakQsa0RBQW9DOztJQUVwQyxxQ0FDYTs7SUFDYixzQ0FDYzs7SUFDZCxzQ0FDYzs7SUFDZCxzQ0FDaUM7O0lBQ2pDLHFDQUNzQjs7SUFDdEIsc0NBQ3VCOztJQUN2Qiw2Q0FDOEI7O0lBQzlCLHlDQUN5Qjs7SUFDekIsc0NBQ3lCOztJQVF6Qix5Q0FDOEM7Ozs7O0lBRWxDLG9DQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgVGVtcGxhdGVSZWYsIENoYW5nZURldGVjdG9yUmVmLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ2hlY2tib3hTdGF0dXMgfSBmcm9tICcuL1Byb3BzVHlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ0NoZWNrYm94SXRlbSwgbnptLWNoZWNrYm94LWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3gtaXRlbS5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IENoZWNrYm94SXRlbUNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBDaGVja2JveEl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIHByZWZpeENscyA9ICdhbS1jaGVja2JveCc7XG4gIGNoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfbmdNb2RlbE9uQ2hhbmdlOiAodmFsdWU6IGJvb2xlYW4pID0+IHt9O1xuICBwcml2YXRlIF9uZ01vZGVsT25Ub3VjaGVkOiAoKSA9PiB7fTtcblxuICBASW5wdXQoKVxuICBuYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIHZhbHVlOiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIGFycm93OiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIGV4dHJhOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICBASW5wdXQoKVxuICB3cmFwOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIGVycm9yOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIG11bHRpcGxlTGluZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKVxuICBwbGF0Zm9ybTogc3RyaW5nID0gJ2lvcyc7XG4gIEBJbnB1dCgpXG4gIGFsaWduOiBzdHJpbmcgPSAnbWlkZGxlJztcbiAgQElucHV0KClcbiAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IHZhbHVlO1xuICB9XG4gIEBPdXRwdXQoKVxuICBvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2hlY2tib3hTdGF0dXM+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cblxuICBvbkNoZWNrYm94Q2xpY2soZXZlbnQpIHsgfVxuXG4gIGNoYW5nZShldmVudCkge1xuICAgIHRoaXMuY2hlY2tlZCA9IGV2ZW50LmNoZWNrZWQ7XG4gICAgdGhpcy5fbmdNb2RlbE9uQ2hhbmdlKGV2ZW50LmNoZWNrZWQpO1xuICAgIHRoaXMub25DaGFuZ2UuZW1pdChldmVudCk7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5jaGVja2VkID0gdmFsdWU7XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYm9vbGVhbikgPT4ge30pOiB2b2lkIHtcbiAgICB0aGlzLl9uZ01vZGVsT25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB7fSk6IHZvaWQge1xuICAgIHRoaXMuX25nTW9kZWxPblRvdWNoZWQgPSBmbjtcbiAgfVxufVxuIl19
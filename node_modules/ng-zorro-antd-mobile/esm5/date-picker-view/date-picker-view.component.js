/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input, Output, Component, forwardRef, HostBinding, EventEmitter, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DatePickerComponent } from '../date-picker/date-picker.component';
var DatePickerViewComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatePickerViewComponent, _super);
    function DatePickerViewComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mode = 'date';
        _this.minDate = new Date(2000, 5, 1, 0, 0, 0);
        _this.maxDate = new Date(2030, 1, 1, 23, 59, 59);
        _this.value = new Date();
        _this.disabled = false;
        _this.indicatorStyle = {};
        _this.showErrorToast = true;
        _this.showErrorToastInterval = 2000;
        _this.onValueChange = new EventEmitter();
        _this.amPicker = true;
        return _this;
    }
    Object.defineProperty(DatePickerViewComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this.options.locale;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.options.locale = value;
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatePickerViewComponent.prototype.reloadPicker = /**
     * @return {?}
     */
    function () {
        if (this.currentPicker) {
            /** @type {?} */
            var self_1 = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                self_1.selectedTarget.forEach((/**
                 * @param {?} item
                 * @param {?} i
                 * @return {?}
                 */
                function (item, i) {
                    self_1.currentPicker.children[i].children[2].style.transition = 'transform .3s';
                    /** @type {?} */
                    var index = parseInt(item.currentY, 0);
                    self_1.currentPicker.children[i].children[2].style.transform = "translateY(" + index * self_1.lineHeight + "px)";
                }));
            }), 0);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DatePickerViewComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.value = value;
            this.optionInit();
            this.init();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatePickerViewComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.ngModelOnChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatePickerViewComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.ngModelOnTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    DatePickerViewComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    DatePickerViewComponent.prototype.optionInit = /**
     * @return {?}
     */
    function () {
        this.options.mode = this.mode;
        this.options.minDate = this.minDate;
        this.options.maxDate = this.maxDate;
        this.options.disabled = this.disabled;
        this.options.locale = this.locale;
        this.options.value = this.value;
        this.options.showErrorToast = this.showErrorToast;
        this.options.showErrorToastInterval = this.showErrorToastInterval;
        this.options.onValueChange = this.onValueChange;
        this.checkMode(this.options.mode);
        /** @type {?} */
        var value = this.transformDateFormat(this.options.value).split('-');
        if (value.length > 0) {
            this.currentTime = value.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return parseInt(item, 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    DatePickerViewComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.optionInit();
        this.localeProvider();
    };
    /**
     * @return {?}
     */
    DatePickerViewComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.currentPicker = this.elementRef.nativeElement;
        this.reloadPicker();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatePickerViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.value) {
            this.options.value = changes.value.currentValue;
            /** @type {?} */
            var value = this.transformDateFormat(this.options.value).split('-');
            if (value.length > 0) {
                this.currentTime = value.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    return parseInt(item, 0);
                }));
            }
            if (!this.judgeEqualArray(this.currentTime, this.resultArr, this.resultArr.length) ||
                this.judgeEqualArray(this.currentTime, this.min_date, this.currentTime.length) ||
                this.judgeTime(this.currentTime, this.max_date)) {
                this.optionInit();
                this.init();
            }
        }
        if (changes.mode || changes.minDate || changes.maxDate || changes.disabled || changes.locale) {
            this.optionInit();
            this.init();
        }
    };
    DatePickerViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'DatePickerView, nzm-date-picker-view',
                    template: "<div *ngFor=\"let item of dataWithStr; let i = index\" class=\"am-picker-col\">\n  <div class=\"am-picker-col-indicator \" style=\"top: 102px;\" [ngStyle]=\"indicatorStyle\"></div>\n  <div id={{i}} class=\"am-picker-col-mask\" style=\"background-size: 100% 102px;\"></div>\n  <div class=\"am-picker-col-content\">\n    <div id={{i}} *ngFor=\"let val of item; let i = index\" class=\"am-picker-col-item\">{{val.label?val.label:val}}</div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatePickerViewComponent; })),
                            multi: true
                        }
                    ]
                }] }
    ];
    DatePickerViewComponent.propDecorators = {
        mode: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        indicatorStyle: [{ type: Input }],
        locale: [{ type: Input }],
        showErrorToast: [{ type: Input }],
        showErrorToastInterval: [{ type: Input }],
        onValueChange: [{ type: Output }],
        amPicker: [{ type: HostBinding, args: ['class.am-picker',] }]
    };
    return DatePickerViewComponent;
}(DatePickerComponent));
export { DatePickerViewComponent };
if (false) {
    /** @type {?} */
    DatePickerViewComponent.prototype.mode;
    /** @type {?} */
    DatePickerViewComponent.prototype.minDate;
    /** @type {?} */
    DatePickerViewComponent.prototype.maxDate;
    /** @type {?} */
    DatePickerViewComponent.prototype.value;
    /** @type {?} */
    DatePickerViewComponent.prototype.disabled;
    /** @type {?} */
    DatePickerViewComponent.prototype.indicatorStyle;
    /** @type {?} */
    DatePickerViewComponent.prototype.showErrorToast;
    /** @type {?} */
    DatePickerViewComponent.prototype.showErrorToastInterval;
    /** @type {?} */
    DatePickerViewComponent.prototype.onValueChange;
    /** @type {?} */
    DatePickerViewComponent.prototype.amPicker;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ActionSheetComponent } from './action-sheet.component';
import { ActionSheetOptions, ShareActionSheetWithOptions } from './action-sheet-options.provider';
import { PopupService } from '../core/services/popup.service';
import * as i0 from "@angular/core";
import * as i1 from "./public-api";
import * as i2 from "@angular/cdk/overlay";
/** @type {?} */
var NORMAL = 'NORMAL';
/** @type {?} */
var SHARE = 'SHARE';
/**
 * @return {?}
 */
function noop() { }
var ActionSheetService = /** @class */ (function (_super) {
    tslib_1.__extends(ActionSheetService, _super);
    function ActionSheetService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} config
     * @param {?=} options
     * @return {?}
     */
    ActionSheetService._initConfig = /**
     * @param {?} config
     * @param {?=} options
     * @return {?}
     */
    function (config, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var props = new ActionSheetOptions();
        /** @type {?} */
        var optionalParams = [
            'prefixCls',
            'maskClosable',
            'cancelButtonText',
            'cancelButtonIndex',
            'destructiveButtonIndex',
            'title',
            'message',
            'className',
            'transitionName',
            'maskTransitionName',
            'options',
            'locale'
        ];
        config = Object.assign(options, config, {
            close: (/**
             * @return {?}
             */
            function () {
                if (config.maskClosable) {
                    ActionSheetService.closeWithAnimation(config.transitionName, config.maskTransitionName);
                }
            })
        });
        optionalParams.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        }));
        return props;
    };
    /**
     * @param {?} props
     * @return {?}
     */
    ActionSheetService._open = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        setTimeout((/**
         * @return {?}
         */
        function () {
            ActionSheetService.comRef = ActionSheetService.showPopup('ActionSheetComponent', ActionSheetComponent);
            ActionSheetService.comRef.instance.option = props;
        }), 0);
    };
    /**
     * @param {?} flag
     * @param {?} config
     * @param {?} callback
     * @return {?}
     */
    ActionSheetService.createActionSheet = /**
     * @param {?} flag
     * @param {?} config
     * @param {?} callback
     * @return {?}
     */
    function (flag, config, callback) {
        /** @type {?} */
        var options = flag === NORMAL ? new ActionSheetOptions() : new ShareActionSheetWithOptions();
        /** @type {?} */
        var transitionName = config.transitionName ? config.transitionName : options.transitionName;
        options.transitionName = transitionName + "-enter " + transitionName + "-enter-active";
        /** @type {?} */
        var maskTransitionName = config.maskTransitionName ? config.maskTransitionName : options.maskTransitionName;
        options.maskTransitionName = maskTransitionName + "-enter " + maskTransitionName + "-enter-active";
        /** @type {?} */
        var props = ActionSheetService._initConfig(config, options);
        Object.assign(props, { onPress: cb }, { flag: flag }, { maskClose: props.maskClosable ? cb : (/**
             * @return {?}
             */
            function () { }) });
        /**
         * @param {?} index
         * @param {?=} rowIndex
         * @param {?=} event
         * @return {?}
         */
        function cb(index, rowIndex, event) {
            if (rowIndex === void 0) { rowIndex = 0; }
            event.stopPropagation();
            /** @type {?} */
            var res = callback(index, rowIndex);
            if (res && res.then) {
                res.then((/**
                 * @return {?}
                 */
                function () {
                    ActionSheetService.closeWithAnimation(transitionName, maskTransitionName);
                }));
            }
            else {
                ActionSheetService.closeWithAnimation(transitionName, maskTransitionName);
            }
        }
        return ActionSheetService._open(props);
    };
    /**
     * @param {?} transitionName
     * @param {?} maskTransitionName
     * @return {?}
     */
    ActionSheetService.closeWithAnimation = /**
     * @param {?} transitionName
     * @param {?} maskTransitionName
     * @return {?}
     */
    function (transitionName, maskTransitionName) {
        ActionSheetService.comRef.instance.option.transitionName = transitionName + "-leave " + transitionName + "-leave-active";
        ActionSheetService.comRef.instance.option.maskTransitionName = maskTransitionName + "-leave " + maskTransitionName + "-leave-active";
        setTimeout((/**
         * @return {?}
         */
        function () {
            ActionSheetService.close();
        }), 200);
    };
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    ActionSheetService.showActionSheetWithOptions = /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    function (config, callback) {
        if (callback === void 0) { callback = noop; }
        ActionSheetService.createActionSheet(NORMAL, config, callback);
    };
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    ActionSheetService.showShareActionSheetWithOptions = /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    function (config, callback) {
        if (callback === void 0) { callback = noop; }
        ActionSheetService.createActionSheet(SHARE, config, callback);
    };
    /**
     * @return {?}
     */
    ActionSheetService.close = /**
     * @return {?}
     */
    function () {
        ActionSheetService.hidePopup('ActionSheetComponent');
    };
    ActionSheetService.compRef = null;
    ActionSheetService._actionSheetCompFactory = null;
    ActionSheetService.appRef = null;
    ActionSheetService.comRef = null;
    ActionSheetService.instance = null;
    ActionSheetService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ ActionSheetService.ngInjectableDef = i0.defineInjectable({ factory: function ActionSheetService_Factory() { return new i1.ActionSheet(i0.inject(i2.Overlay)); }, token: i1.ActionSheet, providedIn: "root" });
    return ActionSheetService;
}(PopupService));
export { ActionSheetService };
if (false) {
    /** @type {?} */
    ActionSheetService.compRef;
    /** @type {?} */
    ActionSheetService._actionSheetCompFactory;
    /** @type {?} */
    ActionSheetService.appRef;
    /** @type {?} */
    ActionSheetService.comRef;
    /** @type {?} */
    ActionSheetService.instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXNoZWV0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbImFjdGlvbi1zaGVldC9hY3Rpb24tc2hlZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWtELE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFFTCxrQkFBa0IsRUFFbEIsMkJBQTJCLEVBQzVCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7OztJQUV4RCxNQUFNLEdBQUcsUUFBUTs7SUFDakIsS0FBSyxHQUFHLE9BQU87Ozs7QUFDckIsU0FBUyxJQUFJLEtBQUksQ0FBQztBQUNsQjtJQUd3Qyw4Q0FBWTtJQUhwRDs7S0E4RkM7Ozs7OztJQW5GUSw4QkFBVzs7Ozs7SUFBbEIsVUFBbUIsTUFBMEIsRUFBRSxPQUFvQjtRQUFwQix3QkFBQSxFQUFBLFlBQW9COztZQUMzRCxLQUFLLEdBQXVCLElBQUksa0JBQWtCLEVBQUU7O1lBQ3BELGNBQWMsR0FBYTtZQUMvQixXQUFXO1lBQ1gsY0FBYztZQUNkLGtCQUFrQjtZQUNsQixtQkFBbUI7WUFDbkIsd0JBQXdCO1lBQ3hCLE9BQU87WUFDUCxTQUFTO1lBQ1QsV0FBVztZQUNYLGdCQUFnQjtZQUNoQixvQkFBb0I7WUFDcEIsU0FBUztZQUNULFFBQVE7U0FDVDtRQUNELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUU7WUFDdEMsS0FBSzs7O1lBQUU7Z0JBQ0wsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFO29CQUN2QixrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxrQkFBa0Is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QyxNQUFNLENBQUMsa0JBQWtCLEdBQU0sa0JBQWtCLGVBQVUsa0JBQWtCLGtCQUFlLENBQUM7UUFDaEksVUFBVTs7O1FBQUM7WUFDVCxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM3QixDQUFDLEdBQUUsR0FBRyxDQUFDLENBQUM7SUFDVixDQUFDOzs7Ozs7SUFFTSw2Q0FBMEI7Ozs7O0lBQWpDLFVBQWtDLE1BQThCLEVBQUUsUUFBK0I7UUFBL0IseUJBQUEsRUFBQSxlQUErQjtRQUMvRixrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7OztJQUVNLGtEQUErQjs7Ozs7SUFBdEMsVUFBdUMsTUFBbUMsRUFBRSxRQUErQjtRQUEvQix5QkFBQSxFQUFBLGVBQStCO1FBQ3pHLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7OztJQUVNLHdCQUFLOzs7SUFBWjtRQUNFLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUF6Rk0sMEJBQU8sR0FBc0IsSUFBSSxDQUFDO0lBQ2xDLDBDQUF1QixHQUEyQyxJQUFJLENBQUM7SUFDdkUseUJBQU0sR0FBbUIsSUFBSSxDQUFDO0lBQzlCLHlCQUFNLEdBQXVDLElBQUksQ0FBQztJQUVsRCwyQkFBUSxHQUFHLElBQUksQ0FBQzs7Z0JBVHhCLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs2QkFmRDtDQTJHQyxBQTlGRCxDQUd3QyxZQUFZLEdBMkZuRDtTQTNGWSxrQkFBa0I7OztJQUM3QiwyQkFBeUM7O0lBQ3pDLDJDQUE4RTs7SUFDOUUsMEJBQXFDOztJQUNyQywwQkFBeUQ7O0lBRXpELDRCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudFJlZiwgQ29tcG9uZW50RmFjdG9yeSwgQXBwbGljYXRpb25SZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvblNoZWV0Q29tcG9uZW50IH0gZnJvbSAnLi9hY3Rpb24tc2hlZXQuY29tcG9uZW50JztcbmltcG9ydCB7XG4gIEFjdGlvbkNhbGxCYWNrLFxuICBBY3Rpb25TaGVldE9wdGlvbnMsXG4gIEFjdGlvblNoZWV0V2l0aE9wdGlvbnMsXG4gIFNoYXJlQWN0aW9uU2hlZXRXaXRoT3B0aW9uc1xufSBmcm9tICcuL2FjdGlvbi1zaGVldC1vcHRpb25zLnByb3ZpZGVyJztcbmltcG9ydCB7IFBvcHVwU2VydmljZSB9IGZyb20gJy4uL2NvcmUvc2VydmljZXMvcG9wdXAuc2VydmljZSc7XG5cbmNvbnN0IE5PUk1BTCA9ICdOT1JNQUwnO1xuY29uc3QgU0hBUkUgPSAnU0hBUkUnO1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBY3Rpb25TaGVldFNlcnZpY2UgZXh0ZW5kcyBQb3B1cFNlcnZpY2Uge1xuICBzdGF0aWMgY29tcFJlZjogQ29tcG9uZW50UmVmPGFueT4gPSBudWxsO1xuICBzdGF0aWMgX2FjdGlvblNoZWV0Q29tcEZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8QWN0aW9uU2hlZXRDb21wb25lbnQ+ID0gbnVsbDtcbiAgc3RhdGljIGFwcFJlZjogQXBwbGljYXRpb25SZWYgPSBudWxsO1xuICBzdGF0aWMgY29tUmVmOiBDb21wb25lbnRSZWY8QWN0aW9uU2hlZXRDb21wb25lbnQ+ID0gbnVsbDtcblxuICBzdGF0aWMgaW5zdGFuY2UgPSBudWxsO1xuXG4gIHN0YXRpYyBfaW5pdENvbmZpZyhjb25maWc6IEFjdGlvblNoZWV0T3B0aW9ucywgb3B0aW9uczogT2JqZWN0ID0ge30pOiBBY3Rpb25TaGVldE9wdGlvbnMge1xuICAgIGNvbnN0IHByb3BzOiBBY3Rpb25TaGVldE9wdGlvbnMgPSBuZXcgQWN0aW9uU2hlZXRPcHRpb25zKCk7XG4gICAgY29uc3Qgb3B0aW9uYWxQYXJhbXM6IHN0cmluZ1tdID0gW1xuICAgICAgJ3ByZWZpeENscycsXG4gICAgICAnbWFza0Nsb3NhYmxlJyxcbiAgICAgICdjYW5jZWxCdXR0b25UZXh0JyxcbiAgICAgICdjYW5jZWxCdXR0b25JbmRleCcsXG4gICAgICAnZGVzdHJ1Y3RpdmVCdXR0b25JbmRleCcsXG4gICAgICAndGl0bGUnLFxuICAgICAgJ21lc3NhZ2UnLFxuICAgICAgJ2NsYXNzTmFtZScsXG4gICAgICAndHJhbnNpdGlvbk5hbWUnLFxuICAgICAgJ21hc2tUcmFuc2l0aW9uTmFtZScsXG4gICAgICAnb3B0aW9ucycsXG4gICAgICAnbG9jYWxlJ1xuICAgIF07XG4gICAgY29uZmlnID0gT2JqZWN0LmFzc2lnbihvcHRpb25zLCBjb25maWcsIHtcbiAgICAgIGNsb3NlOiAoKTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChjb25maWcubWFza0Nsb3NhYmxlKSB7XG4gICAgICAgICAgQWN0aW9uU2hlZXRTZXJ2aWNlLmNsb3NlV2l0aEFuaW1hdGlvbihjb25maWcudHJhbnNpdGlvbk5hbWUsIGNvbmZpZy5tYXNrVHJhbnNpdGlvbk5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgb3B0aW9uYWxQYXJhbXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKGNvbmZpZ1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcHNba2V5XSA9IGNvbmZpZ1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuXG4gIHN0YXRpYyBfb3Blbihwcm9wczogQWN0aW9uU2hlZXRPcHRpb25zKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBBY3Rpb25TaGVldFNlcnZpY2UuY29tUmVmID0gIEFjdGlvblNoZWV0U2VydmljZS5zaG93UG9wdXAoJ0FjdGlvblNoZWV0Q29tcG9uZW50JywgQWN0aW9uU2hlZXRDb21wb25lbnQpO1xuICAgICAgQWN0aW9uU2hlZXRTZXJ2aWNlLmNvbVJlZi5pbnN0YW5jZS5vcHRpb24gPSBwcm9wcztcbiAgICB9LCAwKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVBY3Rpb25TaGVldChcbiAgICBmbGFnOiBzdHJpbmcsXG4gICAgY29uZmlnOiBBY3Rpb25TaGVldFdpdGhPcHRpb25zIHwgU2hhcmVBY3Rpb25TaGVldFdpdGhPcHRpb25zLFxuICAgIGNhbGxiYWNrOiBBY3Rpb25DYWxsQmFja1xuICApIHtcbiAgICBjb25zdCBvcHRpb25zID0gZmxhZyA9PT0gTk9STUFMID8gbmV3IEFjdGlvblNoZWV0T3B0aW9ucygpIDogbmV3IFNoYXJlQWN0aW9uU2hlZXRXaXRoT3B0aW9ucygpO1xuICAgIGNvbnN0IHRyYW5zaXRpb25OYW1lID0gY29uZmlnLnRyYW5zaXRpb25OYW1lID8gY29uZmlnLnRyYW5zaXRpb25OYW1lIDogb3B0aW9ucy50cmFuc2l0aW9uTmFtZTtcbiAgICBvcHRpb25zLnRyYW5zaXRpb25OYW1lID0gYCR7dHJhbnNpdGlvbk5hbWV9LWVudGVyICR7dHJhbnNpdGlvbk5hbWV9LWVudGVyLWFjdGl2ZWA7XG4gICAgY29uc3QgbWFza1RyYW5zaXRpb25OYW1lID0gY29uZmlnLm1hc2tUcmFuc2l0aW9uTmFtZSA/IGNvbmZpZy5tYXNrVHJhbnNpdGlvbk5hbWUgOiBvcHRpb25zLm1hc2tUcmFuc2l0aW9uTmFtZTtcbiAgICBvcHRpb25zLm1hc2tUcmFuc2l0aW9uTmFtZSA9IGAke21hc2tUcmFuc2l0aW9uTmFtZX0tZW50ZXIgJHttYXNrVHJhbnNpdGlvbk5hbWV9LWVudGVyLWFjdGl2ZWA7XG4gICAgY29uc3QgcHJvcHMgPSBBY3Rpb25TaGVldFNlcnZpY2UuX2luaXRDb25maWcoY29uZmlnLCBvcHRpb25zKTtcbiAgICBPYmplY3QuYXNzaWduKHByb3BzLCB7IG9uUHJlc3M6IGNiIH0sIHsgZmxhZzogZmxhZyB9LCB7IG1hc2tDbG9zZTogcHJvcHMubWFza0Nsb3NhYmxlID8gY2IgOiAoKSA9PiB7fX0pO1xuICAgIGZ1bmN0aW9uIGNiKGluZGV4OiBhbnksIHJvd0luZGV4ID0gMCwgZXZlbnQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgY29uc3QgcmVzID0gY2FsbGJhY2soaW5kZXgsIHJvd0luZGV4KTtcbiAgICAgIGlmIChyZXMgJiYgcmVzLnRoZW4pIHtcbiAgICAgICAgcmVzLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIEFjdGlvblNoZWV0U2VydmljZS5jbG9zZVdpdGhBbmltYXRpb24odHJhbnNpdGlvbk5hbWUsIG1hc2tUcmFuc2l0aW9uTmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQWN0aW9uU2hlZXRTZXJ2aWNlLmNsb3NlV2l0aEFuaW1hdGlvbih0cmFuc2l0aW9uTmFtZSwgbWFza1RyYW5zaXRpb25OYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEFjdGlvblNoZWV0U2VydmljZS5fb3Blbihwcm9wcyk7XG4gIH1cblxuICBzdGF0aWMgY2xvc2VXaXRoQW5pbWF0aW9uKHRyYW5zaXRpb25OYW1lLCBtYXNrVHJhbnNpdGlvbk5hbWUpIHtcbiAgICBBY3Rpb25TaGVldFNlcnZpY2UuY29tUmVmLmluc3RhbmNlLm9wdGlvbi50cmFuc2l0aW9uTmFtZSA9IGAke3RyYW5zaXRpb25OYW1lfS1sZWF2ZSAke3RyYW5zaXRpb25OYW1lfS1sZWF2ZS1hY3RpdmVgO1xuICAgIEFjdGlvblNoZWV0U2VydmljZS5jb21SZWYuaW5zdGFuY2Uub3B0aW9uLm1hc2tUcmFuc2l0aW9uTmFtZSA9IGAke21hc2tUcmFuc2l0aW9uTmFtZX0tbGVhdmUgJHttYXNrVHJhbnNpdGlvbk5hbWV9LWxlYXZlLWFjdGl2ZWA7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBBY3Rpb25TaGVldFNlcnZpY2UuY2xvc2UoKTtcbiAgICB9LCAyMDApO1xuICB9XG5cbiAgc3RhdGljIHNob3dBY3Rpb25TaGVldFdpdGhPcHRpb25zKGNvbmZpZzogQWN0aW9uU2hlZXRXaXRoT3B0aW9ucywgY2FsbGJhY2s6IEFjdGlvbkNhbGxCYWNrID0gbm9vcCkge1xuICAgIEFjdGlvblNoZWV0U2VydmljZS5jcmVhdGVBY3Rpb25TaGVldChOT1JNQUwsIGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG5cbiAgc3RhdGljIHNob3dTaGFyZUFjdGlvblNoZWV0V2l0aE9wdGlvbnMoY29uZmlnOiBTaGFyZUFjdGlvblNoZWV0V2l0aE9wdGlvbnMsIGNhbGxiYWNrOiBBY3Rpb25DYWxsQmFjayA9IG5vb3ApIHtcbiAgICBBY3Rpb25TaGVldFNlcnZpY2UuY3JlYXRlQWN0aW9uU2hlZXQoU0hBUkUsIGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG5cbiAgc3RhdGljIGNsb3NlKCkge1xuICAgIEFjdGlvblNoZWV0U2VydmljZS5oaWRlUG9wdXAoJ0FjdGlvblNoZWV0Q29tcG9uZW50Jyk7XG4gIH1cbn1cbiJdfQ==
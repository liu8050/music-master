/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/** @enum {number} */
var actionSheetEvent = {
    onShow: 0,
    onShown: 1,
    onHide: 2,
    onHidden: 3,
    onOk: 4,
    onCancel: 5,
    onDestroy: 6,
};
var ActionSheetSubjectService = /** @class */ (function (_super) {
    tslib_1.__extends(ActionSheetSubjectService, _super);
    function ActionSheetSubjectService() {
        var _this = _super.call(this) || this;
        _this._eventsQueue = {};
        _this.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var eventQueue = _this._eventsQueue[value] || [];
            eventQueue.forEach((/**
             * @param {?} cb
             * @return {?}
             */
            function (cb) {
                if (cb !== null && cb !== undefined) {
                    cb();
                }
            }));
        }));
        return _this;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    ActionSheetSubjectService.prototype.destroy = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'onCancel'; }
        if (!this.isStopped && !this.closed) {
            this.next(type);
        }
    };
    /**
     * @param {?} eventType
     * @param {?} cb
     * @return {?}
     */
    ActionSheetSubjectService.prototype.on = /**
     * @param {?} eventType
     * @param {?} cb
     * @return {?}
     */
    function (eventType, cb) {
        if (this._eventsQueue[eventType]) {
            this._eventsQueue[eventType].push(cb);
        }
        else {
            this._eventsQueue[eventType] = [cb];
        }
    };
    ActionSheetSubjectService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ActionSheetSubjectService.ctorParameters = function () { return []; };
    return ActionSheetSubjectService;
}(Subject));
export { ActionSheetSubjectService };
if (false) {
    /** @type {?} */
    ActionSheetSubjectService.prototype.modalId;
    /**
     * @type {?}
     * @private
     */
    ActionSheetSubjectService.prototype._eventsQueue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXNoZWV0LXN1YmplY3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiYWN0aW9uLXNoZWV0L2FjdGlvbi1zaGVldC1zdWJqZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7OztJQUk3QixTQUFNO0lBQ04sVUFBTztJQUNQLFNBQU07SUFDTixXQUFRO0lBQ1IsT0FBSTtJQUNKLFdBQVE7SUFDUixZQUFTOztBQUdYO0lBQytDLHFEQUFZO0lBSXpEO1FBQUEsWUFDRSxpQkFBTyxTQVNSO1FBWk8sa0JBQVksR0FBRyxFQUFFLENBQUM7UUFJeEIsS0FBSSxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFDLEtBQWE7O2dCQUNyQixVQUFVLEdBQW9CLEtBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNsRSxVQUFVLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsRUFBRTtnQkFDbkIsSUFBSSxFQUFFLEtBQUssSUFBSSxJQUFJLEVBQUUsS0FBSyxTQUFTLEVBQUU7b0JBQ25DLEVBQUUsRUFBRSxDQUFDO2lCQUNOO1lBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQzs7SUFDTCxDQUFDOzs7OztJQUVELDJDQUFPOzs7O0lBQVAsVUFBUSxJQUFzQjtRQUF0QixxQkFBQSxFQUFBLGlCQUFzQjtRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7Ozs7OztJQUVELHNDQUFFOzs7OztJQUFGLFVBQUcsU0FBaUIsRUFBRSxFQUFZO1FBQ2hDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN2QzthQUFNO1lBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQzs7Z0JBN0JGLFVBQVU7Ozs7SUE4QlgsZ0NBQUM7Q0FBQSxBQTlCRCxDQUMrQyxPQUFPLEdBNkJyRDtTQTdCWSx5QkFBeUI7OztJQUNwQyw0Q0FBZ0I7Ozs7O0lBQ2hCLGlEQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuLyog5LqL5Lu25p6a5Li+ICovXG5jb25zdCBlbnVtIGFjdGlvblNoZWV0RXZlbnQge1xuICBvblNob3csXG4gIG9uU2hvd24sXG4gIG9uSGlkZSxcbiAgb25IaWRkZW4sXG4gIG9uT2ssXG4gIG9uQ2FuY2VsLFxuICBvbkRlc3Ryb3lcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjdGlvblNoZWV0U3ViamVjdFNlcnZpY2UgZXh0ZW5kcyBTdWJqZWN0PGFueT4ge1xuICBtb2RhbElkOiBzdHJpbmc7XG4gIHByaXZhdGUgX2V2ZW50c1F1ZXVlID0ge307XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnN1YnNjcmliZSgodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgZXZlbnRRdWV1ZTogQXJyYXk8RnVuY3Rpb24+ID0gdGhpcy5fZXZlbnRzUXVldWVbdmFsdWVdIHx8IFtdO1xuICAgICAgZXZlbnRRdWV1ZS5mb3JFYWNoKGNiID0+IHtcbiAgICAgICAgaWYgKGNiICE9PSBudWxsICYmIGNiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3kodHlwZTogYW55ID0gJ29uQ2FuY2VsJykge1xuICAgIGlmICghdGhpcy5pc1N0b3BwZWQgJiYgIXRoaXMuY2xvc2VkKSB7XG4gICAgICB0aGlzLm5leHQodHlwZSk7XG4gICAgfVxuICB9XG5cbiAgb24oZXZlbnRUeXBlOiBzdHJpbmcsIGNiOiBGdW5jdGlvbikge1xuICAgIGlmICh0aGlzLl9ldmVudHNRdWV1ZVtldmVudFR5cGVdKSB7XG4gICAgICB0aGlzLl9ldmVudHNRdWV1ZVtldmVudFR5cGVdLnB1c2goY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ldmVudHNRdWV1ZVtldmVudFR5cGVdID0gW2NiXTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
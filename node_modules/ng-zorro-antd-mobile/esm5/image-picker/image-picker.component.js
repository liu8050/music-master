/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ViewContainerRef } from '@angular/core';
/**
 * @record
 */
export function ElementType() { }
if (false) {
    /** @type {?} */
    ElementType.prototype.type;
    /** @type {?} */
    ElementType.prototype.backgroundImage;
    /** @type {?} */
    ElementType.prototype.transform;
}
var ImagePickerComponent = /** @class */ (function () {
    function ImagePickerComponent() {
        this.prefixCls = 'am-image-picker';
        this.flexEl = [];
        this._accept = 'image/*';
        this._count = 4;
        this._selectable = true;
        this._files = [];
        this._multiple = false;
        this.capture = false;
        this.disableDelete = false;
        this.onFail = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onImageClick = new EventEmitter();
        this.onAddImageClick = new EventEmitter();
    }
    Object.defineProperty(ImagePickerComponent.prototype, "files", {
        get: /**
         * @return {?}
         */
        function () {
            return this._files;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._files = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePickerComponent.prototype, "accept", {
        get: /**
         * @return {?}
         */
        function () {
            return this._accept;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._accept = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePickerComponent.prototype, "length", {
        get: /**
         * @return {?}
         */
        function () {
            return this._count;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value > 0) {
                this._count = value;
            }
            else {
                this._count = 4;
            }
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePickerComponent.prototype, "multiple", {
        get: /**
         * @return {?}
         */
        function () {
            return this._multiple;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._multiple = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePickerComponent.prototype, "selectable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectable;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectable = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ImagePickerComponent.prototype.sortItem = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._files) {
            return;
        }
        /** @type {?} */
        var count = parseInt('' + this._count, 10);
        if (count <= 0) {
            count = 4;
        }
        /** @type {?} */
        var allEl = this._files.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return {
                type: 'img',
                backgroundImage: 'url(' + item.url + ')',
                transform: 'rotate(' + _this.getRotation(item.orientation) + ')deg'
            };
        }));
        if (this._selectable) {
            allEl.push({
                type: 'select',
                backgroundImage: '',
                transform: ''
            });
        }
        /** @type {?} */
        var length = allEl.length;
        if (length !== 0 && length % count !== 0) {
            /** @type {?} */
            var blankCount = count - (length % count);
            /** @type {?} */
            var fillBlankEl = [];
            for (var i = 0; i < blankCount; i++) {
                fillBlankEl.push({
                    type: 'white',
                    backgroundImage: '',
                    transform: ''
                });
            }
            allEl = allEl.concat(fillBlankEl);
        }
        this.flexEl = [];
        for (var i = 0; i < allEl.length / count; i++) {
            /** @type {?} */
            var rowEl = allEl.slice(i * count, i * count + count);
            this.flexEl.push(rowEl);
        }
    };
    /**
     * @param {?} imgItem
     * @return {?}
     */
    ImagePickerComponent.prototype.addImage = /**
     * @param {?} imgItem
     * @return {?}
     */
    function (imgItem) {
        this._files.push({
            type: 'img',
            url: imgItem.url,
            orientation: imgItem.orientation
        });
        this.sortItem();
        this.onChange.emit({
            files: this._files,
            operationType: 'add',
            index: this._files.length - 1
        });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ImagePickerComponent.prototype.removeImage = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this._files.splice(index, 1);
        this.sortItem();
        this.onChange.emit({
            files: this._files,
            operationType: 'remove',
            index: index
        });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ImagePickerComponent.prototype.imageClick = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.onImageClick.emit({
            index: index,
            files: this._files
        });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ImagePickerComponent.prototype.addImageClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onAddImageClick.emit(e);
    };
    /**
     * @param {?} file
     * @param {?} index
     * @return {?}
     */
    ImagePickerComponent.prototype.parseFile = /**
     * @param {?} file
     * @param {?} index
     * @return {?}
     */
    function (file, index) {
        var _this = this;
        /** @type {?} */
        var reader = new FileReader();
        reader.onload = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var dataURL = ((/** @type {?} */ (e.target))).result;
            if (!dataURL) {
                _this.onFail.emit("Fail to get the " + index + " image");
                return;
            }
            /** @type {?} */
            var orientation = 1;
            _this.getOrientation(file, (/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                // -2: not jpeg , -1: not defined
                if (res > 0) {
                    orientation = res;
                }
                _this.addImage({
                    url: dataURL,
                    orientation: orientation,
                    file: file
                });
            }));
        });
        reader.readAsDataURL(file);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ImagePickerComponent.prototype.fileChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var fileList = event.target.files;
        if (fileList && fileList.length) {
            for (var i = 0; i < fileList.length; i++) {
                this.parseFile(fileList[i], i);
            }
        }
    };
    /**
     * @param {?=} orientation
     * @return {?}
     */
    ImagePickerComponent.prototype.getRotation = /**
     * @param {?=} orientation
     * @return {?}
     */
    function (orientation) {
        if (orientation === void 0) { orientation = 1; }
        /** @type {?} */
        var imgRotation = 0;
        switch (orientation) {
            case 3:
                imgRotation = 180;
                break;
            case 6:
                imgRotation = 90;
                break;
            case 8:
                imgRotation = 270;
                break;
            default:
        }
        return imgRotation;
    };
    // https://stackoverflow.com/questions/7584794/accessing-jpeg-exif-rotation-data-in-javascript-on-the-client-side
    // https://stackoverflow.com/questions/7584794/accessing-jpeg-exif-rotation-data-in-javascript-on-the-client-side
    /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    ImagePickerComponent.prototype.getOrientation = 
    // https://stackoverflow.com/questions/7584794/accessing-jpeg-exif-rotation-data-in-javascript-on-the-client-side
    /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    function (file, callback) {
        /** @type {?} */
        var reader = new FileReader();
        reader.onload = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var view = new DataView(((/** @type {?} */ (e.target))).result);
            if (view.getUint16(0, false) !== 0xffd8) {
                return callback(-2);
            }
            /** @type {?} */
            var length = view.byteLength;
            /** @type {?} */
            var offset = 2;
            while (offset < length) {
                /** @type {?} */
                var marker = view.getUint16(offset, false);
                offset += 2;
                if (marker === 0xffe1) {
                    /** @type {?} */
                    var tmp = view.getUint32((offset += 2), false);
                    if (tmp !== 0x45786966) {
                        return callback(-1);
                    }
                    /** @type {?} */
                    var little = view.getUint16((offset += 6), false) === 0x4949;
                    offset += view.getUint32(offset + 4, little);
                    /** @type {?} */
                    var tags = view.getUint16(offset, little);
                    offset += 2;
                    for (var i = 0; i < tags; i++) {
                        if (view.getUint16(offset + i * 12, little) === 0x0112) {
                            return callback(view.getUint16(offset + i * 12 + 8, little));
                        }
                    }
                }
                else if ((marker & 0xff00) !== 0xff00) {
                    break;
                }
                else {
                    offset += view.getUint16(offset, false);
                }
            }
            return callback(-1);
        });
        reader.readAsArrayBuffer(file.slice(0, 64 * 1024));
    };
    ImagePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ImagePicker, nzm-image-picker',
                    template: "<div class=\"{{prefixCls}}-list\" role=\"group\">\n  <Flex *ngFor=\"let rowItem of flexEl;let i = index;\">\n    <FlexItem *ngFor=\"let item of rowItem;let j =index;\">\n      <div *ngIf=\"item && 'img' === item.type && item.backgroundImage\" class=\"{{prefixCls}}-item\">\n        <div role=\"button\"\n             *ngIf=\"!disableDelete\"\n             aria-label=\"Click and Remove this image\"\n             class=\"{{prefixCls}}-item-remove\"\n             (click)=\"removeImage(i * length + j)\"\n        ></div>\n        <div role=\"button\"\n             aria-label=\"Image can be clicked\"\n             class=\"{{prefixCls}}-item-content\"\n             [ngStyle]=\"{'background-image': item.backgroundImage, 'transform': item.transform}\"\n             (click)=\"imageClick(i * length + j)\"\n        ></div>\n      </div>\n      <div role=\"button\"\n           aria-label=\"Choose and add image\"\n           *ngIf=\"item && 'select' === item.type\"\n           class=\"{{prefixCls}}-item {{prefixCls}}-upload-btn\"\n           (click)=\"addImageClick($event)\"\n      >\n        <input #fileSelectorInput\n               type=\"file\"\n               [accept]=\"accept\"\n               [multiple]=\"multiple\"\n               [attr.capture]=\"capture ? capture : null\"\n               (change)=\"fileChange($event)\"\n        />\n      </div>\n      <div *ngIf=\"item && 'white' === item.type\" class=\"{{prefixCls}}-item-white\">\n      </div>\n    </FlexItem>\n  </Flex>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ImagePickerComponent.ctorParameters = function () { return []; };
    ImagePickerComponent.propDecorators = {
        _fileSelectorInput: [{ type: ViewChild, args: ['fileSelectorInput', { read: ViewContainerRef },] }],
        capture: [{ type: Input }],
        disableDelete: [{ type: Input }],
        files: [{ type: Input }],
        accept: [{ type: Input }],
        length: [{ type: Input }],
        multiple: [{ type: Input }],
        selectable: [{ type: Input }],
        onFail: [{ type: Output }],
        onChange: [{ type: Output }],
        onImageClick: [{ type: Output }],
        onAddImageClick: [{ type: Output }]
    };
    return ImagePickerComponent;
}());
export { ImagePickerComponent };
if (false) {
    /** @type {?} */
    ImagePickerComponent.prototype.prefixCls;
    /** @type {?} */
    ImagePickerComponent.prototype.flexEl;
    /**
     * @type {?}
     * @private
     */
    ImagePickerComponent.prototype._accept;
    /**
     * @type {?}
     * @private
     */
    ImagePickerComponent.prototype._count;
    /**
     * @type {?}
     * @private
     */
    ImagePickerComponent.prototype._selectable;
    /**
     * @type {?}
     * @private
     */
    ImagePickerComponent.prototype._files;
    /**
     * @type {?}
     * @private
     */
    ImagePickerComponent.prototype._multiple;
    /**
     * @type {?}
     * @private
     */
    ImagePickerComponent.prototype._fileSelectorInput;
    /** @type {?} */
    ImagePickerComponent.prototype.capture;
    /** @type {?} */
    ImagePickerComponent.prototype.disableDelete;
    /** @type {?} */
    ImagePickerComponent.prototype.onFail;
    /** @type {?} */
    ImagePickerComponent.prototype.onChange;
    /** @type {?} */
    ImagePickerComponent.prototype.onImageClick;
    /** @type {?} */
    ImagePickerComponent.prototype.onAddImageClick;
}
//# sourceMappingURL=data:application/json;base64,
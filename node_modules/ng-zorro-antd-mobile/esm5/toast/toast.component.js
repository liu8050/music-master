/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, TemplateRef, NgZone } from '@angular/core';
var ToastComponent = /** @class */ (function () {
    function ToastComponent(_zone) {
        this._zone = _zone;
        this.prefixCls = 'am-toast';
        this.isContentString = true;
        this.transitionName = 'am-fade-enter am-fade-enter-active';
        this._iconType = '';
        this._content = '';
        this.mask = true;
        this.position = 'middle';
    }
    Object.defineProperty(ToastComponent.prototype, "content", {
        get: /**
         * @return {?}
         */
        function () {
            return this._content;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (value instanceof TemplateRef) {
                this.isContentString = false;
            }
            else {
                this.isContentString = true;
            }
            this._zone.run((/**
             * @return {?}
             */
            function () {
                _this._content = value;
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastComponent.prototype, "iconType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconType;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._zone.run((/**
             * @return {?}
             */
            function () {
                _this._iconType = value;
            }));
        },
        enumerable: true,
        configurable: true
    });
    ToastComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Toast',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div class=\"{{prefixCls}}-notice {{prefixCls}}-notice-closable {{transitionName}}\">\n  <div class=\"{{prefixCls}}-notice-content\">\n    <div role=\"alert\"\n         *ngIf=\"iconType\"\n         class=\"{{prefixCls}}-text {{prefixCls}}-text-icon\"\n         aria-live=\"assertive\"\n    >\n      <Icon [type]=\"iconType\" [size]=\"'lg'\"></Icon>\n      <div *ngIf=\"isContentString\" class=\"{{prefixCls}}-text-info\">{{content}}</div>\n    </div>\n    <div *ngIf=\"!iconType\" class=\"{{prefixCls}}-text\" role=\"alert\" aria-live=\"assertive\">\n      <div *ngIf=\"isContentString\" class=\"{{prefixCls}}-text-info\">{{content}}</div>\n      <ng-template *ngIf=\"!isContentString\" [ngTemplateOutlet]=\"content\"></ng-template>\n    </div>\n  </div>\n  <a class=\"{{prefixCls}}-notice-close\">\n    <span class=\"{{prefixCls}}-notice-close-x\"></span>\n  </a>\n</div>\n",
                    host: {
                        '[class.am-toast]': 'true',
                        '[class.am-toast-mask]': 'mask',
                        '[class.am-toast-mask-top]': "mask && position === 'top'",
                        '[class.am-toast-mask-middle]': "mask && position === 'middle'",
                        '[class.am-toast-mask-bottom]': "mask && position === 'bottom'",
                        '[class.am-toast-nomask]': '!mask',
                        '[class.am-toast-nomask-top]': "!mask && position === 'top'",
                        '[class.am-toast-nomask-middle]': "!mask && position === 'middle'",
                        '[class.am-toast-nomask-bottom]': "!mask && position === 'bottom'",
                    }
                }] }
    ];
    /** @nocollapse */
    ToastComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    ToastComponent.propDecorators = {
        mask: [{ type: Input }],
        content: [{ type: Input }],
        iconType: [{ type: Input }],
        position: [{ type: Input }]
    };
    return ToastComponent;
}());
export { ToastComponent };
if (false) {
    /** @type {?} */
    ToastComponent.prototype.prefixCls;
    /** @type {?} */
    ToastComponent.prototype.isContentString;
    /** @type {?} */
    ToastComponent.prototype.maskClassMap;
    /** @type {?} */
    ToastComponent.prototype.transitionName;
    /**
     * @type {?}
     * @private
     */
    ToastComponent.prototype._iconType;
    /**
     * @type {?}
     * @private
     */
    ToastComponent.prototype._content;
    /** @type {?} */
    ToastComponent.prototype.mask;
    /** @type {?} */
    ToastComponent.prototype.position;
    /**
     * @type {?}
     * @private
     */
    ToastComponent.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJ0b2FzdC90b2FzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekY7SUFxREUsd0JBQW9CLEtBQWE7UUFBYixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBcENqQyxjQUFTLEdBQVcsVUFBVSxDQUFDO1FBQy9CLG9CQUFlLEdBQVksSUFBSSxDQUFDO1FBRWhDLG1CQUFjLEdBQUcsb0NBQW9DLENBQUM7UUFFOUMsY0FBUyxHQUFXLEVBQUUsQ0FBQztRQUN2QixhQUFRLEdBQThCLEVBQUUsQ0FBQztRQUdqRCxTQUFJLEdBQVksSUFBSSxDQUFDO1FBeUJyQixhQUFRLEdBQVcsUUFBUSxDQUFDO0lBRVEsQ0FBQztJQTFCckMsc0JBQ0ksbUNBQU87Ozs7UUFEWDtZQUVFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDOzs7OztRQUNELFVBQVksS0FBZ0M7WUFBNUMsaUJBU0M7WUFSQyxJQUFJLEtBQUssWUFBWSxXQUFXLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO2FBQzdCO1lBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7WUFBQztnQkFDYixLQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUN4QixDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUM7OztPQVZBO0lBV0Qsc0JBQ0ksb0NBQVE7Ozs7UUFEWjtZQUVFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDOzs7OztRQUNELFVBQWEsS0FBYTtZQUExQixpQkFJQztZQUhDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7O1lBQUM7Z0JBQ2IsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDekIsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDOzs7T0FMQTs7Z0JBNUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsT0FBTztvQkFDakIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLHMzQkFBcUM7b0JBQ3JDLElBQUksRUFBRTt3QkFDSixrQkFBa0IsRUFBRSxNQUFNO3dCQUMxQix1QkFBdUIsRUFBRSxNQUFNO3dCQUMvQiwyQkFBMkIsRUFBRSw0QkFBNEI7d0JBQ3pELDhCQUE4QixFQUFFLCtCQUErQjt3QkFDL0QsOEJBQThCLEVBQUUsK0JBQStCO3dCQUMvRCx5QkFBeUIsRUFBRSxPQUFPO3dCQUNsQyw2QkFBNkIsRUFBRSw2QkFBNkI7d0JBQzVELGdDQUFnQyxFQUFFLGdDQUFnQzt3QkFDbEUsZ0NBQWdDLEVBQUUsZ0NBQWdDO3FCQUNuRTtpQkFDRjs7OztnQkFqQjBELE1BQU07Ozt1QkEyQjlELEtBQUs7MEJBRUwsS0FBSzsyQkFjTCxLQUFLOzJCQVNMLEtBQUs7O0lBSVIscUJBQUM7Q0FBQSxBQXRERCxJQXNEQztTQXRDWSxjQUFjOzs7SUFDekIsbUNBQStCOztJQUMvQix5Q0FBZ0M7O0lBQ2hDLHNDQUFhOztJQUNiLHdDQUFzRDs7Ozs7SUFFdEQsbUNBQStCOzs7OztJQUMvQixrQ0FBaUQ7O0lBRWpELDhCQUNxQjs7SUF3QnJCLGtDQUM0Qjs7Ozs7SUFFaEIsK0JBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiwgSW5wdXQsIFRlbXBsYXRlUmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnVG9hc3QnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICB0ZW1wbGF0ZVVybDogJy4vdG9hc3QuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5hbS10b2FzdF0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hbS10b2FzdC1tYXNrXSc6ICdtYXNrJyxcbiAgICAnW2NsYXNzLmFtLXRvYXN0LW1hc2stdG9wXSc6IGBtYXNrICYmIHBvc2l0aW9uID09PSAndG9wJ2AsXG4gICAgJ1tjbGFzcy5hbS10b2FzdC1tYXNrLW1pZGRsZV0nOiBgbWFzayAmJiBwb3NpdGlvbiA9PT0gJ21pZGRsZSdgLFxuICAgICdbY2xhc3MuYW0tdG9hc3QtbWFzay1ib3R0b21dJzogYG1hc2sgJiYgcG9zaXRpb24gPT09ICdib3R0b20nYCxcbiAgICAnW2NsYXNzLmFtLXRvYXN0LW5vbWFza10nOiAnIW1hc2snLFxuICAgICdbY2xhc3MuYW0tdG9hc3Qtbm9tYXNrLXRvcF0nOiBgIW1hc2sgJiYgcG9zaXRpb24gPT09ICd0b3AnYCxcbiAgICAnW2NsYXNzLmFtLXRvYXN0LW5vbWFzay1taWRkbGVdJzogYCFtYXNrICYmIHBvc2l0aW9uID09PSAnbWlkZGxlJ2AsXG4gICAgJ1tjbGFzcy5hbS10b2FzdC1ub21hc2stYm90dG9tXSc6IGAhbWFzayAmJiBwb3NpdGlvbiA9PT0gJ2JvdHRvbSdgLFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIFRvYXN0Q29tcG9uZW50IHtcbiAgcHJlZml4Q2xzOiBzdHJpbmcgPSAnYW0tdG9hc3QnO1xuICBpc0NvbnRlbnRTdHJpbmc6IGJvb2xlYW4gPSB0cnVlO1xuICBtYXNrQ2xhc3NNYXA7XG4gIHRyYW5zaXRpb25OYW1lID0gJ2FtLWZhZGUtZW50ZXIgYW0tZmFkZS1lbnRlci1hY3RpdmUnO1xuXG4gIHByaXZhdGUgX2ljb25UeXBlOiBzdHJpbmcgPSAnJztcbiAgcHJpdmF0ZSBfY29udGVudDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiA9ICcnO1xuXG4gIEBJbnB1dCgpXG4gIG1hc2s6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKVxuICBnZXQgY29udGVudCgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fY29udGVudDtcbiAgfVxuICBzZXQgY29udGVudCh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLmlzQ29udGVudFN0cmluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzQ29udGVudFN0cmluZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuX2NvbnRlbnQgPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuICBASW5wdXQoKVxuICBnZXQgaWNvblR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWNvblR5cGU7XG4gIH1cbiAgc2V0IGljb25UeXBlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XG4gICAgICB0aGlzLl9pY29uVHlwZSA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG4gIEBJbnB1dCgpXG4gIHBvc2l0aW9uOiBzdHJpbmcgPSAnbWlkZGxlJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF96b25lOiBOZ1pvbmUpIHt9XG59XG4iXX0=
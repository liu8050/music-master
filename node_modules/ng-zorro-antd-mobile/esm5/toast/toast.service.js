/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, Compiler, NgZone, ComponentFactoryResolver, } from '@angular/core';
import { ToastComponent } from './toast.component';
import { ToastOptions } from './toast-options.provider';
/**
 * @record
 */
export function ConfigInterface() { }
if (false) {
    /** @type {?|undefined} */
    ConfigInterface.prototype.content;
    /** @type {?|undefined} */
    ConfigInterface.prototype.iconType;
    /** @type {?|undefined} */
    ConfigInterface.prototype.mask;
}
var ToastService = /** @class */ (function () {
    function ToastService(_appRef, _compiler, _cfr, _zone) {
        this._appRef = _appRef;
        this._compiler = _compiler;
        this._cfr = _cfr;
        this._zone = _zone;
        ToastService._zone = this._zone;
        ToastService._appRef = this._appRef;
        ToastService._toastCompFactory = this._cfr.resolveComponentFactory(ToastComponent);
    }
    /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    ToastService._initConfig = /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    function (config, options) {
        /** @type {?} */
        var props = {};
        /** @type {?} */
        var optionalParams = ['content', 'iconType', 'mask', 'position'];
        config = Object.assign(options, config);
        optionalParams.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        }));
        /** @type {?} */
        var iconType = {
            info: '',
            success: 'success',
            fail: 'fail',
            offline: 'dislike',
            loading: 'loading'
        }[options.iconType];
        props['iconType'] = iconType;
        props['mask'] = options.mask;
        props['position'] = options.position;
        return props;
    };
    /**
     * @param {?} config
     * @param {?} type
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    ToastService.notice = /**
     * @param {?} config
     * @param {?} type
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    function (config, type, timeInterval, onClose, mask, position) {
        if (timeInterval === void 0) { timeInterval = 2000; }
        if (mask === void 0) { mask = true; }
        if (position === void 0) { position = 'middle'; }
        // 如果已经存在，在没有遮罩层的情况下，会响应别的toast，需要清除原来的
        if (ToastService.compRef) {
            ToastService.hide();
        }
        /** @type {?} */
        var options = new ToastOptions();
        options.iconType = type;
        options.mask = mask;
        options.position = position;
        /** @type {?} */
        var props = ToastService._initConfig(config, options);
        document.body.insertBefore(document.createElement(ToastService._toastCompFactory.selector), document.body.firstChild);
        /** @type {?} */
        var instance;
        /** @type {?} */
        var subject;
        ToastService.compRef = ToastService._appRef.bootstrap(ToastService._toastCompFactory);
        instance = ToastService.compRef.instance;
        subject = instance.subject;
        if (timeInterval) {
            ToastService.timeout = setTimeout((/**
             * @return {?}
             */
            function () {
                if (onClose) {
                    onClose();
                }
                ToastService.hide();
            }), timeInterval);
        }
        Object.assign(instance, props);
        return subject;
    };
    /**
     * Open info dialog
     */
    /**
     * Open info dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    ToastService.info = /**
     * Open info dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    function (content, timeInterval, onClose, mask, position) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'info',
            content: content
        });
        return ToastService.notice(config, 'info', timeInterval, onClose, mask, position);
    };
    /**
     * Open success dialog
     */
    /**
     * Open success dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    ToastService.success = /**
     * Open success dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    function (content, timeInterval, onClose, mask, position) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'success',
            content: content
        });
        return ToastService.notice(config, 'success', timeInterval, onClose, mask, position);
    };
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    ToastService.show = /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    function (content, timeInterval, mask, position) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'info',
            content: content
        });
        return ToastService.notice(config, 'info', timeInterval, (/**
         * @return {?}
         */
        function () { }), mask, position);
    };
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    ToastService.fail = /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    function (content, timeInterval, onClose, mask, position) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'fail',
            content: content
        });
        return ToastService.notice(config, 'fail', timeInterval, onClose, mask, position);
    };
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    ToastService.offline = /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    function (content, timeInterval, onClose, mask, position) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'offline',
            content: content
        });
        return ToastService.notice(config, 'offline', timeInterval, onClose, mask, position);
    };
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    ToastService.loading = /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @param {?=} position
     * @return {?}
     */
    function (content, timeInterval, onClose, mask, position) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'loading',
            content: content
        });
        return ToastService.notice(config, 'loading', timeInterval, onClose, mask, position);
    };
    /**
     * @return {?}
     */
    ToastService.hide = /**
     * @return {?}
     */
    function () {
        if (ToastService.timeout) {
            clearTimeout(ToastService.timeout);
        }
        if (ToastService.compRef) {
            ToastService._zone.run((/**
             * @return {?}
             */
            function () {
                ToastService.compRef.destroy();
            }));
            ToastService.compRef = null;
        }
    };
    ToastService.timeout = null;
    ToastService._zone = null;
    ToastService.compRef = null;
    ToastService._toastCompFactory = null;
    ToastService._appRef = null;
    ToastService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
        { type: Injectable }
    ];
    /** @nocollapse */
    ToastService.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: Compiler },
        { type: ComponentFactoryResolver },
        { type: NgZone }
    ]; };
    return ToastService;
}());
export { ToastService };
if (false) {
    /** @type {?} */
    ToastService.timeout;
    /** @type {?} */
    ToastService._zone;
    /** @type {?} */
    ToastService.compRef;
    /** @type {?} */
    ToastService._toastCompFactory;
    /** @type {?} */
    ToastService._appRef;
    /**
     * @type {?}
     * @private
     */
    ToastService.prototype._appRef;
    /**
     * @type {?}
     * @private
     */
    ToastService.prototype._compiler;
    /**
     * @type {?}
     * @private
     */
    ToastService.prototype._cfr;
    /**
     * @type {?}
     * @private
     */
    ToastService.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,
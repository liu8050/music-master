/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export var mergeDateTime = (/**
 * @param {?=} date
 * @param {?=} time
 * @return {?}
 */
function (date, time) {
    date = date || new Date();
    if (!time)
        return date;
    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds());
});
/** @type {?} */
export var formatDate = (/**
 * @param {?} date
 * @param {?} format
 * @param {?=} locale
 * @return {?}
 */
function (date, format, locale) {
    /** @type {?} */
    var week = locale && locale.week;
    /** @type {?} */
    var o = {
        'M+': date.getMonth() + 1,
        'd+': date.getDate(),
        'h+': date.getHours(),
        'm+': date.getMinutes(),
        's+': date.getSeconds(),
        'q+': Math.floor((date.getMonth() + 3) / 3),
        'w+': week && week[date.getDay()],
        S: date.getMilliseconds()
    };
    if (/(y+)/.test(format))
        format = format.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
    for (var k in o) {
        if (new RegExp('(' + k + ')').test(format)) {
            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
        }
    }
    return format;
});
/** @type {?} */
export var isSameDate = (/**
 * @param {?} day_one
 * @param {?} day_two
 * @return {?}
 */
function (day_one, day_two) {
    if (!day_one || !day_two) {
        console.error('isSameDate function need two params');
        return 'need two params';
    }
    /** @type {?} */
    var compareDate = day_one.getDate() === day_two.getDate();
    /** @type {?} */
    var compareMonth = day_one.getMonth() === day_two.getMonth();
    /** @type {?} */
    var compareYear = day_one.getFullYear() === day_two.getFullYear();
    return compareDate && compareMonth && compareYear;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbImNhbGVuZGFyL3V0aWwvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxNQUFNLEtBQU8sYUFBYTs7Ozs7QUFBRyxVQUFDLElBQVcsRUFBRSxJQUFXO0lBQ3BELElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUMxQixJQUFJLENBQUMsSUFBSTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3ZCLE9BQU8sSUFBSSxJQUFJLENBQ2IsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUNsQixJQUFJLENBQUMsUUFBUSxFQUFFLEVBQ2YsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUNkLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFDZixJQUFJLENBQUMsVUFBVSxFQUFFLEVBQ2pCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FDbEIsQ0FBQztBQUNKLENBQUMsQ0FBQTs7QUFFRCxNQUFNLEtBQU8sVUFBVTs7Ozs7O0FBQUcsVUFBQyxJQUFVLEVBQUUsTUFBYyxFQUFFLE1BQTBCOztRQUN6RSxJQUFJLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJOztRQUU5QixDQUFDLEdBQTJCO1FBQzlCLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztRQUN6QixJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNwQixJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0MsSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2pDLENBQUMsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFO0tBQzFCO0lBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUFFLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDcEgsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDZixJQUFJLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzFDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQzdHO0tBQ0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUE7O0FBRUQsTUFBTSxLQUFPLFVBQVU7Ozs7O0FBQUcsVUFBQyxPQUFhLEVBQUUsT0FBYTtJQUNyRCxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztRQUNyRCxPQUFPLGlCQUFpQixDQUFDO0tBQzFCOztRQUNLLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssT0FBTyxDQUFDLE9BQU8sRUFBRTs7UUFDckQsWUFBWSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsS0FBSyxPQUFPLENBQUMsUUFBUSxFQUFFOztRQUN4RCxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLE9BQU8sQ0FBQyxXQUFXLEVBQUU7SUFFbkUsT0FBTyxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsQ0FBQztBQUNwRCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRlTW9kZWxzIH0gZnJvbSAnLi4vZGF0ZS9EYXRhVHlwZXMnO1xuXG5leHBvcnQgY29uc3QgbWVyZ2VEYXRlVGltZSA9IChkYXRlPzogRGF0ZSwgdGltZT86IERhdGUpID0+IHtcbiAgZGF0ZSA9IGRhdGUgfHwgbmV3IERhdGUoKTtcbiAgaWYgKCF0aW1lKSByZXR1cm4gZGF0ZTtcbiAgcmV0dXJuIG5ldyBEYXRlKFxuICAgIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICBkYXRlLmdldE1vbnRoKCksXG4gICAgZGF0ZS5nZXREYXRlKCksXG4gICAgdGltZS5nZXRIb3VycygpLFxuICAgIHRpbWUuZ2V0TWludXRlcygpLFxuICAgIHRpbWUuZ2V0U2Vjb25kcygpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0RGF0ZSA9IChkYXRlOiBEYXRlLCBmb3JtYXQ6IHN0cmluZywgbG9jYWxlPzogRGF0ZU1vZGVscy5Mb2NhbGUpID0+IHtcbiAgY29uc3Qgd2VlayA9IGxvY2FsZSAmJiBsb2NhbGUud2VlaztcblxuICBsZXQgbzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHtcbiAgICAnTSsnOiBkYXRlLmdldE1vbnRoKCkgKyAxLFxuICAgICdkKyc6IGRhdGUuZ2V0RGF0ZSgpLFxuICAgICdoKyc6IGRhdGUuZ2V0SG91cnMoKSxcbiAgICAnbSsnOiBkYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAncysnOiBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAncSsnOiBNYXRoLmZsb29yKChkYXRlLmdldE1vbnRoKCkgKyAzKSAvIDMpLFxuICAgICd3Kyc6IHdlZWsgJiYgd2Vla1tkYXRlLmdldERheSgpXSxcbiAgICBTOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpXG4gIH07XG4gIGlmICgvKHkrKS8udGVzdChmb3JtYXQpKSBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShSZWdFeHAuJDEsIChkYXRlLmdldEZ1bGxZZWFyKCkgKyAnJykuc3Vic3RyKDQgLSBSZWdFeHAuJDEubGVuZ3RoKSk7XG4gIGZvciAobGV0IGsgaW4gbykge1xuICAgIGlmIChuZXcgUmVnRXhwKCcoJyArIGsgKyAnKScpLnRlc3QoZm9ybWF0KSkge1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoUmVnRXhwLiQxLCBSZWdFeHAuJDEubGVuZ3RoID09IDEgPyBvW2tdIDogKCcwMCcgKyBvW2tdKS5zdWJzdHIoKCcnICsgb1trXSkubGVuZ3RoKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQ7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTYW1lRGF0ZSA9IChkYXlfb25lOiBEYXRlLCBkYXlfdHdvOiBEYXRlKSA9PiB7XG4gIGlmICghZGF5X29uZSB8fCAhZGF5X3R3bykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ2lzU2FtZURhdGUgZnVuY3Rpb24gbmVlZCB0d28gcGFyYW1zJyk7XG4gICAgcmV0dXJuICduZWVkIHR3byBwYXJhbXMnO1xuICB9XG4gIGNvbnN0IGNvbXBhcmVEYXRlID0gZGF5X29uZS5nZXREYXRlKCkgPT09IGRheV90d28uZ2V0RGF0ZSgpO1xuICBjb25zdCBjb21wYXJlTW9udGggPSBkYXlfb25lLmdldE1vbnRoKCkgPT09IGRheV90d28uZ2V0TW9udGgoKTtcbiAgY29uc3QgY29tcGFyZVllYXIgPSBkYXlfb25lLmdldEZ1bGxZZWFyKCkgPT09IGRheV90d28uZ2V0RnVsbFllYXIoKTtcblxuICByZXR1cm4gY29tcGFyZURhdGUgJiYgY29tcGFyZU1vbnRoICYmIGNvbXBhcmVZZWFyO1xufTtcbiJdfQ==
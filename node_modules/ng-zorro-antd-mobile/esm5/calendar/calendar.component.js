/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, ViewEncapsulation, Input, Output, HostBinding, EventEmitter, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import zhCN from './locale/zh_CN';
import enUS from './locale/en_US';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
import { mergeDateTime, isSameDate } from './util/index';
import { takeUntil } from 'rxjs/operators';
import { CalendarDatePickerComponent } from './datepicker/datepicker.component';
import { Subject } from 'rxjs';
/**
 * @record
 */
export function CalendarStateType() { }
if (false) {
    /** @type {?} */
    CalendarStateType.prototype.showTimePicker;
    /** @type {?|undefined} */
    CalendarStateType.prototype.timePickerTitle;
    /** @type {?|undefined} */
    CalendarStateType.prototype.startDate;
    /** @type {?|undefined} */
    CalendarStateType.prototype.endDate;
    /** @type {?|undefined} */
    CalendarStateType.prototype.disConfirmBtn;
    /** @type {?|undefined} */
    CalendarStateType.prototype.clientHight;
}
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent(_localeProviderService) {
        var _this = this;
        this._localeProviderService = _localeProviderService;
        this.isShow = false;
        this.showClear = false;
        this.isSameDate = isSameDate;
        this.props = (/** @type {?} */ ({
            visible: false,
            showHeader: true,
            locale: zhCN,
            pickTime: false,
            showShortcut: false,
            prefixCls: 'rmc-calendar',
            type: 'range',
            defaultTimeValue: new Date(2000, 0, 1, 8)
        }));
        this.state = (/** @type {?} */ ({
            showTimePicker: false,
            timePickerTitle: '',
            startDate: undefined,
            endDate: undefined,
            disConfirmBtn: true,
            clientHight: 0
        }));
        this._unsubscribe$ = new Subject();
        this._dateModelTime = 0;
        this.onChangeFn = (/**
         * @return {?}
         */
        function () { });
        this.onTouchFn = (/**
         * @return {?}
         */
        function () { });
        this.onCancel = new EventEmitter();
        this.onConfirm = new EventEmitter();
        this.onSelectHasDisableDate = new EventEmitter();
        this.class = 'am-calendar';
        this.selectDate = (/**
         * @param {?} date
         * @param {?=} useDateTime
         * @param {?=} oldState
         * @param {?=} props
         * @return {?}
         */
        function (date, useDateTime, oldState, props) {
            if (useDateTime === void 0) { useDateTime = false; }
            if (oldState === void 0) { oldState = {}; }
            if (props === void 0) { props = _this.props; }
            if (!date) {
                return (/** @type {?} */ ({}));
            }
            /** @type {?} */
            var newState = (/** @type {?} */ ({}));
            var type = props.type, pickTime = props.pickTime, defaultTimeValue = props.defaultTimeValue, _a = props.locale, locale = _a === void 0 ? (/** @type {?} */ ({})) : _a;
            /** @type {?} */
            var newDate = pickTime && !useDateTime ? mergeDateTime(date, defaultTimeValue) : date;
            var startDate = oldState.startDate, endDate = oldState.endDate;
            switch (type) {
                case 'one':
                    newState = tslib_1.__assign({}, newState, { startDate: newDate, disConfirmBtn: false });
                    if (pickTime) {
                        newState = tslib_1.__assign({}, newState, { timePickerTitle: locale.selectTime, showTimePicker: true });
                    }
                    break;
                case 'range':
                    if (!startDate || endDate) {
                        newState = tslib_1.__assign({}, newState, { startDate: newDate, endDate: undefined, disConfirmBtn: true });
                        if (pickTime) {
                            newState = tslib_1.__assign({}, newState, { timePickerTitle: locale.selectStartTime, showTimePicker: true });
                        }
                    }
                    else {
                        newState = tslib_1.__assign({}, newState, { timePickerTitle: +newDate >= +startDate || _this.isSameDate(startDate, newDate) ? locale.selectEndTime : locale.selectStartTime, disConfirmBtn: false, endDate: pickTime && !useDateTime && (+newDate >= +startDate || _this.isSameDate(startDate, newDate))
                                ? new Date(+mergeDateTime(newDate, startDate) + 3600000)
                                : newDate });
                    }
                    break;
            }
            _this.writeModelData(date);
            return newState;
        });
        this.onSelectedDate = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            var _a = _this.state, startDate = _a.startDate, endDate = _a.endDate;
            var onSelect = _this.props.onSelect;
            if (onSelect) {
                /** @type {?} */
                var value = onSelect(date, [startDate, endDate]);
                if (value) {
                    _this.shortcutSelect(value[0], value[1]);
                    return;
                }
            }
            _this.state = tslib_1.__assign({}, _this.state, _this.selectDate(date, false, { startDate: startDate, endDate: endDate }));
            _this.showClear = !!_this.state.startDate;
        });
        this.triggerSelectHasDisableDate = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            _this.triggerClear();
            _this.onSelectHasDisableDate && _this.onSelectHasDisableDate.emit(date);
        });
        this.onClose = (/**
         * @return {?}
         */
        function () {
            _this.state = (/** @type {?} */ ({
                showTimePicker: false,
                timePickerTitle: '',
                startDate: undefined,
                endDate: undefined,
                disConfirmBtn: true,
                clientHight: 0
            }));
            _this.showClear = !!_this.state.startDate;
        });
        this.triggerConfirm = (/**
         * @return {?}
         */
        function () {
            var _a = _this.state, startDate = _a.startDate, endDate = _a.endDate;
            if (startDate && endDate && +startDate > +endDate) {
                _this.onClose();
                return _this.onConfirm && _this.onConfirm.emit({ startDate: endDate, endDate: startDate });
            }
            _this.onConfirm && _this.onConfirm.emit({ startDate: startDate, endDate: endDate });
            _this.onClose();
        });
        this.triggerClear = (/**
         * @return {?}
         */
        function () {
            // 清除数据做延迟，否则同步刷新数据导致报错
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.state = tslib_1.__assign({}, _this.state, { startDate: undefined, endDate: undefined, showTimePicker: false });
                _this.props.onClear && _this.props.onClear();
                _this.showClear = !!_this.state.startDate;
            }), 0);
        });
        this.onTimeChange = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            var _a = _this.state, startDate = _a.startDate, endDate = _a.endDate;
            if (endDate) {
                _this.state.endDate = date;
            }
            else if (startDate) {
                _this.state.startDate = date;
            }
        });
        this.shortcutSelect = (/**
         * @param {?} startDate
         * @param {?} endDate
         * @param {?=} props
         * @return {?}
         */
        function (startDate, endDate, props) {
            if (props === void 0) { props = _this.props; }
            _this.state = tslib_1.__assign({}, _this.state, { startDate: startDate, showTimePicker: false }, _this.selectDate(endDate, true, { startDate: startDate }, props));
            _this.showClear = !!_this.state.startDate;
        });
        this.setClientHeight = (/**
         * @param {?} height
         * @return {?}
         */
        function (height) {
            _this.state.clientHight = height;
        });
    }
    Object.defineProperty(CalendarComponent.prototype, "locale", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === 'enUS') {
                this.props.locale = enUS;
            }
            else if (value === 'zhCN') {
                this.props.locale = zhCN;
            }
            this._unsubscribe$.next();
            this._unsubscribe$.complete();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultTimeValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.props.defaultTimeValue = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "prefixCls", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.props.prefixCls = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "enterDirection", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._enterDirection = value;
            if (this._enterDirection === 'horizontal') {
                this.contentAnimateClass = 'slideH-enter slideH-enter-active';
            }
            else {
                this.contentAnimateClass = 'slideV-enter slideV-enter-active';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "visible", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.props.visible = value;
            if (value === true || value === 'true') {
                this.showAnimation();
                this.isShow = true;
            }
            else {
                this.hideAnimation();
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.isShow = false;
                }), 300);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "getDateExtra", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.getDateExtra = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.defaultDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "minDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.minDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "maxDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.maxDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "pickTime", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.pickTime = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "type", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.type = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "showShortcut", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.showShortcut = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "rowSize", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.rowSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "infinite", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.defaultValue = value;
            if (value) {
                this.receiveProps(this.props);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "onSelect", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onSelect = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    CalendarComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._dateModelType = null;
        if (value && value instanceof Array) {
            if (value.length === 0) {
                console.error('[ng-zorro-antd-mobile]: calendar ngModel array need params!');
                return;
            }
            if (this.props.type === 'one' && value.length >= 2) {
                this._dateModelType = 1;
                console.error('[ng-zorro-antd-mobile]: type is one, but ngmodel has more than one param, just use first one');
                this.onSelectedDate(value[0]);
            }
            else if (value.length === 1) {
                this._dateModelType = 1;
                this.onSelectedDate(value[0]);
            }
            else {
                this._dateModelType = 2;
                this.onSelectedDate(value[0]);
                this.onSelectedDate(value[1]);
            }
        }
        else if (value && value instanceof Date) {
            this._dateModelType = 3;
            this.onSelectedDate(value);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CalendarComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeFn = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CalendarComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchFn = fn;
    };
    /**
     * @param {?} nextProps
     * @return {?}
     */
    CalendarComponent.prototype.receiveProps = /**
     * @param {?} nextProps
     * @return {?}
     */
    function (nextProps) {
        if (nextProps.visible && nextProps.defaultValue) {
            this.shortcutSelect(nextProps.defaultValue[0], nextProps.defaultValue[1], nextProps);
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.showAnimation = /**
     * @return {?}
     */
    function () {
        if (this._enterDirection === 'horizontal') {
            this.contentAnimateClass = 'slideH-enter slideH-enter-active';
        }
        else {
            this.contentAnimateClass = 'slideV-enter slideV-enter-active';
        }
        this.maskAnimateClass = 'fade-enter fade-enter-active';
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.hideAnimation = /**
     * @return {?}
     */
    function () {
        if (this._enterDirection === 'horizontal') {
            this.contentAnimateClass = 'slideH-leave slideH-leave-active';
        }
        else {
            this.contentAnimateClass = 'slideV-leave slideV-leave-active';
        }
        this.maskAnimateClass = 'fade-leave fade-leave-active';
    };
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.writeModelData = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this._dateModelValue instanceof Array) {
            this._dateModelTime = this._dateModelValue.length;
        }
        else {
            this._dateModelTime = 0;
        }
        switch (this._dateModelType) {
            case 1:
                this._dateModelValue = [date];
                this.onChangeFn(this._dateModelValue);
                break;
            case 2:
                if (this._dateModelTime === 1) {
                    if (+date < +this._dateModelValue[0]) {
                        this._dateModelValue.unshift(date);
                    }
                    else {
                        this._dateModelValue.push(date);
                    }
                    this.onChangeFn(this._dateModelValue);
                }
                else {
                    this._dateModelValue = [];
                    this._dateModelValue.push(date);
                }
                break;
            case 3:
                this._dateModelValue = date;
                this.onChangeFn(this._dateModelValue);
                break;
            default:
                break;
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.triggerCancel = /**
     * @return {?}
     */
    function () {
        this.props.onCancel && this.props.onCancel();
        this.onClose();
        this.onCancel && this.onCancel.emit();
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var defaultValue = this.props.defaultValue;
        if (defaultValue) {
            this.state = tslib_1.__assign({}, this.state, this.selectDate(defaultValue[1], true, { startDate: defaultValue[0] }, this.props));
        }
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe((/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
            _this.props.locale = (/** @type {?} */ (tslib_1.__assign({}, _this._localeProviderService.getLocaleSubObj('Calendar'))));
        }));
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    CalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Calendar, nzm-calendar',
                    template: "<span *ngIf=\"isShow\">\n  <div class=\"{{'mask ' + maskAnimateClass}}\"></div>\n</span>\n<span *ngIf=\"isShow\">\n  <div class=\"{{'content animate ' + contentAnimateClass}}\">\n    <CalendarHeader [locale]=\"props.locale\"\n                    [closeIcon]=\"closeIconHtml\"\n                    [showClear]=\"showClear\"\n                    (onCancel)=\"triggerCancel()\"\n                    (onClear)=\"triggerClear()\"\n    ></CalendarHeader>\n    <CalendarDatePicker [propsData]=\"props\"\n                        [endDate]=\"state.endDate\"\n                        [startDate]=\"state.startDate\"\n                        [onCellClick]=\"onSelectedDate\"\n                        [onSelectHasDisableDate]=\"triggerSelectHasDisableDate\"\n                        [onLayout]=\"setClientHeight\"\n    ></CalendarDatePicker>\n    <CalendarTimePicker *ngIf=\"state.showTimePicker\"\n                        [propsData]=\"props\"\n                        [title]=\"state.timePickerTitle\"\n                        [clientHeight]=\"state.clientHight\"\n                        [prefixCls]=\"props.timePickerPrefixCls\"\n                        [defaultValue]=\"props.defaultTimeValue\"\n                        [pickerPrefixCls]=\"props.timePickerPickerPrefixCls\"\n                        [value]=\"state.endDate ? state.endDate : state.startDate\"\n                        [onValueChange]=\"onTimeChange\"\n    ></CalendarTimePicker>\n    <CalendarShortcutPanel *ngIf=\"props.showShortcut && !state.showTimePicker\"\n                           [locale]=\"props.locale\"\n                           [onSelect]=\"shortcutSelect\"\n    ></CalendarShortcutPanel>\n    <CalendarConfirmPanel *ngIf=\"state.startDate\"\n                          [startDateTime]=\"state.startDate\"\n                          [endDateTime]=\"state.endDate\"\n                          [propsData]=\"props\"\n                          [disableBtn]=\"state.disConfirmBtn\"\n                          [formatStr]=\"props.pickTime ? props.locale.dateTimeFormat : props.locale.dateFormat\"\n                          [onConfirm]=\"triggerConfirm\"\n    ></CalendarConfirmPanel>\n  </div>\n</span>\n<ng-template #closeIconHtml>\n  <Icon [type]=\"'cross'\"></Icon>\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return CalendarComponent; })), multi: true }]
                }] }
    ];
    /** @nocollapse */
    CalendarComponent.ctorParameters = function () { return [
        { type: LocaleProviderService }
    ]; };
    CalendarComponent.propDecorators = {
        datepicker: [{ type: ViewChild, args: [CalendarDatePickerComponent,] }],
        locale: [{ type: Input }],
        defaultTimeValue: [{ type: Input }],
        prefixCls: [{ type: Input }],
        enterDirection: [{ type: Input }],
        visible: [{ type: Input }],
        getDateExtra: [{ type: Input }],
        defaultDate: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        pickTime: [{ type: Input }],
        type: [{ type: Input }],
        showShortcut: [{ type: Input }],
        rowSize: [{ type: Input }],
        infinite: [{ type: Input }],
        defaultValue: [{ type: Input }],
        onSelect: [{ type: Input }],
        onCancel: [{ type: Output }],
        onConfirm: [{ type: Output }],
        onSelectHasDisableDate: [{ type: Output }],
        class: [{ type: HostBinding, args: ['class',] }]
    };
    return CalendarComponent;
}());
export { CalendarComponent };
if (false) {
    /** @type {?} */
    CalendarComponent.prototype.isShow;
    /** @type {?} */
    CalendarComponent.prototype.contentAnimateClass;
    /** @type {?} */
    CalendarComponent.prototype.maskAnimateClass;
    /** @type {?} */
    CalendarComponent.prototype.showClear;
    /** @type {?} */
    CalendarComponent.prototype.isSameDate;
    /** @type {?} */
    CalendarComponent.prototype.props;
    /** @type {?} */
    CalendarComponent.prototype.state;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._unsubscribe$;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._enterDirection;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._dateModelType;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._dateModelValue;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._dateModelTime;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.onChangeFn;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.onTouchFn;
    /** @type {?} */
    CalendarComponent.prototype.datepicker;
    /** @type {?} */
    CalendarComponent.prototype.onCancel;
    /** @type {?} */
    CalendarComponent.prototype.onConfirm;
    /** @type {?} */
    CalendarComponent.prototype.onSelectHasDisableDate;
    /** @type {?} */
    CalendarComponent.prototype.class;
    /** @type {?} */
    CalendarComponent.prototype.selectDate;
    /** @type {?} */
    CalendarComponent.prototype.onSelectedDate;
    /** @type {?} */
    CalendarComponent.prototype.triggerSelectHasDisableDate;
    /** @type {?} */
    CalendarComponent.prototype.onClose;
    /** @type {?} */
    CalendarComponent.prototype.triggerConfirm;
    /** @type {?} */
    CalendarComponent.prototype.triggerClear;
    /** @type {?} */
    CalendarComponent.prototype.onTimeChange;
    /** @type {?} */
    CalendarComponent.prototype.shortcutSelect;
    /** @type {?} */
    CalendarComponent.prototype.setClientHeight;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._localeProviderService;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, Input, HostBinding } from '@angular/core';
import { formatDate } from '../util/index';
var CalendarConfirmPanelComponent = /** @class */ (function () {
    function CalendarConfirmPanelComponent() {
        var _this = this;
        this.props = (/** @type {?} */ ({
            formatStr: 'yyyy-MM-dd hh:mm'
        }));
        this.confirmPane = true;
        this.triggerConfirm = (/**
         * @return {?}
         */
        function () {
            var _a = _this.props, onConfirm = _a.onConfirm, disableBtn = _a.disableBtn;
            !disableBtn && onConfirm();
        });
    }
    Object.defineProperty(CalendarConfirmPanelComponent.prototype, "propsData", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props = tslib_1.__assign({}, this.props, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarConfirmPanelComponent.prototype, "disableBtn", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.disableBtn = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarConfirmPanelComponent.prototype, "formatStr", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.formatStr = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarConfirmPanelComponent.prototype, "startDateTime", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.startDateTime = value;
            this.formatTime();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarConfirmPanelComponent.prototype, "endDateTime", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.endDateTime = value;
            this.formatTime();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarConfirmPanelComponent.prototype, "onConfirm", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onConfirm = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CalendarConfirmPanelComponent.prototype.formatTime = /**
     * @return {?}
     */
    function () {
        var _a = this.props, type = _a.type, locale = _a.locale, disableBtn = _a.disableBtn;
        var _b = this.props, startDateTime = _b.startDateTime, endDateTime = _b.endDateTime;
        if (startDateTime && endDateTime && +startDateTime > +endDateTime) {
            /** @type {?} */
            var tmp = startDateTime;
            startDateTime = endDateTime;
            endDateTime = tmp;
        }
        this.startTimeStr = startDateTime ? this.selfFormatDate(startDateTime) : locale.noChoose;
        this.endTimeStr = endDateTime ? this.selfFormatDate(endDateTime) : locale.noChoose;
        /** @type {?} */
        var btnCls = disableBtn ? 'button button-disable' : 'button';
        if (type === 'one') {
            btnCls += ' button-full';
        }
        this.btnCls = btnCls;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarConfirmPanelComponent.prototype.selfFormatDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var _a = this.props, _b = _a.formatStr, formatStr = _b === void 0 ? '' : _b, locale = _a.locale;
        return formatDate(date, formatStr, locale);
    };
    CalendarConfirmPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CalendarConfirmPanel, nzm-calendar-confirm-panel',
                    template: "<div *ngIf=\"props.type === 'range'\" class=\"info\">\n  <p>{{props.locale.start}}: <span class=\"{{!props.startDateTime ? 'grey' : ''}}\">{{startTimeStr}}</span></p>\n  <p>{{props.locale.end}}: <span class=\"{{!props.endDateTime ? 'grey' : ''}}\">{{endTimeStr}}</span></p>\n</div>\n<div [ngClass]=\"btnCls\" (click)=\"triggerConfirm()\">\n  {{props.locale.confirm}}\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    CalendarConfirmPanelComponent.ctorParameters = function () { return []; };
    CalendarConfirmPanelComponent.propDecorators = {
        propsData: [{ type: Input }],
        disableBtn: [{ type: Input }],
        formatStr: [{ type: Input }],
        startDateTime: [{ type: Input }],
        endDateTime: [{ type: Input }],
        onConfirm: [{ type: Input }],
        confirmPane: [{ type: HostBinding, args: ['class.confirm-panel',] }]
    };
    return CalendarConfirmPanelComponent;
}());
export { CalendarConfirmPanelComponent };
if (false) {
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.props;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.startTimeStr;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.endTimeStr;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.btnCls;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.confirmPane;
    /** @type {?} */
    CalendarConfirmPanelComponent.prototype.triggerConfirm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS1wYW5lbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbImNhbGVuZGFyL2NvbmZpcm0tcGFuZWwvY29uZmlybS1wYW5lbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQztJQThDRTtRQUFBLGlCQUFpQjtRQXZDakIsVUFBSyxHQUFHLG1CQUFBO1lBQ04sU0FBUyxFQUFFLGtCQUFrQjtTQUM5QixFQUFpQyxDQUFDO1FBbUNDLGdCQUFXLEdBQVksSUFBSSxDQUFDO1FBc0JoRSxtQkFBYzs7O1FBQUc7WUFDVCxJQUFBLGdCQUFzQyxFQUFwQyx3QkFBUyxFQUFFLDBCQUF5QjtZQUM1QyxDQUFDLFVBQVUsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUM3QixDQUFDLEVBQUE7SUF2QmUsQ0FBQztJQWhDakIsc0JBQ0ksb0RBQVM7Ozs7O1FBRGIsVUFDYyxLQUFLO1lBQ2pCLElBQUksQ0FBQyxLQUFLLHdCQUNMLElBQUksQ0FBQyxLQUFLLEVBQ1YsS0FBSyxDQUNULENBQUM7UUFDSixDQUFDOzs7T0FBQTtJQUNELHNCQUNJLHFEQUFVOzs7OztRQURkLFVBQ2UsS0FBSztZQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFDRCxzQkFDSSxvREFBUzs7Ozs7UUFEYixVQUNjLEtBQUs7WUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQy9CLENBQUM7OztPQUFBO0lBQ0Qsc0JBQ0ksd0RBQWE7Ozs7O1FBRGpCLFVBQ2tCLEtBQUs7WUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQixDQUFDOzs7T0FBQTtJQUNELHNCQUNJLHNEQUFXOzs7OztRQURmLFVBQ2dCLEtBQUs7WUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQy9CLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQixDQUFDOzs7T0FBQTtJQUNELHNCQUNJLG9EQUFTOzs7OztRQURiLFVBQ2MsS0FBSztZQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7Ozs7SUFNRCxrREFBVTs7O0lBQVY7UUFDUSxJQUFBLGVBQXlDLEVBQXZDLGNBQUksRUFBRSxrQkFBTSxFQUFFLDBCQUF5QjtRQUMzQyxJQUFBLGVBQTJDLEVBQXpDLGdDQUFhLEVBQUUsNEJBQTBCO1FBQy9DLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLFdBQVcsRUFBRTs7Z0JBQzNELEdBQUcsR0FBRyxhQUFhO1lBQ3pCLGFBQWEsR0FBRyxXQUFXLENBQUM7WUFDNUIsV0FBVyxHQUFHLEdBQUcsQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3pGLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOztZQUMvRSxNQUFNLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsUUFBUTtRQUM1RCxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDbEIsTUFBTSxJQUFJLGNBQWMsQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBT0Qsc0RBQWM7Ozs7SUFBZCxVQUFlLElBQVU7UUFDakIsSUFBQSxlQUF1QyxFQUFyQyxpQkFBYyxFQUFkLG1DQUFjLEVBQUUsa0JBQXFCO1FBQzdDLE9BQU8sVUFBVSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7Z0JBMUVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsa0RBQWtEO29CQUM1RCxvWUFBNkM7b0JBQzdDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2lCQUN0Qzs7Ozs7NEJBVUUsS0FBSzs2QkFPTCxLQUFLOzRCQUlMLEtBQUs7Z0NBSUwsS0FBSzs4QkFLTCxLQUFLOzRCQUtMLEtBQUs7OEJBS0wsV0FBVyxTQUFDLHFCQUFxQjs7SUErQnBDLG9DQUFDO0NBQUEsQUEzRUQsSUEyRUM7U0FyRVksNkJBQTZCOzs7SUFDeEMsOENBRW1DOztJQUNuQyxxREFBcUI7O0lBQ3JCLG1EQUFtQjs7SUFDbkIsK0NBQWU7O0lBZ0NmLG9EQUFnRTs7SUFzQmhFLHVEQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiwgSW5wdXQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnLi4vdXRpbC9pbmRleCc7XG5pbXBvcnQgeyBDYWxlbmRhckNvbmZpcm1QYW5lbFByb3BzVHlwZSB9IGZyb20gJy4vUHJvcHNUeXBlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnQ2FsZW5kYXJDb25maXJtUGFuZWwsIG56bS1jYWxlbmRhci1jb25maXJtLXBhbmVsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbmZpcm0tcGFuZWwuY29tcG9uZW50Lmh0bWwnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJDb25maXJtUGFuZWxDb21wb25lbnQge1xuICBwcm9wcyA9IHtcbiAgICBmb3JtYXRTdHI6ICd5eXl5LU1NLWRkIGhoOm1tJ1xuICB9IGFzIENhbGVuZGFyQ29uZmlybVBhbmVsUHJvcHNUeXBlO1xuICBzdGFydFRpbWVTdHI6IHN0cmluZztcbiAgZW5kVGltZVN0cjogc3RyaW5nO1xuICBidG5DbHM6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBzZXQgcHJvcHNEYXRhKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcyA9IHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICAuLi52YWx1ZVxuICAgIH07XG4gIH1cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVCdG4odmFsdWUpIHtcbiAgICB0aGlzLnByb3BzLmRpc2FibGVCdG4gPSB2YWx1ZTtcbiAgfVxuICBASW5wdXQoKVxuICBzZXQgZm9ybWF0U3RyKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5mb3JtYXRTdHIgPSB2YWx1ZTtcbiAgfVxuICBASW5wdXQoKVxuICBzZXQgc3RhcnREYXRlVGltZSh2YWx1ZSkge1xuICAgIHRoaXMucHJvcHMuc3RhcnREYXRlVGltZSA9IHZhbHVlO1xuICAgIHRoaXMuZm9ybWF0VGltZSgpO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBlbmREYXRlVGltZSh2YWx1ZSkge1xuICAgIHRoaXMucHJvcHMuZW5kRGF0ZVRpbWUgPSB2YWx1ZTtcbiAgICB0aGlzLmZvcm1hdFRpbWUoKTtcbiAgfVxuICBASW5wdXQoKVxuICBzZXQgb25Db25maXJtKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5vbkNvbmZpcm0gPSB2YWx1ZTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuY29uZmlybS1wYW5lbCcpIGNvbmZpcm1QYW5lOiBib29sZWFuID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIGZvcm1hdFRpbWUoKSB7XG4gICAgY29uc3QgeyB0eXBlLCBsb2NhbGUsIGRpc2FibGVCdG4gfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHsgc3RhcnREYXRlVGltZSwgZW5kRGF0ZVRpbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKHN0YXJ0RGF0ZVRpbWUgJiYgZW5kRGF0ZVRpbWUgJiYgK3N0YXJ0RGF0ZVRpbWUgPiArZW5kRGF0ZVRpbWUpIHtcbiAgICAgIGNvbnN0IHRtcCA9IHN0YXJ0RGF0ZVRpbWU7XG4gICAgICBzdGFydERhdGVUaW1lID0gZW5kRGF0ZVRpbWU7XG4gICAgICBlbmREYXRlVGltZSA9IHRtcDtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXJ0VGltZVN0ciA9IHN0YXJ0RGF0ZVRpbWUgPyB0aGlzLnNlbGZGb3JtYXREYXRlKHN0YXJ0RGF0ZVRpbWUpIDogbG9jYWxlLm5vQ2hvb3NlO1xuICAgIHRoaXMuZW5kVGltZVN0ciA9IGVuZERhdGVUaW1lID8gdGhpcy5zZWxmRm9ybWF0RGF0ZShlbmREYXRlVGltZSkgOiBsb2NhbGUubm9DaG9vc2U7XG4gICAgbGV0IGJ0bkNscyA9IGRpc2FibGVCdG4gPyAnYnV0dG9uIGJ1dHRvbi1kaXNhYmxlJyA6ICdidXR0b24nO1xuICAgIGlmICh0eXBlID09PSAnb25lJykge1xuICAgICAgYnRuQ2xzICs9ICcgYnV0dG9uLWZ1bGwnO1xuICAgIH1cbiAgICB0aGlzLmJ0bkNscyA9IGJ0bkNscztcbiAgfVxuXG4gIHRyaWdnZXJDb25maXJtID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgb25Db25maXJtLCBkaXNhYmxlQnRuIH0gPSB0aGlzLnByb3BzO1xuICAgICFkaXNhYmxlQnRuICYmIG9uQ29uZmlybSgpO1xuICB9XG5cbiAgc2VsZkZvcm1hdERhdGUoZGF0ZTogRGF0ZSkge1xuICAgIGNvbnN0IHsgZm9ybWF0U3RyID0gJycsIGxvY2FsZSB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCBmb3JtYXRTdHIsIGxvY2FsZSk7XG4gIH1cbn1cbiJdfQ==
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, Input, HostBinding } from '@angular/core';
import { zh_CN, en_US } from '../../locale-provider/locale';
var CalendarTimePickerComponent = /** @class */ (function () {
    function CalendarTimePickerComponent() {
        var _this = this;
        this.defaultProps = (/** @type {?} */ ({
            minDate: new Date(0, 0, 0, 0, 0),
            maxDate: new Date(9999, 11, 31, 23, 59, 59),
            defaultValue: new Date(2000, 1, 1, 8),
            mode: 'time',
            datePickerViewLocale: zh_CN
        }));
        this.props = (/** @type {?} */ ({
            minDate: new Date(0, 0, 0, 0, 0),
            maxDate: new Date(9999, 11, 31, 23, 59, 59),
            defaultValue: new Date(2000, 1, 1, 8),
            mode: 'time',
            datePickerViewLocale: zh_CN
        }));
        this.timePicker = true;
        this.onDateChange = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            var onValueChange = _this.props.onValueChange;
            onValueChange && onValueChange(date.date);
        });
    }
    Object.defineProperty(CalendarTimePickerComponent.prototype, "propsData", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props = tslib_1.__assign({}, this.props, value);
            if (this.props.locale && this.props.locale.today === 'Today') {
                this.props.datePickerViewLocale = en_US;
            }
            else {
                this.props.datePickerViewLocale = zh_CN;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarTimePickerComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarTimePickerComponent.prototype, "value", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarTimePickerComponent.prototype, "prefixCls", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.prefixCls = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarTimePickerComponent.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.defaultValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarTimePickerComponent.prototype, "pickerPrefixCls", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.pickerPrefixCls = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarTimePickerComponent.prototype, "clientHeight", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.clientHeight = value;
            /** @type {?} */
            var height = (value && (value * 3) / 8 - 52) || Number.POSITIVE_INFINITY;
            this.selfHeight = (height > 164 || height < 0 ? 164 : height) + 'px';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarTimePickerComponent.prototype, "onValueChange", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onValueChange = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} date
     * @return {?}
     */
    CalendarTimePickerComponent.prototype.getMinTime = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var minDate = (/** @type {?} */ (this.props.minDate));
        if (!date ||
            date.getFullYear() > minDate.getFullYear() ||
            date.getMonth() > minDate.getMonth() ||
            date.getDate() > minDate.getDate()) {
            return this.defaultProps.minDate;
        }
        return minDate;
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    CalendarTimePickerComponent.prototype.getMaxTime = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var maxDate = (/** @type {?} */ (this.props.maxDate));
        if (!date ||
            date.getFullYear() < maxDate.getFullYear() ||
            date.getMonth() < maxDate.getMonth() ||
            date.getDate() < maxDate.getDate()) {
            return this.defaultProps.maxDate;
        }
        return maxDate;
    };
    CalendarTimePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CalendarTimePicker, nzm-calendar-time-picker',
                    template: "<div class=\"title\">{{props.title}}</div>\n<DatePickerView [ngStyle]=\"{height: selfHeight, overflow: 'hidden'}\"\n                [mode]=\"props.mode\"\n                [value]=\"props.value\"\n                [locale]=\"props.datePickerViewLocale\"\n                [minDate]=\"getMinTime(props.value || props.defaultValue || undefined)\"\n                [maxDate]=\"getMaxTime(props.value || props.defaultValue || undefined)\"\n                (onValueChange)=\"onDateChange($event)\"\n></DatePickerView>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    CalendarTimePickerComponent.ctorParameters = function () { return []; };
    CalendarTimePickerComponent.propDecorators = {
        propsData: [{ type: Input }],
        title: [{ type: Input }],
        value: [{ type: Input }],
        prefixCls: [{ type: Input }],
        defaultValue: [{ type: Input }],
        pickerPrefixCls: [{ type: Input }],
        clientHeight: [{ type: Input }],
        onValueChange: [{ type: Input }],
        timePicker: [{ type: HostBinding, args: ['class.time-picker',] }]
    };
    return CalendarTimePickerComponent;
}());
export { CalendarTimePickerComponent };
if (false) {
    /** @type {?} */
    CalendarTimePickerComponent.prototype.defaultProps;
    /** @type {?} */
    CalendarTimePickerComponent.prototype.props;
    /** @type {?} */
    CalendarTimePickerComponent.prototype.selfHeight;
    /** @type {?} */
    CalendarTimePickerComponent.prototype.timePicker;
    /** @type {?} */
    CalendarTimePickerComponent.prototype.onDateChange;
}
//# sourceMappingURL=data:application/json;base64,
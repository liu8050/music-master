/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, ContentChildren, QueryList, HostBinding, EventEmitter } from '@angular/core';
import { TabBarItemComponent } from './tab-bar-item.component';
/**
 * @record
 */
export function TabBarOnPressEvent() { }
if (false) {
    /** @type {?} */
    TabBarOnPressEvent.prototype.index;
    /** @type {?} */
    TabBarOnPressEvent.prototype.title;
    /** @type {?} */
    TabBarOnPressEvent.prototype.key;
}
var TabBarComponent = /** @class */ (function () {
    function TabBarComponent() {
        this.prefixCls = 'am-tab-bar';
        this._activeTab = 0;
        this._tintColor = '#108ee9';
        this._unselectedTintColor = '#888';
        this.hidden = false;
        this.prerenderingSiblingsNumber = -1;
        this.barTintColor = 'white';
        this.tabBarPosition = 'bottom';
        this.onPress = new EventEmitter();
        this.tabBar = true;
    }
    Object.defineProperty(TabBarComponent.prototype, "activeTab", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeTab;
        },
        set: /**
         * @param {?} tab
         * @return {?}
         */
        function (tab) {
            this._activeTab = tab;
            if (this.tabBarItems && this.tabBarItems.length > 0) {
                this.selectTabBarItem(tab);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBarComponent.prototype, "tintColor", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tintColor;
        },
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            var _this = this;
            this._tintColor = color;
            if (this.tabBarItems && this.tabBarItems.length > 0) {
                this.tabBarItems.forEach((/**
                 * @param {?} tabBarItem
                 * @return {?}
                 */
                function (tabBarItem) {
                    tabBarItem.tintColor = _this._tintColor;
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBarComponent.prototype, "unselectedTintColor", {
        get: /**
         * @return {?}
         */
        function () {
            return this._unselectedTintColor;
        },
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            var _this = this;
            this._unselectedTintColor = color;
            if (this.tabBarItems && this.tabBarItems.length > 0) {
                this.tabBarItems.forEach((/**
                 * @param {?} tabBarItem
                 * @return {?}
                 */
                function (tabBarItem) {
                    tabBarItem.unselectedTintColor = _this._unselectedTintColor;
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    TabBarComponent.prototype.selectTabBarItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.tabBarItems && this.tabBarItems.length > 0) {
            this.tabBarItems.forEach((/**
             * @param {?} tabBarItem
             * @return {?}
             */
            function (tabBarItem) {
                tabBarItem.selected = false;
            }));
            this.tabBarItems.toArray()[index].selected = true;
        }
    };
    /**
     * @param {?} pressParam
     * @return {?}
     */
    TabBarComponent.prototype.tabBarTabOnPress = /**
     * @param {?} pressParam
     * @return {?}
     */
    function (pressParam) {
        this.onPress.emit(pressParam);
    };
    /**
     * @return {?}
     */
    TabBarComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tabBarItems && this.tabBarItems.length > 0) {
            this.tabBarItems.forEach((/**
             * @param {?} tabBarItem
             * @return {?}
             */
            function (tabBarItem) {
                tabBarItem.tintColor = _this._tintColor;
                tabBarItem.unselectedTintColor = _this._unselectedTintColor;
            }));
        }
        this.selectTabBarItem(this.activeTab);
    };
    TabBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'TabBar, nzm-tab-bar',
                    template: "<Tabs [activeTab]=\"activeTab\"\n      [swipeable]=\"false\"\n      [useOnPan]=\"false\"\n      [animated]=\"false\"\n      [tabDirection]=\"'horizontal'\"\n      [tabBarPosition]='tabBarPosition'\n      [renderTabBar]=\"TabBarBar\"\n      [prerenderingSiblingsNumber]=\"prerenderingSiblingsNumber\"\n      [tabPanesContent]=\"tabBarItems\"\n></Tabs>\n\n<ng-template #TabBarBar>\n  <div class=\"am-tabs-tab-bar-wrap\">\n    <div class=\"{{prefixCls}}-bar\"\n         [ngClass]=\"{'am-tab-bar-bar-hidden-top': 'top' === tabBarPosition && hidden, 'am-tab-bar-bar-hidden-bottom': 'bottom' === tabBarPosition && hidden}\"\n         [style.background-color]=\"barTintColor\">\n      <div class=\"am-tab-bar-tab\" *ngFor=\"let tabBarItem of tabBarItems; let i = index;\" (click)=\"tabBarTabOnPress({'index': i, 'key': tabBarItem.key, 'title': tabBarItem.title})\">\n        <ng-container [ngTemplateOutlet]=\"tabBarItem.tabBarTab\"></ng-container>\n      </div>\n    </div>\n  </div>\n</ng-template>"
                }] }
    ];
    /** @nocollapse */
    TabBarComponent.ctorParameters = function () { return []; };
    TabBarComponent.propDecorators = {
        tabBarItems: [{ type: ContentChildren, args: [TabBarItemComponent, { descendants: true },] }],
        hidden: [{ type: Input }],
        prerenderingSiblingsNumber: [{ type: Input }],
        activeTab: [{ type: Input }],
        barTintColor: [{ type: Input }],
        tabBarPosition: [{ type: Input }],
        tintColor: [{ type: Input }],
        unselectedTintColor: [{ type: Input }],
        onPress: [{ type: Output }],
        tabBar: [{ type: HostBinding, args: ['class.am-tab-bar',] }]
    };
    return TabBarComponent;
}());
export { TabBarComponent };
if (false) {
    /** @type {?} */
    TabBarComponent.prototype.prefixCls;
    /**
     * @type {?}
     * @private
     */
    TabBarComponent.prototype._activeTab;
    /**
     * @type {?}
     * @private
     */
    TabBarComponent.prototype._tintColor;
    /**
     * @type {?}
     * @private
     */
    TabBarComponent.prototype._unselectedTintColor;
    /** @type {?} */
    TabBarComponent.prototype.tabBarItems;
    /** @type {?} */
    TabBarComponent.prototype.hidden;
    /** @type {?} */
    TabBarComponent.prototype.prerenderingSiblingsNumber;
    /** @type {?} */
    TabBarComponent.prototype.barTintColor;
    /** @type {?} */
    TabBarComponent.prototype.tabBarPosition;
    /** @type {?} */
    TabBarComponent.prototype.onPress;
    /** @type {?} */
    TabBarComponent.prototype.tabBar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbInRhYi1iYXIvdGFiLWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW9CLEtBQUssRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xJLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7O0FBRy9ELHdDQUlDOzs7SUFIQyxtQ0FBYzs7SUFDZCxtQ0FBYzs7SUFDZCxpQ0FBWTs7QUFHZDtJQTZERTtRQXhEQSxjQUFTLEdBQVcsWUFBWSxDQUFDO1FBQ3pCLGVBQVUsR0FBVyxDQUFDLENBQUM7UUFDdkIsZUFBVSxHQUFXLFNBQVMsQ0FBQztRQUMvQix5QkFBb0IsR0FBVyxNQUFNLENBQUM7UUFNOUMsV0FBTSxHQUFZLEtBQUssQ0FBQztRQUV4QiwrQkFBMEIsR0FBVyxDQUFDLENBQUMsQ0FBQztRQVl4QyxpQkFBWSxHQUFXLE9BQU8sQ0FBQztRQUUvQixtQkFBYyxHQUEwQixRQUFRLENBQUM7UUEwQmpELFlBQU8sR0FBcUMsSUFBSSxZQUFZLEVBQXNCLENBQUM7UUFHbkYsV0FBTSxHQUFZLElBQUksQ0FBQztJQUVQLENBQUM7SUE1Q2pCLHNCQUNJLHNDQUFTOzs7O1FBRGI7WUFFRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDekIsQ0FBQzs7Ozs7UUFDRCxVQUFjLEdBQVc7WUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7WUFDdEIsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzVCO1FBQ0gsQ0FBQzs7O09BTkE7SUFXRCxzQkFDSSxzQ0FBUzs7OztRQURiO1lBRUUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3pCLENBQUM7Ozs7O1FBQ0QsVUFBYyxLQUFhO1lBQTNCLGlCQU9DO1lBTkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDeEIsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPOzs7O2dCQUFDLFVBQUMsVUFBK0I7b0JBQ3ZELFVBQVUsQ0FBQyxTQUFTLEdBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQztnQkFDekMsQ0FBQyxFQUFDLENBQUM7YUFDSjtRQUNILENBQUM7OztPQVJBO0lBU0Qsc0JBQ0ksZ0RBQW1COzs7O1FBRHZCO1lBRUUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUM7UUFDbkMsQ0FBQzs7Ozs7UUFDRCxVQUF3QixLQUFhO1lBQXJDLGlCQU9DO1lBTkMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQztZQUNsQyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87Ozs7Z0JBQUMsVUFBQyxVQUErQjtvQkFDdkQsVUFBVSxDQUFDLG1CQUFtQixHQUFHLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQztnQkFDN0QsQ0FBQyxFQUFDLENBQUM7YUFDSjtRQUNILENBQUM7OztPQVJBOzs7OztJQWlCRCwwQ0FBZ0I7Ozs7SUFBaEIsVUFBaUIsS0FBYTtRQUM1QixJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTzs7OztZQUFDLFVBQUMsVUFBK0I7Z0JBQ3ZELFVBQVUsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQzlCLENBQUMsRUFBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ25EO0lBQ0gsQ0FBQzs7Ozs7SUFFRCwwQ0FBZ0I7Ozs7SUFBaEIsVUFBaUIsVUFBOEI7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELDRDQUFrQjs7O0lBQWxCO1FBQUEsaUJBUUM7UUFQQyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTzs7OztZQUFDLFVBQUMsVUFBK0I7Z0JBQ3ZELFVBQVUsQ0FBQyxTQUFTLEdBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQztnQkFDdkMsVUFBVSxDQUFDLG1CQUFtQixHQUFHLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQztZQUM3RCxDQUFDLEVBQUMsQ0FBQztTQUNKO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDOztnQkFwRkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLDYrQkFBdUM7aUJBQ3hDOzs7Ozs4QkFPRSxlQUFlLFNBQUMsbUJBQW1CLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO3lCQUcxRCxLQUFLOzZDQUVMLEtBQUs7NEJBRUwsS0FBSzsrQkFVTCxLQUFLO2lDQUVMLEtBQUs7NEJBRUwsS0FBSztzQ0FZTCxLQUFLOzBCQVlMLE1BQU07eUJBR04sV0FBVyxTQUFDLGtCQUFrQjs7SUE0QmpDLHNCQUFDO0NBQUEsQUF0RkQsSUFzRkM7U0FsRlksZUFBZTs7O0lBQzFCLG9DQUFpQzs7Ozs7SUFDakMscUNBQStCOzs7OztJQUMvQixxQ0FBdUM7Ozs7O0lBQ3ZDLCtDQUE4Qzs7SUFFOUMsc0NBQzRDOztJQUU1QyxpQ0FDd0I7O0lBQ3hCLHFEQUN3Qzs7SUFXeEMsdUNBQytCOztJQUMvQix5Q0FDaUQ7O0lBeUJqRCxrQ0FDbUY7O0lBRW5GLGlDQUN1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQWZ0ZXJDb250ZW50SW5pdCwgSW5wdXQsIE91dHB1dCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIEhvc3RCaW5kaW5nLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhYkJhckl0ZW1Db21wb25lbnQgfSBmcm9tICcuL3RhYi1iYXItaXRlbS5jb21wb25lbnQnO1xuXG5leHBvcnQgdHlwZSBUYWJCYXJUYWJQb3NpdGlvblR5cGUgPSAndG9wJyB8ICdib3R0b20nO1xuZXhwb3J0IGludGVyZmFjZSBUYWJCYXJPblByZXNzRXZlbnQge1xuICBpbmRleDogbnVtYmVyO1xuICB0aXRsZTogc3RyaW5nO1xuICBrZXk6IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnVGFiQmFyLCBuem0tdGFiLWJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90YWItYmFyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUYWJCYXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgcHJlZml4Q2xzOiBzdHJpbmcgPSAnYW0tdGFiLWJhcic7XG4gIHByaXZhdGUgX2FjdGl2ZVRhYjogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfdGludENvbG9yOiBzdHJpbmcgPSAnIzEwOGVlOSc7XG4gIHByaXZhdGUgX3Vuc2VsZWN0ZWRUaW50Q29sb3I6IHN0cmluZyA9ICcjODg4JztcblxuICBAQ29udGVudENoaWxkcmVuKFRhYkJhckl0ZW1Db21wb25lbnQsIHsgZGVzY2VuZGFudHM6IHRydWUgfSlcbiAgdGFiQmFySXRlbXM6IFF1ZXJ5TGlzdDxUYWJCYXJJdGVtQ29tcG9uZW50PjtcblxuICBASW5wdXQoKVxuICBoaWRkZW46IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KClcbiAgcHJlcmVuZGVyaW5nU2libGluZ3NOdW1iZXI6IG51bWJlciA9IC0xO1xuICBASW5wdXQoKVxuICBnZXQgYWN0aXZlVGFiKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVRhYjtcbiAgfVxuICBzZXQgYWN0aXZlVGFiKHRhYjogbnVtYmVyKSB7XG4gICAgdGhpcy5fYWN0aXZlVGFiID0gdGFiO1xuICAgIGlmICh0aGlzLnRhYkJhckl0ZW1zICYmIHRoaXMudGFiQmFySXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5zZWxlY3RUYWJCYXJJdGVtKHRhYik7XG4gICAgfVxuICB9XG4gIEBJbnB1dCgpXG4gIGJhclRpbnRDb2xvcjogc3RyaW5nID0gJ3doaXRlJztcbiAgQElucHV0KClcbiAgdGFiQmFyUG9zaXRpb246IFRhYkJhclRhYlBvc2l0aW9uVHlwZSA9ICdib3R0b20nO1xuICBASW5wdXQoKVxuICBnZXQgdGludENvbG9yKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbnRDb2xvcjtcbiAgfVxuICBzZXQgdGludENvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90aW50Q29sb3IgPSBjb2xvcjtcbiAgICBpZiAodGhpcy50YWJCYXJJdGVtcyAmJiB0aGlzLnRhYkJhckl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMudGFiQmFySXRlbXMuZm9yRWFjaCgodGFiQmFySXRlbTogVGFiQmFySXRlbUNvbXBvbmVudCkgPT4ge1xuICAgICAgICB0YWJCYXJJdGVtLnRpbnRDb2xvciA9IHRoaXMuX3RpbnRDb2xvcjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBASW5wdXQoKVxuICBnZXQgdW5zZWxlY3RlZFRpbnRDb2xvcigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl91bnNlbGVjdGVkVGludENvbG9yO1xuICB9XG4gIHNldCB1bnNlbGVjdGVkVGludENvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLl91bnNlbGVjdGVkVGludENvbG9yID0gY29sb3I7XG4gICAgaWYgKHRoaXMudGFiQmFySXRlbXMgJiYgdGhpcy50YWJCYXJJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnRhYkJhckl0ZW1zLmZvckVhY2goKHRhYkJhckl0ZW06IFRhYkJhckl0ZW1Db21wb25lbnQpID0+IHtcbiAgICAgICAgdGFiQmFySXRlbS51bnNlbGVjdGVkVGludENvbG9yID0gdGhpcy5fdW5zZWxlY3RlZFRpbnRDb2xvcjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBAT3V0cHV0KClcbiAgb25QcmVzczogRXZlbnRFbWl0dGVyPFRhYkJhck9uUHJlc3NFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPFRhYkJhck9uUHJlc3NFdmVudD4oKTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFtLXRhYi1iYXInKVxuICB0YWJCYXI6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgc2VsZWN0VGFiQmFySXRlbShpbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMudGFiQmFySXRlbXMgJiYgdGhpcy50YWJCYXJJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnRhYkJhckl0ZW1zLmZvckVhY2goKHRhYkJhckl0ZW06IFRhYkJhckl0ZW1Db21wb25lbnQpID0+IHtcbiAgICAgICAgdGFiQmFySXRlbS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnRhYkJhckl0ZW1zLnRvQXJyYXkoKVtpbmRleF0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHRhYkJhclRhYk9uUHJlc3MocHJlc3NQYXJhbTogVGFiQmFyT25QcmVzc0V2ZW50KSB7XG4gICAgdGhpcy5vblByZXNzLmVtaXQocHJlc3NQYXJhbSk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgaWYgKHRoaXMudGFiQmFySXRlbXMgJiYgdGhpcy50YWJCYXJJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnRhYkJhckl0ZW1zLmZvckVhY2goKHRhYkJhckl0ZW06IFRhYkJhckl0ZW1Db21wb25lbnQpID0+IHtcbiAgICAgICAgdGFiQmFySXRlbS50aW50Q29sb3IgPSB0aGlzLl90aW50Q29sb3I7XG4gICAgICAgIHRhYkJhckl0ZW0udW5zZWxlY3RlZFRpbnRDb2xvciA9IHRoaXMuX3Vuc2VsZWN0ZWRUaW50Q29sb3I7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5zZWxlY3RUYWJCYXJJdGVtKHRoaXMuYWN0aXZlVGFiKTtcbiAgfVxuXG59XG4iXX0=